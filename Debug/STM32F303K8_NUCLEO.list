
STM32F303K8_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001df8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001f80  08001f80  00011f80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001fbc  08001fbc  00011fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001fc0  08001fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          000001bc  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200001cc  200001cc  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000deba  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002554  00000000  00000000  0002defa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00004909  00000000  00000000  0003044e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000750  00000000  00000000  00034d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000009c0  00000000  00000000  000354a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016fc3  00000000  00000000  00035e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ba1d  00000000  00000000  0004ce2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0007fdd0  00000000  00000000  00058848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000d8618  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000012dc  00000000  00000000  000d866c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f68 	.word	0x08001f68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001f68 	.word	0x08001f68

080001c8 <MX_CAN1_Init>:

/* Private functions ---------------------------------------------------------*/

/* USART2 init function */
void MX_CAN1_Init(void)
{
 80001c8:	b510      	push	{r4, lr}
    CAN_FilterTypeDef  sFilterConfig;

    /* Configure the CAN peripheral */
    hcan.Instance = CANx;  
 80001ca:	481e      	ldr	r0, [pc, #120]	; (8000244 <MX_CAN1_Init+0x7c>)
    hcan.Init.TransmitFifoPriority = DISABLE;
    hcan.Init.Mode = CAN_MODE_NORMAL;
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
    hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
    hcan.Init.Prescaler = 4;
 80001cc:	4a1e      	ldr	r2, [pc, #120]	; (8000248 <MX_CAN1_Init+0x80>)
 80001ce:	2304      	movs	r3, #4
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80001d0:	2400      	movs	r4, #0
    hcan.Init.Prescaler = 4;
 80001d2:	e9c0 2300 	strd	r2, r3, [r0]
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80001d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80001da:	e9c0 4302 	strd	r4, r3, [r0, #8]
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80001de:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80001e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001e6:	e9c0 1304 	strd	r1, r3, [r0, #16]
    hcan.Init.TimeTriggeredMode = DISABLE;
 80001ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80001ee:	b08a      	sub	sp, #40	; 0x28
    hcan.Init.TimeTriggeredMode = DISABLE;
 80001f0:	6183      	str	r3, [r0, #24]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 80001f2:	8384      	strh	r4, [r0, #28]
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001f4:	f000 fafe 	bl	80007f4 <HAL_CAN_Init>
 80001f8:	b108      	cbz	r0, 80001fe <MX_CAN1_Init+0x36>
    {
        Error_Handler();
 80001fa:	f000 f8f1 	bl	80003e0 <Error_Handler>
    }

    /* Configure the CAN Filter */
    sFilterConfig.FilterBank = 0;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001fe:	2301      	movs	r3, #1
 8000200:	9307      	str	r3, [sp, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
    sFilterConfig.FilterIdLow = 0x0000;
    sFilterConfig.FilterMaskIdHigh = 0x0000;
    sFilterConfig.FilterMaskIdLow = 0x0000;
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
 8000202:	9308      	str	r3, [sp, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000204:	480f      	ldr	r0, [pc, #60]	; (8000244 <MX_CAN1_Init+0x7c>)
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000206:	9404      	str	r4, [sp, #16]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000208:	230e      	movs	r3, #14
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800020a:	4669      	mov	r1, sp
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800020c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    sFilterConfig.FilterIdLow = 0x0000;
 8000210:	e9cd 4400 	strd	r4, r4, [sp]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000214:	e9cd 4402 	strd	r4, r4, [sp, #8]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000218:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800021a:	f000 fb66 	bl	80008ea <HAL_CAN_ConfigFilter>
 800021e:	b108      	cbz	r0, 8000224 <MX_CAN1_Init+0x5c>
    {
        Error_Handler();
 8000220:	f000 f8de 	bl	80003e0 <Error_Handler>
    }

    /* Start the CAN peripheral */
    if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000224:	4807      	ldr	r0, [pc, #28]	; (8000244 <MX_CAN1_Init+0x7c>)
 8000226:	f000 fbcf 	bl	80009c8 <HAL_CAN_Start>
 800022a:	b108      	cbz	r0, 8000230 <MX_CAN1_Init+0x68>
    {
        Error_Handler();
 800022c:	f000 f8d8 	bl	80003e0 <Error_Handler>
    }

    /* Activate CAN RX notification */
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <MX_CAN1_Init+0x7c>)
 8000232:	2102      	movs	r1, #2
 8000234:	f000 fcbd 	bl	8000bb2 <HAL_CAN_ActivateNotification>
 8000238:	b108      	cbz	r0, 800023e <MX_CAN1_Init+0x76>
    {
        Error_Handler();
 800023a:	f000 f8d1 	bl	80003e0 <Error_Handler>
    }
}
 800023e:	b00a      	add	sp, #40	; 0x28
 8000240:	bd10      	pop	{r4, pc}
 8000242:	bf00      	nop
 8000244:	20000060 	.word	0x20000060
 8000248:	40006400 	.word	0x40006400

0800024c <HAL_CAN_MspInit>:
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
    GPIO_InitTypeDef   GPIO_InitStruct; 
    
    /* CAN1 Periph clock enable */
    CANx_CLK_ENABLE();
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <HAL_CAN_MspInit+0x78>)
{
 800024e:	b5f0      	push	{r4, r5, r6, r7, lr}
    CANx_CLK_ENABLE();
 8000250:	69da      	ldr	r2, [r3, #28]
 8000252:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000256:	61da      	str	r2, [r3, #28]
 8000258:	69da      	ldr	r2, [r3, #28]
{
 800025a:	b089      	sub	sp, #36	; 0x24
    CANx_CLK_ENABLE();
 800025c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000260:	9201      	str	r2, [sp, #4]
 8000262:	9a01      	ldr	r2, [sp, #4]
    
    /* Enable GPIO clock */
    CANx_GPIO_CLK_ENABLE(); 
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800026a:	615a      	str	r2, [r3, #20]
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000272:	9302      	str	r3, [sp, #8]
    
    /* CAN1 TX GPIO pin configuration */
    GPIO_InitStruct.Pin = CANx_TX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000274:	2401      	movs	r4, #1
    CANx_GPIO_CLK_ENABLE(); 
 8000276:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000278:	2702      	movs	r7, #2
 800027a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027e:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate =  CANx_TX_AF;    
 8000280:	2509      	movs	r5, #9
    HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct); 
 8000282:	a903      	add	r1, sp, #12
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000288:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800028c:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Alternate =  CANx_TX_AF;    
 8000290:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct); 
 8000292:	f000 fee3 	bl	800105c <HAL_GPIO_Init>
    
    /* CAN1 RX GPIO pin configuration */
    GPIO_InitStruct.Pin = CANx_RX_PIN;
 8000296:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Alternate =  CANx_RX_AF;    
    HAL_GPIO_Init(CANx_RX_GPIO_PORT, &GPIO_InitStruct); 
 800029a:	a903      	add	r1, sp, #12
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002a0:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a4:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Alternate =  CANx_RX_AF;    
 80002a8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CANx_RX_GPIO_PORT, &GPIO_InitStruct); 
 80002aa:	f000 fed7 	bl	800105c <HAL_GPIO_Init>
    
    /* NVIC configuration for CAN1 Reception complete interrupt */
    HAL_NVIC_SetPriority(CANx_RX_IRQn, 1, 0);
 80002ae:	2200      	movs	r2, #0
 80002b0:	4621      	mov	r1, r4
 80002b2:	2014      	movs	r0, #20
 80002b4:	f000 fdaa 	bl	8000e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CANx_RX_IRQn);
 80002b8:	2014      	movs	r0, #20
 80002ba:	f000 fdd9 	bl	8000e70 <HAL_NVIC_EnableIRQ>
}
 80002be:	b009      	add	sp, #36	; 0x24
 80002c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000

080002c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80002c8:	b508      	push	{r3, lr}
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx) != HAL_OK)
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002cc:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80002ce:	2100      	movs	r1, #0
 80002d0:	f000 fbf8 	bl	8000ac4 <HAL_CAN_GetRxMessage>
 80002d4:	b108      	cbz	r0, 80002da <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
		Error_Handler();
 80002d6:	f000 f883 	bl	80003e0 <Error_Handler>

	if (can_rx_header.DLC == CAN_DATA_LENGTH)
 80002da:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80002dc:	6818      	ldr	r0, [r3, #0]
 80002de:	691b      	ldr	r3, [r3, #16]
 80002e0:	2b04      	cmp	r3, #4
 80002e2:	d122      	bne.n	800032a <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
	{
		usart_tx[0] = ((can_rx_header.StdId & 0x0000FF00) >> 8);
 80002e4:	4b19      	ldr	r3, [pc, #100]	; (800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80002e6:	4a1a      	ldr	r2, [pc, #104]	; (8000350 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
		usart_tx[1] = (can_rx_header.StdId & 0x000000FF);
 80002e8:	7058      	strb	r0, [r3, #1]
		usart_tx[0] = ((can_rx_header.StdId & 0x0000FF00) >> 8);
 80002ea:	f3c0 2107 	ubfx	r1, r0, #8, #8

		switch (usart_tx[0])
 80002ee:	2901      	cmp	r1, #1
		usart_tx[0] = ((can_rx_header.StdId & 0x0000FF00) >> 8);
 80002f0:	7019      	strb	r1, [r3, #0]
		switch (usart_tx[0])
 80002f2:	d005      	beq.n	8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 80002f4:	2902      	cmp	r1, #2
 80002f6:	d020      	beq.n	800033a <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
			break;
		case 0x02:
			can_sdo_rx_cnt++;
			break;
		default:
			can_inv_rx_cnt++;
 80002f8:	6891      	ldr	r1, [r2, #8]
 80002fa:	3101      	adds	r1, #1
 80002fc:	6091      	str	r1, [r2, #8]
			break;
 80002fe:	e002      	b.n	8000306 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
			can_pdo_rx_cnt++;
 8000300:	6811      	ldr	r1, [r2, #0]
 8000302:	3101      	adds	r1, #1
 8000304:	6011      	str	r1, [r2, #0]
		}
		usart_tx[2] = can_rx[0];
 8000306:	4a10      	ldr	r2, [pc, #64]	; (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000308:	7811      	ldrb	r1, [r2, #0]
 800030a:	7099      	strb	r1, [r3, #2]
		usart_tx[3] = can_rx[1];
 800030c:	7851      	ldrb	r1, [r2, #1]
 800030e:	70d9      	strb	r1, [r3, #3]
		usart_tx[4] = can_rx[2];
 8000310:	7891      	ldrb	r1, [r2, #2]
		usart_tx[5] = can_rx[3];
 8000312:	78d2      	ldrb	r2, [r2, #3]
 8000314:	715a      	strb	r2, [r3, #5]
		usart_tx[6] = (uint8_t)((usart_tx_msg_cnt & 0xFF00) >> 8);
 8000316:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
		usart_tx[4] = can_rx[2];
 8000318:	7119      	strb	r1, [r3, #4]
		usart_tx[6] = (uint8_t)((usart_tx_msg_cnt & 0xFF00) >> 8);
 800031a:	8812      	ldrh	r2, [r2, #0]
		usart_tx[7] = (uint8_t)(usart_tx_msg_cnt & 0x00FF);
 800031c:	71da      	strb	r2, [r3, #7]
		usart_tx[6] = (uint8_t)((usart_tx_msg_cnt & 0xFF00) >> 8);
 800031e:	0a11      	lsrs	r1, r2, #8
		usart_tx[8] = '\r';
 8000320:	220d      	movs	r2, #13
 8000322:	721a      	strb	r2, [r3, #8]
		usart_tx[9] = '\n';
 8000324:	220a      	movs	r2, #10
		usart_tx[6] = (uint8_t)((usart_tx_msg_cnt & 0xFF00) >> 8);
 8000326:	7199      	strb	r1, [r3, #6]
		usart_tx[9] = '\n';
 8000328:	725a      	strb	r2, [r3, #9]
		//if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)usart_tx, USART_MSG_LENGTH)!= HAL_OK)
		//	Error_Handler();
	}

	/* Display LEDx */
	if (can_rx_header.StdId == ID_PDO_00)
 800032a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800032e:	d108      	bne.n	8000342 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
	{
		BSP_LED_Toggle(LED3);
	}
}
 8000330:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BSP_LED_Toggle(LED3);
 8000334:	2000      	movs	r0, #0
 8000336:	f000 b9db 	b.w	80006f0 <BSP_LED_Toggle>
			can_sdo_rx_cnt++;
 800033a:	6851      	ldr	r1, [r2, #4]
 800033c:	3101      	adds	r1, #1
 800033e:	6051      	str	r1, [r2, #4]
			break;
 8000340:	e7e1      	b.n	8000306 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
}
 8000342:	bd08      	pop	{r3, pc}
 8000344:	20000044 	.word	0x20000044
 8000348:	200000a4 	.word	0x200000a4
 800034c:	200000ec 	.word	0x200000ec
 8000350:	2000002c 	.word	0x2000002c
 8000354:	2000003a 	.word	0x2000003a

08000358 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b530      	push	{r4, r5, lr}
 800035a:	b091      	sub	sp, #68	; 0x44
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035c:	2218      	movs	r2, #24
 800035e:	2100      	movs	r1, #0
 8000360:	a807      	add	r0, sp, #28
 8000362:	f001 fdf9 	bl	8001f58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000366:	2214      	movs	r2, #20
 8000368:	2100      	movs	r1, #0
 800036a:	a801      	add	r0, sp, #4
 800036c:	f001 fdf4 	bl	8001f58 <memset>
  
	/* HSI Oscillator already ON after system reset, activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000370:	2501      	movs	r5, #1
 8000372:	2310      	movs	r3, #16
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000374:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000382:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000386:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000388:	940d      	str	r4, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	f000 ff2d 	bl	80011e8 <HAL_RCC_OscConfig>
 800038e:	b100      	cbz	r0, 8000392 <SystemClock_Config+0x3a>
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
	while(1)
 8000390:	e7fe      	b.n	8000390 <SystemClock_Config+0x38>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000392:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000398:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800039a:	4629      	mov	r1, r5
 800039c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	e9cd 3401 	strd	r3, r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a2:	f001 f9d5 	bl	8001750 <HAL_RCC_ClockConfig>
 80003a6:	b100      	cbz	r0, 80003aa <SystemClock_Config+0x52>
	while(1)
 80003a8:	e7fe      	b.n	80003a8 <SystemClock_Config+0x50>
}
 80003aa:	b011      	add	sp, #68	; 0x44
 80003ac:	bd30      	pop	{r4, r5, pc}
	...

080003b0 <main>:
{
 80003b0:	b508      	push	{r3, lr}
	HAL_Init();
 80003b2:	f000 f9fb 	bl	80007ac <HAL_Init>
	SystemClock_Config();
 80003b6:	f7ff ffcf 	bl	8000358 <SystemClock_Config>
	BSP_LED_Init(LED3);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 f970 	bl	80006a0 <BSP_LED_Init>
	MX_USART2_UART_Init();
 80003c0:	f000 f84a 	bl	8000458 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 80003c4:	f7ff ff00 	bl	80001c8 <MX_CAN1_Init>
	if (HAL_UART_Receive_DMA(&huart2, (uint8_t*)usart_rx, USART_MSG_LENGTH)!= HAL_OK)
 80003c8:	4903      	ldr	r1, [pc, #12]	; (80003d8 <main+0x28>)
 80003ca:	4804      	ldr	r0, [pc, #16]	; (80003dc <main+0x2c>)
 80003cc:	220a      	movs	r2, #10
 80003ce:	f001 faa9 	bl	8001924 <HAL_UART_Receive_DMA>
 80003d2:	b100      	cbz	r0, 80003d6 <main+0x26>
	while(1)
 80003d4:	e7fe      	b.n	80003d4 <main+0x24>
	while (1)
 80003d6:	e7fe      	b.n	80003d6 <main+0x26>
 80003d8:	2000013c 	.word	0x2000013c
 80003dc:	20000148 	.word	0x20000148

080003e0 <Error_Handler>:
	while(1)
 80003e0:	e7fe      	b.n	80003e0 <Error_Handler>
	...

080003e4 <HAL_MspInit>:
  * @param None
  * @retval None
  */
void HAL_MspInit(void)
{
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_MspInit+0x2c>)
 80003e6:	699a      	ldr	r2, [r3, #24]
 80003e8:	f042 0201 	orr.w	r2, r2, #1
 80003ec:	619a      	str	r2, [r3, #24]
 80003ee:	699a      	ldr	r2, [r3, #24]
{
 80003f0:	b082      	sub	sp, #8
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	f002 0201 	and.w	r2, r2, #1
 80003f6:	9200      	str	r2, [sp, #0]
 80003f8:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	69da      	ldr	r2, [r3, #28]
 80003fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000400:	61da      	str	r2, [r3, #28]
 8000402:	69db      	ldr	r3, [r3, #28]
 8000404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	9b01      	ldr	r3, [sp, #4]
}
 800040c:	b002      	add	sp, #8
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000

08000414 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000414:	4770      	bx	lr

08000416 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000416:	e7fe      	b.n	8000416 <HardFault_Handler>

08000418 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000418:	e7fe      	b.n	8000418 <MemManage_Handler>

0800041a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800041a:	e7fe      	b.n	800041a <BusFault_Handler>

0800041c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800041c:	e7fe      	b.n	800041c <UsageFault_Handler>

0800041e <SVC_Handler>:
 800041e:	4770      	bx	lr

08000420 <DebugMon_Handler>:
 8000420:	4770      	bx	lr

08000422 <PendSV_Handler>:
 8000422:	4770      	bx	lr

08000424 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000424:	f000 b9d4 	b.w	80007d0 <HAL_IncTick>

08000428 <DMA1_Channel6_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(huart2.hdmarx);
 8000428:	4b01      	ldr	r3, [pc, #4]	; (8000430 <DMA1_Channel6_IRQHandler+0x8>)
 800042a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800042c:	f000 bdcf 	b.w	8000fce <HAL_DMA_IRQHandler>
 8000430:	20000148 	.word	0x20000148

08000434 <DMA1_Channel7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(huart2.hdmatx);
 8000434:	4b01      	ldr	r3, [pc, #4]	; (800043c <DMA1_Channel7_IRQHandler+0x8>)
 8000436:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000438:	f000 bdc9 	b.w	8000fce <HAL_DMA_IRQHandler>
 800043c:	20000148 	.word	0x20000148

08000440 <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA  
  *         used for USART data transmission     
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&huart2);
 8000440:	4801      	ldr	r0, [pc, #4]	; (8000448 <USART2_IRQHandler+0x8>)
 8000442:	f001 bafd 	b.w	8001a40 <HAL_UART_IRQHandler>
 8000446:	bf00      	nop
 8000448:	20000148 	.word	0x20000148

0800044c <CAN_RX0_IRQHandler>:
  * @param  None
  * @retval None
  */
void CANx_RX_IRQHandler(void)
{
  HAL_CAN_IRQHandler(&hcan);
 800044c:	4801      	ldr	r0, [pc, #4]	; (8000454 <CAN_RX0_IRQHandler+0x8>)
 800044e:	f000 bbcd 	b.w	8000bec <HAL_CAN_IRQHandler>
 8000452:	bf00      	nop
 8000454:	20000060 	.word	0x20000060

08000458 <MX_USART2_UART_Init>:
/* Private functions ---------------------------------------------------------*/

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
	huart2.Instance = USART2;
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <MX_USART2_UART_Init+0x34>)
	huart2.Init.BaudRate = 115200;
 800045a:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <MX_USART2_UART_Init+0x38>)
{
 800045c:	b508      	push	{r3, lr}
	huart2.Init.BaudRate = 115200;
 800045e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000462:	e9c0 2300 	strd	r2, r3, [r0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	2300      	movs	r3, #0
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000468:	220c      	movs	r2, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 800046a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000472:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000476:	6103      	str	r3, [r0, #16]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000478:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800047a:	f001 fd19 	bl	8001eb0 <HAL_UART_Init>
 800047e:	b118      	cbz	r0, 8000488 <MX_USART2_UART_Init+0x30>
	{
	  Error_Handler();
	}
}
 8000480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 8000484:	f7ff bfac 	b.w	80003e0 <Error_Handler>
}
 8000488:	bd08      	pop	{r3, pc}
 800048a:	bf00      	nop
 800048c:	20000148 	.word	0x20000148
 8000490:	40004400 	.word	0x40004400

08000494 <HAL_UART_MspInit>:
{

	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* Enable GPIO clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 8000494:	4b3c      	ldr	r3, [pc, #240]	; (8000588 <HAL_UART_MspInit+0xf4>)
{
 8000496:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	USARTx_TX_GPIO_CLK_ENABLE();
 800049a:	695a      	ldr	r2, [r3, #20]
	GPIO_InitStruct.Alternate = USARTx_TX_AF;

	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);

	/* Configure the DMA handler for Transmission process */
	hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800049c:	4d3b      	ldr	r5, [pc, #236]	; (800058c <HAL_UART_MspInit+0xf8>)
	USARTx_TX_GPIO_CLK_ENABLE();
 800049e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004a2:	615a      	str	r2, [r3, #20]
 80004a4:	695a      	ldr	r2, [r3, #20]
{
 80004a6:	b08b      	sub	sp, #44	; 0x2c
	USARTx_TX_GPIO_CLK_ENABLE();
 80004a8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80004ac:	9201      	str	r2, [sp, #4]
 80004ae:	9a01      	ldr	r2, [sp, #4]
	USARTx_RX_GPIO_CLK_ENABLE();
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80004be:	9202      	str	r2, [sp, #8]
 80004c0:	9a02      	ldr	r2, [sp, #8]
	USARTx_CLK_ENABLE();
 80004c2:	69da      	ldr	r2, [r3, #28]
 80004c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004c8:	61da      	str	r2, [r3, #28]
 80004ca:	69da      	ldr	r2, [r3, #28]
 80004cc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80004d0:	9203      	str	r2, [sp, #12]
 80004d2:	9a03      	ldr	r2, [sp, #12]
	DMAx_CLK_ENABLE();
 80004d4:	695a      	ldr	r2, [r3, #20]
 80004d6:	f042 0201 	orr.w	r2, r2, #1
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e4:	f248 0204 	movw	r2, #32772	; 0x8004
	DMAx_CLK_ENABLE();
 80004e8:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ea:	2302      	movs	r3, #2
 80004ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f0:	2701      	movs	r7, #1
 80004f2:	2303      	movs	r3, #3
{
 80004f4:	4606      	mov	r6, r0
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80004f6:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f8:	e9cd 7307 	strd	r7, r3, [sp, #28]
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000500:	2307      	movs	r3, #7
 8000502:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000504:	f000 fdaa 	bl	800105c <HAL_GPIO_Init>
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <HAL_UART_MspInit+0xfc>)
	hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800050a:	2400      	movs	r4, #0
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800050c:	f04f 0810 	mov.w	r8, #16
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000510:	f04f 0980 	mov.w	r9, #128	; 0x80
	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_tx.Init.Mode                = DMA_NORMAL;
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

	HAL_DMA_Init(&hdma_tx);
 8000514:	4628      	mov	r0, r5
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000516:	e9c5 3800 	strd	r3, r8, [r5]
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800051a:	e9c5 4902 	strd	r4, r9, [r5, #8]
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800051e:	e9c5 4404 	strd	r4, r4, [r5, #16]
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8000522:	e9c5 4406 	strd	r4, r4, [r5, #24]
	HAL_DMA_Init(&hdma_tx);
 8000526:	f000 fcc7 	bl	8000eb8 <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the UART handle */
	__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800052a:	66b5      	str	r5, [r6, #104]	; 0x68
 800052c:	626e      	str	r6, [r5, #36]	; 0x24

	/* Configure the DMA handler for reception process */
	hdma_rx.Instance                 = USARTx_RX_DMA_CHANNEL;
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <HAL_UART_MspInit+0x100>)
 8000530:	4d19      	ldr	r5, [pc, #100]	; (8000598 <HAL_UART_MspInit+0x104>)
	hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000532:	e9c5 3400 	strd	r3, r4, [r5]
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_rx.Init.Mode                = DMA_NORMAL;
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

	HAL_DMA_Init(&hdma_rx);
 8000536:	4628      	mov	r0, r5
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800053c:	61eb      	str	r3, [r5, #28]
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800053e:	e9c5 4902 	strd	r4, r9, [r5, #8]
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000542:	e9c5 4404 	strd	r4, r4, [r5, #16]
	hdma_rx.Init.Mode                = DMA_NORMAL;
 8000546:	61ac      	str	r4, [r5, #24]
	HAL_DMA_Init(&hdma_rx);
 8000548:	f000 fcb6 	bl	8000eb8 <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the the UART handle */
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);

	/* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 800054c:	463a      	mov	r2, r7
 800054e:	4621      	mov	r1, r4
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8000550:	66f5      	str	r5, [r6, #108]	; 0x6c
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8000552:	2011      	movs	r0, #17
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8000554:	626e      	str	r6, [r5, #36]	; 0x24
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8000556:	f000 fc59 	bl	8000e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800055a:	2011      	movs	r0, #17
 800055c:	f000 fc88 	bl	8000e70 <HAL_NVIC_EnableIRQ>

	/* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
	HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 8000560:	4622      	mov	r2, r4
 8000562:	4621      	mov	r1, r4
 8000564:	4640      	mov	r0, r8
 8000566:	f000 fc51 	bl	8000e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 800056a:	4640      	mov	r0, r8
 800056c:	f000 fc80 	bl	8000e70 <HAL_NVIC_EnableIRQ>

	/* NVIC configuration for USART, to catch the TX complete */
	HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8000570:	463a      	mov	r2, r7
 8000572:	4621      	mov	r1, r4
 8000574:	2026      	movs	r0, #38	; 0x26
 8000576:	f000 fc49 	bl	8000e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800057a:	2026      	movs	r0, #38	; 0x26
 800057c:	f000 fc78 	bl	8000e70 <HAL_NVIC_EnableIRQ>

}
 8000580:	b00b      	add	sp, #44	; 0x2c
 8000582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	200000f8 	.word	0x200000f8
 8000590:	40020080 	.word	0x40020080
 8000594:	4002006c 	.word	0x4002006c
 8000598:	200000a8 	.word	0x200000a8

0800059c <HAL_UART_TxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	usart_tx_msg_cnt++;
 800059c:	4a02      	ldr	r2, [pc, #8]	; (80005a8 <HAL_UART_TxCpltCallback+0xc>)
 800059e:	8813      	ldrh	r3, [r2, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	8013      	strh	r3, [r2, #0]
}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000003a 	.word	0x2000003a

080005ac <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005ac:	b508      	push	{r3, lr}
	if (HAL_UART_Receive_DMA(&huart2, (uint8_t*)usart_rx, USART_MSG_LENGTH)!= HAL_OK)
 80005ae:	491f      	ldr	r1, [pc, #124]	; (800062c <HAL_UART_RxCpltCallback+0x80>)
 80005b0:	481f      	ldr	r0, [pc, #124]	; (8000630 <HAL_UART_RxCpltCallback+0x84>)
 80005b2:	220a      	movs	r2, #10
 80005b4:	f001 f9b6 	bl	8001924 <HAL_UART_Receive_DMA>
 80005b8:	b108      	cbz	r0, 80005be <HAL_UART_RxCpltCallback+0x12>
		Error_Handler();
 80005ba:	f7ff ff11 	bl	80003e0 <Error_Handler>
	usart_rx_msg_cnt++;
 80005be:	4a1d      	ldr	r2, [pc, #116]	; (8000634 <HAL_UART_RxCpltCallback+0x88>)

    /* Configure Transmission process */
	if ((usart_rx[8] == 0x0D) && (usart_rx[9] == 0x0A))
 80005c0:	481a      	ldr	r0, [pc, #104]	; (800062c <HAL_UART_RxCpltCallback+0x80>)
	usart_rx_msg_cnt++;
 80005c2:	8853      	ldrh	r3, [r2, #2]
 80005c4:	3301      	adds	r3, #1
 80005c6:	8053      	strh	r3, [r2, #2]
	if ((usart_rx[8] == 0x0D) && (usart_rx[9] == 0x0A))
 80005c8:	7a03      	ldrb	r3, [r0, #8]
 80005ca:	2b0d      	cmp	r3, #13
 80005cc:	4603      	mov	r3, r0
 80005ce:	d120      	bne.n	8000612 <HAL_UART_RxCpltCallback+0x66>
 80005d0:	7a42      	ldrb	r2, [r0, #9]
 80005d2:	2a0a      	cmp	r2, #10
 80005d4:	d11d      	bne.n	8000612 <HAL_UART_RxCpltCallback+0x66>
	{
		can_tx_header.StdId = (uint32_t)((uint16_t)(usart_rx[1] & 0x00FF) +
				(uint16_t)((usart_rx[0] << 8) & 0xFF00));
 80005d6:	7802      	ldrb	r2, [r0, #0]
		can_tx_header.StdId = (uint32_t)((uint16_t)(usart_rx[1] & 0x00FF) +
 80005d8:	7843      	ldrb	r3, [r0, #1]
 80005da:	4917      	ldr	r1, [pc, #92]	; (8000638 <HAL_UART_RxCpltCallback+0x8c>)
 80005dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	    //can_tx_header.ExtId = 0x01;
		can_tx_header.RTR = CAN_RTR_DATA;
		can_tx_header.IDE = CAN_ID_STD;
		can_tx_header.DLC = CAN_DATA_LENGTH;
 80005e0:	2204      	movs	r2, #4
		can_tx_header.StdId = (uint32_t)((uint16_t)(usart_rx[1] & 0x00FF) +
 80005e2:	600b      	str	r3, [r1, #0]
		can_tx_header.DLC = CAN_DATA_LENGTH;
 80005e4:	610a      	str	r2, [r1, #16]
		can_tx_header.RTR = CAN_RTR_DATA;
 80005e6:	2300      	movs	r3, #0
		can_tx_header.TransmitGlobalTime = DISABLE;
		can_tx[0] = usart_rx[2];
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_UART_RxCpltCallback+0x90>)
		can_tx_header.TransmitGlobalTime = DISABLE;
 80005ea:	750b      	strb	r3, [r1, #20]
		can_tx_header.IDE = CAN_ID_STD;
 80005ec:	e9c1 3302 	strd	r3, r3, [r1, #8]
		can_tx[0] = usart_rx[2];
 80005f0:	7883      	ldrb	r3, [r0, #2]
 80005f2:	7013      	strb	r3, [r2, #0]
		can_tx[1] = usart_rx[3];
 80005f4:	78c3      	ldrb	r3, [r0, #3]
 80005f6:	7053      	strb	r3, [r2, #1]
		can_tx[2] = usart_rx[4];
 80005f8:	7903      	ldrb	r3, [r0, #4]
 80005fa:	7093      	strb	r3, [r2, #2]
		can_tx[3] = usart_rx[5];
 80005fc:	7943      	ldrb	r3, [r0, #5]
 80005fe:	70d3      	strb	r3, [r2, #3]
	    if (HAL_CAN_AddTxMessage(&hcan, &can_tx_header, can_tx, &can_tx_mailbox) != HAL_OK)
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <HAL_UART_RxCpltCallback+0x94>)
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <HAL_UART_RxCpltCallback+0x98>)
 8000604:	f000 fa0e 	bl	8000a24 <HAL_CAN_AddTxMessage>
 8000608:	b170      	cbz	r0, 8000628 <HAL_UART_RxCpltCallback+0x7c>
		usart_rx[6] = 0;
		usart_rx[7] = 0;
		usart_rx[8] = 0;
		usart_rx[9] = 0;
	}
}
 800060a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    	Error_Handler();
 800060e:	f7ff bee7 	b.w	80003e0 <Error_Handler>
		usart_rx[0] = 0;
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
		usart_rx[1] = 0;
 8000616:	705a      	strb	r2, [r3, #1]
		usart_rx[2] = 0;
 8000618:	709a      	strb	r2, [r3, #2]
		usart_rx[3] = 0;
 800061a:	70da      	strb	r2, [r3, #3]
		usart_rx[4] = 0;
 800061c:	711a      	strb	r2, [r3, #4]
		usart_rx[5] = 0;
 800061e:	715a      	strb	r2, [r3, #5]
		usart_rx[6] = 0;
 8000620:	719a      	strb	r2, [r3, #6]
		usart_rx[7] = 0;
 8000622:	71da      	strb	r2, [r3, #7]
		usart_rx[8] = 0;
 8000624:	721a      	strb	r2, [r3, #8]
		usart_rx[9] = 0;
 8000626:	725a      	strb	r2, [r3, #9]
}
 8000628:	bd08      	pop	{r3, pc}
 800062a:	bf00      	nop
 800062c:	2000013c 	.word	0x2000013c
 8000630:	20000148 	.word	0x20000148
 8000634:	2000003a 	.word	0x2000003a
 8000638:	20000088 	.word	0x20000088
 800063c:	200000a0 	.word	0x200000a0
 8000640:	20000060 	.word	0x20000060
 8000644:	20000040 	.word	0x20000040

08000648 <HAL_UART_ErrorCallback>:
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
}
 8000648:	4770      	bx	lr
	...

0800064c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800064c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000684 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000650:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000652:	e003      	b.n	800065c <LoopCopyDataInit>

08000654 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000656:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000658:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800065a:	3104      	adds	r1, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <LoopForever+0xa>)
	ldr	r3, =_edata
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000660:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000662:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000664:	d3f6      	bcc.n	8000654 <CopyDataInit>
	ldr	r2, =_sbss
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000668:	e002      	b.n	8000670 <LoopFillZerobss>

0800066a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800066a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800066c:	f842 3b04 	str.w	r3, [r2], #4

08000670 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <LoopForever+0x16>)
	cmp	r2, r3
 8000672:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000674:	d3f9      	bcc.n	800066a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000676:	f000 f843 	bl	8000700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067a:	f001 fc49 	bl	8001f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800067e:	f7ff fe97 	bl	80003b0 <main>

08000682 <LoopForever>:

LoopForever:
    b LoopForever
 8000682:	e7fe      	b.n	8000682 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000684:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000688:	08001fc4 	.word	0x08001fc4
	ldr	r0, =_sdata
 800068c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000690:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000694:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000698:	200001cc 	.word	0x200001cc

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>
	...

080006a0 <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <BSP_LED_Init+0x48>)
{
 80006a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 80006a4:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80006a6:	4d11      	ldr	r5, [pc, #68]	; (80006ec <BSP_LED_Init+0x4c>)
  LEDx_GPIO_CLK_ENABLE(Led);
 80006a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80006ac:	615a      	str	r2, [r3, #20]
 80006ae:	695b      	ldr	r3, [r3, #20]
{
 80006b0:	b087      	sub	sp, #28
  LEDx_GPIO_CLK_ENABLE(Led);
 80006b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	9b00      	ldr	r3, [sp, #0]
{
 80006ba:	4604      	mov	r4, r0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2608      	movs	r6, #8
 80006be:	2301      	movs	r3, #1
 80006c0:	e9cd 6301 	strd	r6, r3, [sp, #4]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80006c4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	2700      	movs	r7, #0
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80006cc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	e9cd 7303 	strd	r7, r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80006d2:	f000 fcc3 	bl	800105c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80006d6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80006da:	463a      	mov	r2, r7
 80006dc:	4631      	mov	r1, r6
 80006de:	f000 fd77 	bl	80011d0 <HAL_GPIO_WritePin>
}
 80006e2:	b007      	add	sp, #28
 80006e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000
 80006ec:	20000000 	.word	0x20000000

080006f0 <BSP_LED_Toggle>:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80006f0:	4b02      	ldr	r3, [pc, #8]	; (80006fc <BSP_LED_Toggle+0xc>)
 80006f2:	2108      	movs	r1, #8
 80006f4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80006f8:	f000 bd6f 	b.w	80011da <HAL_GPIO_TogglePin>
 80006fc:	20000000 	.word	0x20000000

08000700 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000700:	4915      	ldr	r1, [pc, #84]	; (8000758 <SystemInit+0x58>)
 8000702:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000706:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800070a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <SystemInit+0x5c>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	f042 0201 	orr.w	r2, r2, #1
 8000716:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000718:	6858      	ldr	r0, [r3, #4]
 800071a:	4a11      	ldr	r2, [pc, #68]	; (8000760 <SystemInit+0x60>)
 800071c:	4002      	ands	r2, r0
 800071e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000726:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800072a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000732:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800073a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800073c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073e:	f022 020f 	bic.w	r2, r2, #15
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000744:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000746:	4a07      	ldr	r2, [pc, #28]	; (8000764 <SystemInit+0x64>)
 8000748:	4002      	ands	r2, r0
 800074a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000750:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000754:	608b      	str	r3, [r1, #8]
#endif
}
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00
 800075c:	40021000 	.word	0x40021000
 8000760:	f87fc00c 	.word	0xf87fc00c
 8000764:	ff00fccc 	.word	0xff00fccc

08000768 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_InitTick+0x3c>)
 800076c:	4e0e      	ldr	r6, [pc, #56]	; (80007a8 <HAL_InitTick+0x40>)
{
 800076e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000774:	7830      	ldrb	r0, [r6, #0]
 8000776:	fbb3 f3f0 	udiv	r3, r3, r0
 800077a:	6810      	ldr	r0, [r2, #0]
 800077c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000780:	f000 fb84 	bl	8000e8c <HAL_SYSTICK_Config>
 8000784:	4604      	mov	r4, r0
 8000786:	b950      	cbnz	r0, 800079e <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000788:	2d0f      	cmp	r5, #15
 800078a:	d808      	bhi.n	800079e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078c:	4602      	mov	r2, r0
 800078e:	4629      	mov	r1, r5
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f000 fb3a 	bl	8000e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	6075      	str	r5, [r6, #4]
 800079a:	4620      	mov	r0, r4
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800079c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800079e:	2001      	movs	r0, #1
 80007a0:	e7fc      	b.n	800079c <HAL_InitTick+0x34>
 80007a2:	bf00      	nop
 80007a4:	20000004 	.word	0x20000004
 80007a8:	20000008 	.word	0x20000008

080007ac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_Init+0x20>)
{
 80007ae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	6813      	ldr	r3, [r2, #0]
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 fb15 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	200f      	movs	r0, #15
 80007c0:	f7ff ffd2 	bl	8000768 <HAL_InitTick>
  HAL_MspInit();
 80007c4:	f7ff fe0e 	bl	80003e4 <HAL_MspInit>
}
 80007c8:	2000      	movs	r0, #0
 80007ca:	bd08      	pop	{r3, pc}
 80007cc:	40022000 	.word	0x40022000

080007d0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007d0:	4a03      	ldr	r2, [pc, #12]	; (80007e0 <HAL_IncTick+0x10>)
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <HAL_IncTick+0x14>)
 80007d4:	6811      	ldr	r1, [r2, #0]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	440b      	add	r3, r1
 80007da:	6013      	str	r3, [r2, #0]
}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	200001c8 	.word	0x200001c8
 80007e4:	20000008 	.word	0x20000008

080007e8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80007e8:	4b01      	ldr	r3, [pc, #4]	; (80007f0 <HAL_GetTick+0x8>)
 80007ea:	6818      	ldr	r0, [r3, #0]
}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200001c8 	.word	0x200001c8

080007f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007f6:	4604      	mov	r4, r0
 80007f8:	2800      	cmp	r0, #0
 80007fa:	d06e      	beq.n	80008da <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007fc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000800:	b90b      	cbnz	r3, 8000806 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000802:	f7ff fd23 	bl	800024c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000806:	6822      	ldr	r2, [r4, #0]
 8000808:	6813      	ldr	r3, [r2, #0]
 800080a:	f023 0302 	bic.w	r3, r3, #2
 800080e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000810:	f7ff ffea 	bl	80007e8 <HAL_GetTick>
 8000814:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000816:	6823      	ldr	r3, [r4, #0]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	0791      	lsls	r1, r2, #30
 800081c:	d451      	bmi.n	80008c2 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	f042 0201 	orr.w	r2, r2, #1
 8000824:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000826:	f7ff ffdf 	bl	80007e8 <HAL_GetTick>
 800082a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	07d2      	lsls	r2, r2, #31
 8000832:	d554      	bpl.n	80008de <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000834:	7e22      	ldrb	r2, [r4, #24]
 8000836:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	bf0c      	ite	eq
 800083c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000840:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000844:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000846:	7e62      	ldrb	r2, [r4, #25]
 8000848:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	bf0c      	ite	eq
 800084e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000852:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000856:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000858:	7ea2      	ldrb	r2, [r4, #26]
 800085a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	bf0c      	ite	eq
 8000860:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000864:	f022 0220 	bicne.w	r2, r2, #32
 8000868:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800086a:	7ee2      	ldrb	r2, [r4, #27]
 800086c:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	bf0c      	ite	eq
 8000872:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000876:	f042 0210 	orrne.w	r2, r2, #16
 800087a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800087c:	7f22      	ldrb	r2, [r4, #28]
 800087e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	bf0c      	ite	eq
 8000884:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000888:	f022 0208 	bicne.w	r2, r2, #8
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800088e:	7f62      	ldrb	r2, [r4, #29]
 8000890:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	bf0c      	ite	eq
 8000896:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800089a:	f022 0204 	bicne.w	r2, r2, #4
 800089e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80008a4:	430a      	orrs	r2, r1
 80008a6:	6921      	ldr	r1, [r4, #16]
 80008a8:	430a      	orrs	r2, r1
 80008aa:	6961      	ldr	r1, [r4, #20]
 80008ac:	430a      	orrs	r2, r1
 80008ae:	6861      	ldr	r1, [r4, #4]
 80008b0:	3901      	subs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008b6:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008b8:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008ba:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80008bc:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80008c0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008c2:	f7ff ff91 	bl	80007e8 <HAL_GetTick>
 80008c6:	1b40      	subs	r0, r0, r5
 80008c8:	280a      	cmp	r0, #10
 80008ca:	d9a4      	bls.n	8000816 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d2:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80008d4:	2305      	movs	r3, #5
 80008d6:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80008da:	2001      	movs	r0, #1
 80008dc:	e7f0      	b.n	80008c0 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008de:	f7ff ff83 	bl	80007e8 <HAL_GetTick>
 80008e2:	1b40      	subs	r0, r0, r5
 80008e4:	280a      	cmp	r0, #10
 80008e6:	d9a1      	bls.n	800082c <HAL_CAN_Init+0x38>
 80008e8:	e7f0      	b.n	80008cc <HAL_CAN_Init+0xd8>

080008ea <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80008ea:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80008ec:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80008f0:	3b01      	subs	r3, #1
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d862      	bhi.n	80009bc <HAL_CAN_ConfigFilter+0xd2>
  CAN_TypeDef *can_ip = hcan->Instance;
 80008f6:	6803      	ldr	r3, [r0, #0]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80008f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008fc:	f042 0201 	orr.w	r2, r2, #1
 8000900:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000904:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000906:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800090a:	2401      	movs	r4, #1
 800090c:	f002 001f 	and.w	r0, r2, #31
 8000910:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000914:	ea25 0500 	bic.w	r5, r5, r0
 8000918:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800091c:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800091e:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000920:	bb85      	cbnz	r5, 8000984 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000922:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000926:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000928:	4025      	ands	r5, r4
 800092a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800092e:	888d      	ldrh	r5, [r1, #4]
 8000930:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000934:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000938:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800093c:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800093e:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000940:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000944:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000948:	698a      	ldr	r2, [r1, #24]
 800094a:	bb6a      	cbnz	r2, 80009a8 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800094c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000950:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000952:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000956:	690a      	ldr	r2, [r1, #16]
 8000958:	bb52      	cbnz	r2, 80009b0 <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800095a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800095e:	4014      	ands	r4, r2
 8000960:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000964:	6a0a      	ldr	r2, [r1, #32]
 8000966:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000968:	bf02      	ittt	eq
 800096a:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 800096e:	4310      	orreq	r0, r2
 8000970:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000974:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000978:	f022 0201 	bic.w	r2, r2, #1
 800097c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000980:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000982:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000984:	2d01      	cmp	r5, #1
 8000986:	d1df      	bne.n	8000948 <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000988:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800098c:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800098e:	4305      	orrs	r5, r0
 8000990:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000994:	888d      	ldrh	r5, [r1, #4]
 8000996:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800099a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800099e:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009a2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80009a4:	898d      	ldrh	r5, [r1, #12]
 80009a6:	e7cb      	b.n	8000940 <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009ac:	4302      	orrs	r2, r0
 80009ae:	e7d0      	b.n	8000952 <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009b4:	4302      	orrs	r2, r0
 80009b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80009ba:	e7d3      	b.n	8000964 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c2:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80009c4:	2001      	movs	r0, #1
 80009c6:	e7dc      	b.n	8000982 <HAL_CAN_ConfigFilter+0x98>

080009c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 80009ce:	2b01      	cmp	r3, #1
{
 80009d0:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80009d2:	b2dd      	uxtb	r5, r3
 80009d4:	d120      	bne.n	8000a18 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009d6:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009d8:	2302      	movs	r3, #2
 80009da:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	f023 0301 	bic.w	r3, r3, #1
 80009e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80009e6:	f7ff feff 	bl	80007e8 <HAL_GetTick>
 80009ea:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f013 0301 	ands.w	r3, r3, #1
 80009f4:	d102      	bne.n	80009fc <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009f6:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80009f8:	461d      	mov	r5, r3
 80009fa:	e00b      	b.n	8000a14 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009fc:	f7ff fef4 	bl	80007e8 <HAL_GetTick>
 8000a00:	1b80      	subs	r0, r0, r6
 8000a02:	280a      	cmp	r0, #10
 8000a04:	d9f2      	bls.n	80009ec <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000a14:	4628      	mov	r0, r5
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a1e:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000a20:	2501      	movs	r5, #1
 8000a22:	e7f7      	b.n	8000a14 <HAL_CAN_Start+0x4c>

08000a24 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a26:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a2a:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a2c:	3d01      	subs	r5, #1
 8000a2e:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a30:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000a32:	d843      	bhi.n	8000abc <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a34:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000a38:	d03c      	beq.n	8000ab4 <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a3a:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a3e:	2c03      	cmp	r4, #3
 8000a40:	f04f 0501 	mov.w	r5, #1
 8000a44:	d105      	bne.n	8000a52 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000a46:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a4c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000a4e:	2001      	movs	r0, #1
 8000a50:	e02a      	b.n	8000aa8 <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a52:	40a5      	lsls	r5, r4
 8000a54:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000a56:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000a5a:	f104 0318 	add.w	r3, r4, #24
 8000a5e:	bb20      	cbnz	r0, 8000aaa <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a60:	6808      	ldr	r0, [r1, #0]
 8000a62:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a6a:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8000a6e:	690d      	ldr	r5, [r1, #16]
 8000a70:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a74:	7d09      	ldrb	r1, [r1, #20]
 8000a76:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a78:	bf08      	it	eq
 8000a7a:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000a7e:	ea4f 1004 	mov.w	r0, r4, lsl #4
 8000a82:	bf04      	itt	eq
 8000a84:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000a88:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000a8c:	4406      	add	r6, r0
 8000a8e:	6851      	ldr	r1, [r2, #4]
 8000a90:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000a9a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000a9e:	f042 0201 	orr.w	r2, r2, #1
 8000aa2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8000aa6:	2000      	movs	r0, #0
  }
}
 8000aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000aaa:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000aac:	4338      	orrs	r0, r7
 8000aae:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000ab2:	e7d8      	b.n	8000a66 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ab4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aba:	e7c7      	b.n	8000a4c <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000abc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000abe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac2:	e7c3      	b.n	8000a4c <HAL_CAN_AddTxMessage+0x28>

08000ac4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ac6:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000aca:	3c01      	subs	r4, #1
 8000acc:	2c01      	cmp	r4, #1
 8000ace:	d86c      	bhi.n	8000baa <HAL_CAN_GetRxMessage+0xe6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ad0:	6806      	ldr	r6, [r0, #0]
 8000ad2:	b941      	cbnz	r1, 8000ae6 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ad4:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ad6:	07a4      	lsls	r4, r4, #30
 8000ad8:	d107      	bne.n	8000aea <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ada:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ae0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	e056      	b.n	8000b94 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ae6:	6934      	ldr	r4, [r6, #16]
 8000ae8:	e7f5      	b.n	8000ad6 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000aea:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8000aee:	010c      	lsls	r4, r1, #4
 8000af0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000af4:	f007 0704 	and.w	r7, r7, #4
 8000af8:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000afa:	2f00      	cmp	r7, #0
 8000afc:	d14b      	bne.n	8000b96 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000afe:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000b02:	0d7f      	lsrs	r7, r7, #21
 8000b04:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000b06:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000b0a:	f007 0702 	and.w	r7, r7, #2
 8000b0e:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000b10:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000b14:	f007 070f 	and.w	r7, r7, #15
 8000b18:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000b1a:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000b1e:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000b22:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000b24:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000b28:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000b2a:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000b2c:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000b2e:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000b32:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000b34:	6802      	ldr	r2, [r0, #0]
 8000b36:	4422      	add	r2, r4
 8000b38:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000b3c:	0a12      	lsrs	r2, r2, #8
 8000b3e:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000b40:	6802      	ldr	r2, [r0, #0]
 8000b42:	4422      	add	r2, r4
 8000b44:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000b48:	0c12      	lsrs	r2, r2, #16
 8000b4a:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000b4c:	6802      	ldr	r2, [r0, #0]
 8000b4e:	4422      	add	r2, r4
 8000b50:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000b54:	0e12      	lsrs	r2, r2, #24
 8000b56:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000b58:	6802      	ldr	r2, [r0, #0]
 8000b5a:	4422      	add	r2, r4
 8000b5c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000b60:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000b62:	6802      	ldr	r2, [r0, #0]
 8000b64:	4422      	add	r2, r4
 8000b66:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000b6a:	0a12      	lsrs	r2, r2, #8
 8000b6c:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000b6e:	6802      	ldr	r2, [r0, #0]
 8000b70:	4422      	add	r2, r4
 8000b72:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000b76:	0c12      	lsrs	r2, r2, #16
 8000b78:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000b7a:	6802      	ldr	r2, [r0, #0]
 8000b7c:	4414      	add	r4, r2
 8000b7e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000b82:	0e12      	lsrs	r2, r2, #24
 8000b84:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b86:	6803      	ldr	r3, [r0, #0]
 8000b88:	b951      	cbnz	r1, 8000ba0 <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000b8a:	68da      	ldr	r2, [r3, #12]
 8000b8c:	f042 0220 	orr.w	r2, r2, #32
 8000b90:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000b92:	2000      	movs	r0, #0
  }
}
 8000b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000b96:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000b9a:	08ff      	lsrs	r7, r7, #3
 8000b9c:	6057      	str	r7, [r2, #4]
 8000b9e:	e7b2      	b.n	8000b06 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ba0:	691a      	ldr	r2, [r3, #16]
 8000ba2:	f042 0220 	orr.w	r2, r2, #32
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	e7f3      	b.n	8000b92 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000baa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb0:	e796      	b.n	8000ae0 <HAL_CAN_GetRxMessage+0x1c>

08000bb2 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bb2:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d805      	bhi.n	8000bc8 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000bbc:	6802      	ldr	r2, [r0, #0]
 8000bbe:	6953      	ldr	r3, [r2, #20]
 8000bc0:	4319      	orrs	r1, r3
 8000bc2:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bce:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000bd0:	2001      	movs	r0, #1
  }
}
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000bd4:	4770      	bx	lr

08000bd6 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000bd8:	4770      	bx	lr

08000bda <HAL_CAN_TxMailbox0AbortCallback>:
 8000bda:	4770      	bx	lr

08000bdc <HAL_CAN_TxMailbox1AbortCallback>:
 8000bdc:	4770      	bx	lr

08000bde <HAL_CAN_TxMailbox2AbortCallback>:
 8000bde:	4770      	bx	lr

08000be0 <HAL_CAN_RxFifo0FullCallback>:
 8000be0:	4770      	bx	lr

08000be2 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000be2:	4770      	bx	lr

08000be4 <HAL_CAN_RxFifo1FullCallback>:
 8000be4:	4770      	bx	lr

08000be6 <HAL_CAN_SleepCallback>:
 8000be6:	4770      	bx	lr

08000be8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000be8:	4770      	bx	lr

08000bea <HAL_CAN_ErrorCallback>:
 8000bea:	4770      	bx	lr

08000bec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000bf0:	6803      	ldr	r3, [r0, #0]
 8000bf2:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000bf4:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000bf8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000bfa:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000bfe:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000c02:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000c06:	f016 0401 	ands.w	r4, r6, #1
{
 8000c0a:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000c0c:	d022      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000c0e:	f017 0401 	ands.w	r4, r7, #1
 8000c12:	d007      	beq.n	8000c24 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c14:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c16:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c18:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c1a:	f140 80a5 	bpl.w	8000d68 <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000c1e:	f7ff ffd9 	bl	8000bd4 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000c22:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000c24:	05fb      	lsls	r3, r7, #23
 8000c26:	d509      	bpl.n	8000c3c <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c28:	682b      	ldr	r3, [r5, #0]
 8000c2a:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c2e:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c30:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c32:	f140 80a7 	bpl.w	8000d84 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000c36:	4628      	mov	r0, r5
 8000c38:	f7ff ffcd 	bl	8000bd6 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000c3c:	03fb      	lsls	r3, r7, #15
 8000c3e:	d509      	bpl.n	8000c54 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c40:	682b      	ldr	r3, [r5, #0]
 8000c42:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000c46:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c48:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000c4a:	f140 80a9 	bpl.w	8000da0 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000c4e:	4628      	mov	r0, r5
 8000c50:	f7ff ffc2 	bl	8000bd8 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000c54:	0733      	lsls	r3, r6, #28
 8000c56:	d507      	bpl.n	8000c68 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c58:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c5c:	bf1f      	itttt	ne
 8000c5e:	682b      	ldrne	r3, [r5, #0]
 8000c60:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c62:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c66:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000c68:	0777      	lsls	r7, r6, #29
 8000c6a:	d508      	bpl.n	8000c7e <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c6c:	f01b 0f08 	tst.w	fp, #8
 8000c70:	d005      	beq.n	8000c7e <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c72:	682b      	ldr	r3, [r5, #0]
 8000c74:	2208      	movs	r2, #8
 8000c76:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c78:	4628      	mov	r0, r5
 8000c7a:	f7ff ffb1 	bl	8000be0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c7e:	07b0      	lsls	r0, r6, #30
 8000c80:	d506      	bpl.n	8000c90 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c82:	682b      	ldr	r3, [r5, #0]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	0799      	lsls	r1, r3, #30
 8000c88:	d002      	beq.n	8000c90 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	f7ff fb1c 	bl	80002c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c90:	0672      	lsls	r2, r6, #25
 8000c92:	d507      	bpl.n	8000ca4 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c94:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c98:	bf1f      	itttt	ne
 8000c9a:	682b      	ldrne	r3, [r5, #0]
 8000c9c:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c9e:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000ca2:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000ca4:	06b3      	lsls	r3, r6, #26
 8000ca6:	d508      	bpl.n	8000cba <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000ca8:	f01a 0f08 	tst.w	sl, #8
 8000cac:	d005      	beq.n	8000cba <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000cae:	682b      	ldr	r3, [r5, #0]
 8000cb0:	2208      	movs	r2, #8
 8000cb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f7ff ff95 	bl	8000be4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000cba:	06f7      	lsls	r7, r6, #27
 8000cbc:	d506      	bpl.n	8000ccc <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000cbe:	682b      	ldr	r3, [r5, #0]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	0798      	lsls	r0, r3, #30
 8000cc4:	d002      	beq.n	8000ccc <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	f7ff ff8b 	bl	8000be2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000ccc:	03b1      	lsls	r1, r6, #14
 8000cce:	d508      	bpl.n	8000ce2 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000cd0:	f019 0f10 	tst.w	r9, #16
 8000cd4:	d005      	beq.n	8000ce2 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000cd6:	682b      	ldr	r3, [r5, #0]
 8000cd8:	2210      	movs	r2, #16
 8000cda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000cdc:	4628      	mov	r0, r5
 8000cde:	f7ff ff82 	bl	8000be6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000ce2:	03f2      	lsls	r2, r6, #15
 8000ce4:	d508      	bpl.n	8000cf8 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ce6:	f019 0f08 	tst.w	r9, #8
 8000cea:	d005      	beq.n	8000cf8 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	2208      	movs	r2, #8
 8000cf0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000cf2:	4628      	mov	r0, r5
 8000cf4:	f7ff ff78 	bl	8000be8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000cf8:	0433      	lsls	r3, r6, #16
 8000cfa:	d52c      	bpl.n	8000d56 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000cfc:	f019 0f04 	tst.w	r9, #4
 8000d00:	682a      	ldr	r2, [r5, #0]
 8000d02:	d026      	beq.n	8000d52 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d04:	05f7      	lsls	r7, r6, #23
 8000d06:	d504      	bpl.n	8000d12 <HAL_CAN_IRQHandler+0x126>
 8000d08:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d0c:	bf18      	it	ne
 8000d0e:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d12:	05b0      	lsls	r0, r6, #22
 8000d14:	d504      	bpl.n	8000d20 <HAL_CAN_IRQHandler+0x134>
 8000d16:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d1a:	bf18      	it	ne
 8000d1c:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d20:	0571      	lsls	r1, r6, #21
 8000d22:	d504      	bpl.n	8000d2e <HAL_CAN_IRQHandler+0x142>
 8000d24:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d28:	bf18      	it	ne
 8000d2a:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d2e:	0533      	lsls	r3, r6, #20
 8000d30:	d50f      	bpl.n	8000d52 <HAL_CAN_IRQHandler+0x166>
 8000d32:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000d36:	d00c      	beq.n	8000d52 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d38:	2b40      	cmp	r3, #64	; 0x40
 8000d3a:	d04f      	beq.n	8000ddc <HAL_CAN_IRQHandler+0x1f0>
 8000d3c:	d83e      	bhi.n	8000dbc <HAL_CAN_IRQHandler+0x1d0>
 8000d3e:	2b20      	cmp	r3, #32
 8000d40:	d046      	beq.n	8000dd0 <HAL_CAN_IRQHandler+0x1e4>
 8000d42:	2b30      	cmp	r3, #48	; 0x30
 8000d44:	d047      	beq.n	8000dd6 <HAL_CAN_IRQHandler+0x1ea>
 8000d46:	2b10      	cmp	r3, #16
 8000d48:	d03f      	beq.n	8000dca <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000d4a:	6993      	ldr	r3, [r2, #24]
 8000d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d50:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000d52:	2304      	movs	r3, #4
 8000d54:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000d56:	b12c      	cbz	r4, 8000d64 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000d58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	626c      	str	r4, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000d5e:	4628      	mov	r0, r5
 8000d60:	f7ff ff43 	bl	8000bea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000d64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d68:	077a      	lsls	r2, r7, #29
 8000d6a:	d405      	bmi.n	8000d78 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d6c:	f017 0408 	ands.w	r4, r7, #8
 8000d70:	d105      	bne.n	8000d7e <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000d72:	f7ff ff32 	bl	8000bda <HAL_CAN_TxMailbox0AbortCallback>
 8000d76:	e755      	b.n	8000c24 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d78:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000d7c:	e752      	b.n	8000c24 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000d7e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000d82:	e74f      	b.n	8000c24 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d84:	0579      	lsls	r1, r7, #21
 8000d86:	d502      	bpl.n	8000d8e <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d88:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000d8c:	e756      	b.n	8000c3c <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d8e:	053a      	lsls	r2, r7, #20
 8000d90:	d502      	bpl.n	8000d98 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d92:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000d96:	e751      	b.n	8000c3c <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d98:	4628      	mov	r0, r5
 8000d9a:	f7ff ff1f 	bl	8000bdc <HAL_CAN_TxMailbox1AbortCallback>
 8000d9e:	e74d      	b.n	8000c3c <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000da0:	0379      	lsls	r1, r7, #13
 8000da2:	d502      	bpl.n	8000daa <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000da4:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000da8:	e754      	b.n	8000c54 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000daa:	033a      	lsls	r2, r7, #12
 8000dac:	d502      	bpl.n	8000db4 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000dae:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000db2:	e74f      	b.n	8000c54 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000db4:	4628      	mov	r0, r5
 8000db6:	f7ff ff12 	bl	8000bde <HAL_CAN_TxMailbox2AbortCallback>
 8000dba:	e74b      	b.n	8000c54 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000dbc:	2b50      	cmp	r3, #80	; 0x50
 8000dbe:	d010      	beq.n	8000de2 <HAL_CAN_IRQHandler+0x1f6>
 8000dc0:	2b60      	cmp	r3, #96	; 0x60
 8000dc2:	d1c2      	bne.n	8000d4a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000dc4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000dc8:	e7bf      	b.n	8000d4a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8000dca:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000dce:	e7bc      	b.n	8000d4a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000dd0:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000dd4:	e7b9      	b.n	8000d4a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000dd6:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000dda:	e7b6      	b.n	8000d4a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8000ddc:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000de0:	e7b3      	b.n	8000d4a <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8000de2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000de6:	e7b0      	b.n	8000d4a <HAL_CAN_IRQHandler+0x15e>

08000de8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4907      	ldr	r1, [pc, #28]	; (8000e08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dea:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000e04:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0e:	b530      	push	{r4, r5, lr}
 8000e10:	68dc      	ldr	r4, [r3, #12]
 8000e12:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e16:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	2d04      	cmp	r5, #4
 8000e1e:	bf28      	it	cs
 8000e20:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e28:	bf8c      	ite	hi
 8000e2a:	3c03      	subhi	r4, #3
 8000e2c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2e:	fa03 f505 	lsl.w	r5, r3, r5
 8000e32:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e36:	40a3      	lsls	r3, r4
 8000e38:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	bfac      	ite	ge
 8000e46:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	4a08      	ldrlt	r2, [pc, #32]	; (8000e6c <HAL_NVIC_SetPriority+0x60>)
 8000e4c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000e50:	bfb8      	it	lt
 8000e52:	f000 000f 	andlt.w	r0, r0, #15
 8000e56:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e58:	bfaa      	itet	ge
 8000e5a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e64:	bd30      	pop	{r4, r5, pc}
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00
 8000e6c:	e000ed14 	.word	0xe000ed14

08000e70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e70:	2800      	cmp	r0, #0
 8000e72:	db08      	blt.n	8000e86 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e74:	0942      	lsrs	r2, r0, #5
 8000e76:	2301      	movs	r3, #1
 8000e78:	f000 001f 	and.w	r0, r0, #31
 8000e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e80:	4b01      	ldr	r3, [pc, #4]	; (8000e88 <HAL_NVIC_EnableIRQ+0x18>)
 8000e82:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e92:	d20a      	bcs.n	8000eaa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e98:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	21f0      	movs	r1, #240	; 0xf0
 8000e9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000eb8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000eba:	b320      	cbz	r0, 8000f06 <HAL_DMA_Init+0x4e>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ebc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8000ec0:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec2:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8000ec4:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec6:	4323      	orrs	r3, r4
 8000ec8:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000eca:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ecc:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ece:	6944      	ldr	r4, [r0, #20]
 8000ed0:	4323      	orrs	r3, r4
 8000ed2:	6984      	ldr	r4, [r0, #24]
 8000ed4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed6:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ed8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000edc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000ee2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000ee4:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_DMA_Init+0x54>)
 8000ee8:	2214      	movs	r2, #20
 8000eea:	440b      	add	r3, r1
 8000eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_DMA_Init+0x58>)
 8000ef6:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8000ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000f00:	8402      	strh	r2, [r0, #32]
  return HAL_OK;
 8000f02:	4618      	mov	r0, r3
}  
 8000f04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f06:	2001      	movs	r0, #1
 8000f08:	e7fc      	b.n	8000f04 <HAL_DMA_Init+0x4c>
 8000f0a:	bf00      	nop
 8000f0c:	bffdfff8 	.word	0xbffdfff8
 8000f10:	40020000 	.word	0x40020000

08000f14 <HAL_DMA_Start_IT>:
{
 8000f14:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000f16:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000f1a:	2c01      	cmp	r4, #1
 8000f1c:	d034      	beq.n	8000f88 <HAL_DMA_Start_IT+0x74>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f1e:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000f22:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f24:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000f26:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f2a:	f04f 0600 	mov.w	r6, #0
 8000f2e:	f04f 0402 	mov.w	r4, #2
 8000f32:	d127      	bne.n	8000f84 <HAL_DMA_Start_IT+0x70>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000f34:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f38:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3a:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f3c:	6826      	ldr	r6, [r4, #0]
 8000f3e:	f026 0601 	bic.w	r6, r6, #1
 8000f42:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f44:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8000f48:	40bd      	lsls	r5, r7
 8000f4a:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000f4c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f4e:	6843      	ldr	r3, [r0, #4]
 8000f50:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000f52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8000f54:	bf0b      	itete	eq
 8000f56:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8000f58:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000f5a:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8000f5c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000f5e:	b14b      	cbz	r3, 8000f74 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f66:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000f70:	2000      	movs	r0, #0
} 
 8000f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	f043 030a 	orr.w	r3, r3, #10
 8000f7a:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	f023 0304 	bic.w	r3, r3, #4
 8000f82:	e7f0      	b.n	8000f66 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8000f84:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	e7f2      	b.n	8000f72 <HAL_DMA_Start_IT+0x5e>

08000f8c <HAL_DMA_Abort_IT>:
{  
 8000f8c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f8e:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000f92:	2a02      	cmp	r2, #2
 8000f94:	d003      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f96:	2204      	movs	r2, #4
 8000f98:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000f9a:	2001      	movs	r0, #1
}
 8000f9c:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f9e:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8000fa0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fa2:	6811      	ldr	r1, [r2, #0]
 8000fa4:	f021 010e 	bic.w	r1, r1, #14
 8000fa8:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000faa:	6811      	ldr	r1, [r2, #0]
 8000fac:	f021 0101 	bic.w	r1, r1, #1
 8000fb0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fb2:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	40a2      	lsls	r2, r4
 8000fba:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc0:	8402      	strh	r2, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000fc2:	b113      	cbz	r3, 8000fca <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 8000fc4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	e7e8      	b.n	8000f9c <HAL_DMA_Abort_IT+0x10>
 8000fca:	4618      	mov	r0, r3
 8000fcc:	e7e6      	b.n	8000f9c <HAL_DMA_Abort_IT+0x10>

08000fce <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fce:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000fd0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000fd2:	6803      	ldr	r3, [r0, #0]
{
 8000fd4:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fd6:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000fd8:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000fda:	2404      	movs	r4, #4
 8000fdc:	4094      	lsls	r4, r2
 8000fde:	4234      	tst	r4, r6
 8000fe0:	d00e      	beq.n	8001000 <HAL_DMA_IRQHandler+0x32>
 8000fe2:	f015 0f04 	tst.w	r5, #4
 8000fe6:	d00b      	beq.n	8001000 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fec:	bf5e      	ittt	pl
 8000fee:	681a      	ldrpl	r2, [r3, #0]
 8000ff0:	f022 0204 	bicpl.w	r2, r2, #4
 8000ff4:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ff6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ff8:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 8000ffa:	b363      	cbz	r3, 8001056 <HAL_DMA_IRQHandler+0x88>
}  
 8000ffc:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8000ffe:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001000:	2402      	movs	r4, #2
 8001002:	4094      	lsls	r4, r2
 8001004:	4234      	tst	r4, r6
 8001006:	d012      	beq.n	800102e <HAL_DMA_IRQHandler+0x60>
 8001008:	f015 0f02 	tst.w	r5, #2
 800100c:	d00f      	beq.n	800102e <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	0695      	lsls	r5, r2, #26
 8001012:	d406      	bmi.n	8001022 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f022 020a 	bic.w	r2, r2, #10
 800101a:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800101c:	2301      	movs	r3, #1
 800101e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8001022:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001024:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8001026:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800102a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800102c:	e7e5      	b.n	8000ffa <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800102e:	2408      	movs	r4, #8
 8001030:	4094      	lsls	r4, r2
 8001032:	4234      	tst	r4, r6
 8001034:	d00f      	beq.n	8001056 <HAL_DMA_IRQHandler+0x88>
 8001036:	072c      	lsls	r4, r5, #28
 8001038:	d50d      	bpl.n	8001056 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800103a:	681c      	ldr	r4, [r3, #0]
 800103c:	f024 040e 	bic.w	r4, r4, #14
 8001040:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001042:	2301      	movs	r3, #1
 8001044:	fa03 f202 	lsl.w	r2, r3, r2
 8001048:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800104a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 800104c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001050:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001052:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001054:	e7d1      	b.n	8000ffa <HAL_DMA_IRQHandler+0x2c>
}  
 8001056:	bc70      	pop	{r4, r5, r6}
 8001058:	4770      	bx	lr
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001060:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80011cc <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001064:	4c57      	ldr	r4, [pc, #348]	; (80011c4 <HAL_GPIO_Init+0x168>)
  uint32_t position = 0x00u;
 8001066:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001068:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106c:	680a      	ldr	r2, [r1, #0]
 800106e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001072:	d102      	bne.n	800107a <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001074:	b003      	add	sp, #12
 8001076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800107a:	2501      	movs	r5, #1
 800107c:	fa05 fa03 	lsl.w	sl, r5, r3
    if (iocurrent != 0x00u)
 8001080:	ea1a 0202 	ands.w	r2, sl, r2
 8001084:	f000 8095 	beq.w	80011b2 <HAL_GPIO_Init+0x156>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001088:	684d      	ldr	r5, [r1, #4]
 800108a:	f025 0e10 	bic.w	lr, r5, #16
 800108e:	f1be 0f02 	cmp.w	lr, #2
 8001092:	d111      	bne.n	80010b8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3u];
 8001094:	08df      	lsrs	r7, r3, #3
 8001096:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800109a:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800109e:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80010a4:	fa09 fb0c 	lsl.w	fp, r9, ip
 80010a8:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ac:	690e      	ldr	r6, [r1, #16]
 80010ae:	fa06 f60c 	lsl.w	r6, r6, ip
 80010b2:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3u] = temp;
 80010b6:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 80010b8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010c0:	2603      	movs	r6, #3
 80010c2:	fa06 f70c 	lsl.w	r7, r6, ip
 80010c6:	ea2b 0b07 	bic.w	fp, fp, r7
 80010ca:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010cc:	f005 0703 	and.w	r7, r5, #3
 80010d0:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d4:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010d8:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010dc:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 80010e0:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e2:	d811      	bhi.n	8001108 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80010e4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010e6:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010ea:	68cf      	ldr	r7, [r1, #12]
 80010ec:	fa07 f70c 	lsl.w	r7, r7, ip
 80010f0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80010f4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80010f6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f8:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010fc:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001100:	409f      	lsls	r7, r3
 8001102:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8001106:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001108:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800110a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800110c:	688e      	ldr	r6, [r1, #8]
 800110e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001112:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8001114:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001116:	00ee      	lsls	r6, r5, #3
 8001118:	d54b      	bpl.n	80011b2 <HAL_GPIO_Init+0x156>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800111e:	f046 0601 	orr.w	r6, r6, #1
 8001122:	f8c8 6018 	str.w	r6, [r8, #24]
 8001126:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800112a:	f023 0703 	bic.w	r7, r3, #3
 800112e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001132:	f006 0601 	and.w	r6, r6, #1
 8001136:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800113a:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800113c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001140:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001142:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001144:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001148:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800114c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001150:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001154:	d02f      	beq.n	80011b6 <HAL_GPIO_Init+0x15a>
 8001156:	4e1c      	ldr	r6, [pc, #112]	; (80011c8 <HAL_GPIO_Init+0x16c>)
 8001158:	42b0      	cmp	r0, r6
 800115a:	d02e      	beq.n	80011ba <HAL_GPIO_Init+0x15e>
 800115c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001160:	42b0      	cmp	r0, r6
 8001162:	d02c      	beq.n	80011be <HAL_GPIO_Init+0x162>
 8001164:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001168:	42b0      	cmp	r0, r6
 800116a:	bf0c      	ite	eq
 800116c:	2603      	moveq	r6, #3
 800116e:	2605      	movne	r6, #5
 8001170:	fa06 f60c 	lsl.w	r6, r6, ip
 8001174:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001178:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800117a:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 800117c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001182:	bf0c      	ite	eq
 8001184:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001186:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8001188:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800118a:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001190:	bf0c      	ite	eq
 8001192:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001194:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8001196:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8001198:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800119e:	bf0c      	ite	eq
 80011a0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80011a2:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 80011a4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80011a6:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a8:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 80011aa:	bf54      	ite	pl
 80011ac:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80011ae:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 80011b0:	60e6      	str	r6, [r4, #12]
    position++;
 80011b2:	3301      	adds	r3, #1
 80011b4:	e75a      	b.n	800106c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b6:	2600      	movs	r6, #0
 80011b8:	e7da      	b.n	8001170 <HAL_GPIO_Init+0x114>
 80011ba:	2601      	movs	r6, #1
 80011bc:	e7d8      	b.n	8001170 <HAL_GPIO_Init+0x114>
 80011be:	2602      	movs	r6, #2
 80011c0:	e7d6      	b.n	8001170 <HAL_GPIO_Init+0x114>
 80011c2:	bf00      	nop
 80011c4:	40010400 	.word	0x40010400
 80011c8:	48000400 	.word	0x48000400
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	b10a      	cbz	r2, 80011d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d2:	6181      	str	r1, [r0, #24]
 80011d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80011d8:	4770      	bx	lr

080011da <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80011da:	6943      	ldr	r3, [r0, #20]
 80011dc:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011de:	bf18      	it	ne
 80011e0:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e2:	6181      	str	r1, [r0, #24]
  }
}
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ec:	4605      	mov	r5, r0
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d035      	beq.n	800125e <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	6803      	ldr	r3, [r0, #0]
 80011f4:	07da      	lsls	r2, r3, #31
 80011f6:	d411      	bmi.n	800121c <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	079b      	lsls	r3, r3, #30
 80011fc:	f100 8088 	bmi.w	8001310 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	071c      	lsls	r4, r3, #28
 8001204:	f100 80f8 	bmi.w	80013f8 <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	0758      	lsls	r0, r3, #29
 800120c:	f100 8141 	bmi.w	8001492 <HAL_RCC_OscConfig+0x2aa>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001210:	69e8      	ldr	r0, [r5, #28]
 8001212:	2800      	cmp	r0, #0
 8001214:	f040 81d7 	bne.w	80015c6 <HAL_RCC_OscConfig+0x3de>
        }
      }
    }
  }

  return HAL_OK;
 8001218:	2000      	movs	r0, #0
 800121a:	e04b      	b.n	80012b4 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800121c:	4cba      	ldr	r4, [pc, #744]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 800121e:	6863      	ldr	r3, [r4, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b04      	cmp	r3, #4
 8001226:	d007      	beq.n	8001238 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001228:	6863      	ldr	r3, [r4, #4]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b08      	cmp	r3, #8
 8001230:	d117      	bne.n	8001262 <HAL_RCC_OscConfig+0x7a>
 8001232:	6863      	ldr	r3, [r4, #4]
 8001234:	03df      	lsls	r7, r3, #15
 8001236:	d514      	bpl.n	8001262 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800123c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	6821      	ldr	r1, [r4, #0]
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	2201      	movs	r2, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	420b      	tst	r3, r1
 8001256:	d0cf      	beq.n	80011f8 <HAL_RCC_OscConfig+0x10>
 8001258:	686b      	ldr	r3, [r5, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1cc      	bne.n	80011f8 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800125e:	2001      	movs	r0, #1
 8001260:	e028      	b.n	80012b4 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001262:	686a      	ldr	r2, [r5, #4]
 8001264:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001268:	d127      	bne.n	80012ba <HAL_RCC_OscConfig+0xd2>
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001274:	68a9      	ldr	r1, [r5, #8]
 8001276:	f023 030f 	bic.w	r3, r3, #15
 800127a:	430b      	orrs	r3, r1
 800127c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127e:	b362      	cbz	r2, 80012da <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8001280:	f7ff fab2 	bl	80007e8 <HAL_GetTick>
 8001284:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8001288:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	f04f 0801 	mov.w	r8, #1
 800128e:	fa97 f3a7 	rbit	r3, r7
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	fa97 f3a7 	rbit	r3, r7
 8001298:	fab3 f383 	clz	r3, r3
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	fa08 f303 	lsl.w	r3, r8, r3
 80012a4:	4213      	tst	r3, r2
 80012a6:	d1a7      	bne.n	80011f8 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fa9e 	bl	80007e8 <HAL_GetTick>
 80012ac:	1b83      	subs	r3, r0, r6
 80012ae:	2b64      	cmp	r3, #100	; 0x64
 80012b0:	d9ed      	bls.n	800128e <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 80012b2:	2003      	movs	r0, #3
}
 80012b4:	b002      	add	sp, #8
 80012b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	b932      	cbnz	r2, 80012cc <HAL_RCC_OscConfig+0xe4>
 80012be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c2:	6023      	str	r3, [r4, #0]
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	e7d1      	b.n	8001270 <HAL_RCC_OscConfig+0x88>
 80012cc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80012d0:	d1f5      	bne.n	80012be <HAL_RCC_OscConfig+0xd6>
 80012d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d6:	6023      	str	r3, [r4, #0]
 80012d8:	e7c7      	b.n	800126a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80012da:	f7ff fa85 	bl	80007e8 <HAL_GetTick>
 80012de:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80012e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e4:	f04f 0801 	mov.w	r8, #1
 80012e8:	fa97 f3a7 	rbit	r3, r7
 80012ec:	6822      	ldr	r2, [r4, #0]
 80012ee:	fa97 f3a7 	rbit	r3, r7
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	fa08 f303 	lsl.w	r3, r8, r3
 80012fe:	4213      	tst	r3, r2
 8001300:	f43f af7a 	beq.w	80011f8 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fa70 	bl	80007e8 <HAL_GetTick>
 8001308:	1b83      	subs	r3, r0, r6
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d9ec      	bls.n	80012e8 <HAL_RCC_OscConfig+0x100>
 800130e:	e7d0      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001310:	4c7d      	ldr	r4, [pc, #500]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 8001312:	6863      	ldr	r3, [r4, #4]
 8001314:	f013 0f0c 	tst.w	r3, #12
 8001318:	d007      	beq.n	800132a <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800131a:	6863      	ldr	r3, [r4, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d121      	bne.n	8001368 <HAL_RCC_OscConfig+0x180>
 8001324:	6863      	ldr	r3, [r4, #4]
 8001326:	03de      	lsls	r6, r3, #15
 8001328:	d41e      	bmi.n	8001368 <HAL_RCC_OscConfig+0x180>
 800132a:	2302      	movs	r3, #2
 800132c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001330:	6821      	ldr	r1, [r4, #0]
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	f003 031f 	and.w	r3, r3, #31
 800133e:	2201      	movs	r2, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	420b      	tst	r3, r1
 8001346:	d002      	beq.n	800134e <HAL_RCC_OscConfig+0x166>
 8001348:	692b      	ldr	r3, [r5, #16]
 800134a:	4293      	cmp	r3, r2
 800134c:	d187      	bne.n	800125e <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134e:	6821      	ldr	r1, [r4, #0]
 8001350:	23f8      	movs	r3, #248	; 0xf8
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	fab3 f283 	clz	r2, r3
 800135a:	696b      	ldr	r3, [r5, #20]
 800135c:	4093      	lsls	r3, r2
 800135e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001362:	4313      	orrs	r3, r2
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	e74b      	b.n	8001200 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001368:	692a      	ldr	r2, [r5, #16]
 800136a:	2601      	movs	r6, #1
 800136c:	b30a      	cbz	r2, 80013b2 <HAL_RCC_OscConfig+0x1ca>
 800136e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800137a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	f04f 0802 	mov.w	r8, #2
 8001384:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001386:	f7ff fa2f 	bl	80007e8 <HAL_GetTick>
 800138a:	4607      	mov	r7, r0
 800138c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	6822      	ldr	r2, [r4, #0]
 8001392:	fa98 f3a8 	rbit	r3, r8
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	fa06 f303 	lsl.w	r3, r6, r3
 80013a2:	4213      	tst	r3, r2
 80013a4:	d1d3      	bne.n	800134e <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fa1f 	bl	80007e8 <HAL_GetTick>
 80013aa:	1bc3      	subs	r3, r0, r7
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d9ed      	bls.n	800138c <HAL_RCC_OscConfig+0x1a4>
 80013b0:	e77f      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
 80013b2:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	f04f 0802 	mov.w	r8, #2
 80013c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013ca:	f7ff fa0d 	bl	80007e8 <HAL_GetTick>
 80013ce:	4607      	mov	r7, r0
 80013d0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d4:	6822      	ldr	r2, [r4, #0]
 80013d6:	fa98 f3a8 	rbit	r3, r8
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	f003 031f 	and.w	r3, r3, #31
 80013e2:	fa06 f303 	lsl.w	r3, r6, r3
 80013e6:	4213      	tst	r3, r2
 80013e8:	f43f af0a 	beq.w	8001200 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff f9fc 	bl	80007e8 <HAL_GetTick>
 80013f0:	1bc3      	subs	r3, r0, r7
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d9ec      	bls.n	80013d0 <HAL_RCC_OscConfig+0x1e8>
 80013f6:	e75c      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f8:	69aa      	ldr	r2, [r5, #24]
 80013fa:	4e43      	ldr	r6, [pc, #268]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 80013fc:	4943      	ldr	r1, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x324>)
 80013fe:	2401      	movs	r4, #1
 8001400:	b31a      	cbz	r2, 800144a <HAL_RCC_OscConfig+0x262>
 8001402:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001406:	fab3 f383 	clz	r3, r3
 800140a:	440b      	add	r3, r1
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	2702      	movs	r7, #2
 8001410:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001412:	f7ff f9e9 	bl	80007e8 <HAL_GetTick>
 8001416:	4680      	mov	r8, r0
 8001418:	fa97 f3a7 	rbit	r3, r7
 800141c:	fa97 f3a7 	rbit	r3, r7
 8001420:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001424:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001426:	fa97 f3a7 	rbit	r3, r7
 800142a:	fab3 f383 	clz	r3, r3
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	fa04 f303 	lsl.w	r3, r4, r3
 8001436:	4213      	tst	r3, r2
 8001438:	f47f aee6 	bne.w	8001208 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff f9d4 	bl	80007e8 <HAL_GetTick>
 8001440:	eba0 0308 	sub.w	r3, r0, r8
 8001444:	2b02      	cmp	r3, #2
 8001446:	d9e7      	bls.n	8001418 <HAL_RCC_OscConfig+0x230>
 8001448:	e733      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
 800144a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	440b      	add	r3, r1
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	2702      	movs	r7, #2
 8001458:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800145a:	f7ff f9c5 	bl	80007e8 <HAL_GetTick>
 800145e:	4680      	mov	r8, r0
 8001460:	fa97 f3a7 	rbit	r3, r7
 8001464:	fa97 f3a7 	rbit	r3, r7
 8001468:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800146e:	fa97 f3a7 	rbit	r3, r7
 8001472:	fab3 f383 	clz	r3, r3
 8001476:	f003 031f 	and.w	r3, r3, #31
 800147a:	fa04 f303 	lsl.w	r3, r4, r3
 800147e:	4213      	tst	r3, r2
 8001480:	f43f aec2 	beq.w	8001208 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff f9b0 	bl	80007e8 <HAL_GetTick>
 8001488:	eba0 0308 	sub.w	r3, r0, r8
 800148c:	2b02      	cmp	r3, #2
 800148e:	d9e7      	bls.n	8001460 <HAL_RCC_OscConfig+0x278>
 8001490:	e70f      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4c1d      	ldr	r4, [pc, #116]	; (8001508 <HAL_RCC_OscConfig+0x320>)
 8001494:	69e3      	ldr	r3, [r4, #28]
 8001496:	00d9      	lsls	r1, r3, #3
 8001498:	d434      	bmi.n	8001504 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	69e3      	ldr	r3, [r4, #28]
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	61e3      	str	r3, [r4, #28]
 80014a2:	69e3      	ldr	r3, [r4, #28]
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80014ac:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4f18      	ldr	r7, [pc, #96]	; (8001510 <HAL_RCC_OscConfig+0x328>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	05da      	lsls	r2, r3, #23
 80014b4:	d52e      	bpl.n	8001514 <HAL_RCC_OscConfig+0x32c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b6:	68eb      	ldr	r3, [r5, #12]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d13c      	bne.n	8001536 <HAL_RCC_OscConfig+0x34e>
 80014bc:	6a23      	ldr	r3, [r4, #32]
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80014c4:	f7ff f990 	bl	80007e8 <HAL_GetTick>
 80014c8:	2702      	movs	r7, #2
 80014ca:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014cc:	46ba      	mov	sl, r7
 80014ce:	f04f 0901 	mov.w	r9, #1
 80014d2:	fa97 f3a7 	rbit	r3, r7
 80014d6:	fa97 f3a7 	rbit	r3, r7
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d06b      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3ce>
 80014de:	6a22      	ldr	r2, [r4, #32]
 80014e0:	fa9a f3aa 	rbit	r3, sl
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	fa09 f303 	lsl.w	r3, r9, r3
 80014f0:	4213      	tst	r3, r2
 80014f2:	d057      	beq.n	80015a4 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 80014f4:	2e00      	cmp	r6, #0
 80014f6:	f43f ae8b 	beq.w	8001210 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fa:	69e3      	ldr	r3, [r4, #28]
 80014fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001500:	61e3      	str	r3, [r4, #28]
 8001502:	e685      	b.n	8001210 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001504:	2600      	movs	r6, #0
 8001506:	e7d2      	b.n	80014ae <HAL_RCC_OscConfig+0x2c6>
 8001508:	40021000 	.word	0x40021000
 800150c:	10908120 	.word	0x10908120
 8001510:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800151c:	f7ff f964 	bl	80007e8 <HAL_GetTick>
 8001520:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	05db      	lsls	r3, r3, #23
 8001526:	d4c6      	bmi.n	80014b6 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001528:	f7ff f95e 	bl	80007e8 <HAL_GetTick>
 800152c:	eba0 0008 	sub.w	r0, r0, r8
 8001530:	2864      	cmp	r0, #100	; 0x64
 8001532:	d9f6      	bls.n	8001522 <HAL_RCC_OscConfig+0x33a>
 8001534:	e6bd      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001536:	bb3b      	cbnz	r3, 8001588 <HAL_RCC_OscConfig+0x3a0>
 8001538:	6a23      	ldr	r3, [r4, #32]
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6223      	str	r3, [r4, #32]
 8001540:	6a23      	ldr	r3, [r4, #32]
 8001542:	f023 0304 	bic.w	r3, r3, #4
 8001546:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001548:	f7ff f94e 	bl	80007e8 <HAL_GetTick>
 800154c:	2702      	movs	r7, #2
 800154e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	46ba      	mov	sl, r7
 8001552:	f04f 0901 	mov.w	r9, #1
 8001556:	fa97 f3a7 	rbit	r3, r7
 800155a:	fa97 f3a7 	rbit	r3, r7
 800155e:	b373      	cbz	r3, 80015be <HAL_RCC_OscConfig+0x3d6>
 8001560:	6a22      	ldr	r2, [r4, #32]
 8001562:	fa9a f3aa 	rbit	r3, sl
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	fa09 f303 	lsl.w	r3, r9, r3
 8001572:	4213      	tst	r3, r2
 8001574:	d0be      	beq.n	80014f4 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff f937 	bl	80007e8 <HAL_GetTick>
 800157a:	f241 3388 	movw	r3, #5000	; 0x1388
 800157e:	eba0 0008 	sub.w	r0, r0, r8
 8001582:	4298      	cmp	r0, r3
 8001584:	d9e7      	bls.n	8001556 <HAL_RCC_OscConfig+0x36e>
 8001586:	e694      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	2b05      	cmp	r3, #5
 800158a:	6a23      	ldr	r3, [r4, #32]
 800158c:	d103      	bne.n	8001596 <HAL_RCC_OscConfig+0x3ae>
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6223      	str	r3, [r4, #32]
 8001594:	e792      	b.n	80014bc <HAL_RCC_OscConfig+0x2d4>
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	6223      	str	r3, [r4, #32]
 800159c:	6a23      	ldr	r3, [r4, #32]
 800159e:	f023 0304 	bic.w	r3, r3, #4
 80015a2:	e78e      	b.n	80014c2 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff f920 	bl	80007e8 <HAL_GetTick>
 80015a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80015ac:	eba0 0008 	sub.w	r0, r0, r8
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d98e      	bls.n	80014d2 <HAL_RCC_OscConfig+0x2ea>
 80015b4:	e67d      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
 80015b6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015bc:	e790      	b.n	80014e0 <HAL_RCC_OscConfig+0x2f8>
 80015be:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015c4:	e7cd      	b.n	8001562 <HAL_RCC_OscConfig+0x37a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c6:	4b49      	ldr	r3, [pc, #292]	; (80016ec <HAL_RCC_OscConfig+0x504>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	f002 020c 	and.w	r2, r2, #12
 80015ce:	2a08      	cmp	r2, #8
 80015d0:	461c      	mov	r4, r3
 80015d2:	d07a      	beq.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d4:	2802      	cmp	r0, #2
 80015d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015da:	d151      	bne.n	8001680 <HAL_RCC_OscConfig+0x498>
 80015dc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015f2:	f7ff f8f9 	bl	80007e8 <HAL_GetTick>
 80015f6:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80015fa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fc:	2601      	movs	r6, #1
 80015fe:	fa98 f3a8 	rbit	r3, r8
 8001602:	6822      	ldr	r2, [r4, #0]
 8001604:	fa98 f3a8 	rbit	r3, r8
 8001608:	fab3 f383 	clz	r3, r3
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	fa06 f303 	lsl.w	r3, r6, r3
 8001614:	4213      	tst	r3, r2
 8001616:	d12d      	bne.n	8001674 <HAL_RCC_OscConfig+0x48c>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001618:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 800161c:	6862      	ldr	r2, [r4, #4]
 800161e:	430b      	orrs	r3, r1
 8001620:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001624:	4313      	orrs	r3, r2
 8001626:	6063      	str	r3, [r4, #4]
 8001628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800162c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001630:	fab3 f383 	clz	r3, r3
 8001634:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001638:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800163c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800163e:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8001640:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001642:	f7ff f8d1 	bl	80007e8 <HAL_GetTick>
 8001646:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800164a:	4605      	mov	r5, r0
 800164c:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001650:	6822      	ldr	r2, [r4, #0]
 8001652:	fa96 f3a6 	rbit	r3, r6
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	fa07 f303 	lsl.w	r3, r7, r3
 8001662:	4213      	tst	r3, r2
 8001664:	f47f add8 	bne.w	8001218 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff f8be 	bl	80007e8 <HAL_GetTick>
 800166c:	1b40      	subs	r0, r0, r5
 800166e:	2802      	cmp	r0, #2
 8001670:	d9ec      	bls.n	800164c <HAL_RCC_OscConfig+0x464>
 8001672:	e61e      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f8b8 	bl	80007e8 <HAL_GetTick>
 8001678:	1bc3      	subs	r3, r0, r7
 800167a:	2b02      	cmp	r3, #2
 800167c:	d9bf      	bls.n	80015fe <HAL_RCC_OscConfig+0x416>
 800167e:	e618      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
 8001680:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800168c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001696:	f7ff f8a7 	bl	80007e8 <HAL_GetTick>
 800169a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800169e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a0:	2701      	movs	r7, #1
 80016a2:	fa96 f3a6 	rbit	r3, r6
 80016a6:	6822      	ldr	r2, [r4, #0]
 80016a8:	fa96 f3a6 	rbit	r3, r6
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	fa07 f303 	lsl.w	r3, r7, r3
 80016b8:	4213      	tst	r3, r2
 80016ba:	f43f adad 	beq.w	8001218 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016be:	f7ff f893 	bl	80007e8 <HAL_GetTick>
 80016c2:	1b40      	subs	r0, r0, r5
 80016c4:	2802      	cmp	r0, #2
 80016c6:	d9ec      	bls.n	80016a2 <HAL_RCC_OscConfig+0x4ba>
 80016c8:	e5f3      	b.n	80012b2 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ca:	2801      	cmp	r0, #1
 80016cc:	f43f adf2 	beq.w	80012b4 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 80016d0:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80016d2:	6a2a      	ldr	r2, [r5, #32]
 80016d4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80016d8:	4291      	cmp	r1, r2
 80016da:	f47f adc0 	bne.w	800125e <HAL_RCC_OscConfig+0x76>
 80016de:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80016e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80016e4:	4293      	cmp	r3, r2
 80016e6:	f43f ad97 	beq.w	8001218 <HAL_RCC_OscConfig+0x30>
 80016ea:	e5b8      	b.n	800125e <HAL_RCC_OscConfig+0x76>
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f0:	b530      	push	{r4, r5, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80016f2:	4d13      	ldr	r5, [pc, #76]	; (8001740 <HAL_RCC_GetSysClockFreq+0x50>)
 80016f4:	686c      	ldr	r4, [r5, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016f6:	f004 030c 	and.w	r3, r4, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d11e      	bne.n	800173c <HAL_RCC_GetSysClockFreq+0x4c>
 80016fe:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001702:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001706:	f404 1370 	and.w	r3, r4, #3932160	; 0x3c0000
 800170a:	fab2 f282 	clz	r2, r2
 800170e:	fa23 f202 	lsr.w	r2, r3, r2
 8001712:	490c      	ldr	r1, [pc, #48]	; (8001744 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001714:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001716:	5c88      	ldrb	r0, [r1, r2]
 8001718:	220f      	movs	r2, #15
 800171a:	fa92 f2a2 	rbit	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800171e:	fab2 f282 	clz	r2, r2
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	40d3      	lsrs	r3, r2
 8001728:	440b      	add	r3, r1
 800172a:	7c1a      	ldrb	r2, [r3, #16]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800172c:	03e3      	lsls	r3, r4, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800172e:	bf4a      	itet	mi
 8001730:	4b05      	ldrmi	r3, [pc, #20]	; (8001748 <HAL_RCC_GetSysClockFreq+0x58>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001732:	4b06      	ldrpl	r3, [pc, #24]	; (800174c <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001734:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001738:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800173a:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800173e:	e7fc      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x4a>
 8001740:	40021000 	.word	0x40021000
 8001744:	08001f98 	.word	0x08001f98
 8001748:	007a1200 	.word	0x007a1200
 800174c:	003d0900 	.word	0x003d0900

08001750 <HAL_RCC_ClockConfig>:
{
 8001750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001754:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001756:	4604      	mov	r4, r0
 8001758:	b910      	cbnz	r0, 8001760 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800175a:	2001      	movs	r0, #1
}
 800175c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_RCC_ClockConfig+0x144>)
 8001762:	6813      	ldr	r3, [r2, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	428b      	cmp	r3, r1
 800176a:	d32e      	bcc.n	80017ca <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	6822      	ldr	r2, [r4, #0]
 800176e:	0791      	lsls	r1, r2, #30
 8001770:	d436      	bmi.n	80017e0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001772:	07d2      	lsls	r2, r2, #31
 8001774:	d43c      	bmi.n	80017f0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001776:	4a47      	ldr	r2, [pc, #284]	; (8001894 <HAL_RCC_ClockConfig+0x144>)
 8001778:	6813      	ldr	r3, [r2, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	42ab      	cmp	r3, r5
 8001780:	d874      	bhi.n	800186c <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001782:	6822      	ldr	r2, [r4, #0]
 8001784:	4d44      	ldr	r5, [pc, #272]	; (8001898 <HAL_RCC_ClockConfig+0x148>)
 8001786:	f012 0f04 	tst.w	r2, #4
 800178a:	d17b      	bne.n	8001884 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	0713      	lsls	r3, r2, #28
 800178e:	d506      	bpl.n	800179e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001790:	686b      	ldr	r3, [r5, #4]
 8001792:	6922      	ldr	r2, [r4, #16]
 8001794:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001798:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800179c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800179e:	f7ff ffa7 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 80017a2:	686b      	ldr	r3, [r5, #4]
 80017a4:	22f0      	movs	r2, #240	; 0xf0
 80017a6:	fa92 f2a2 	rbit	r2, r2
 80017aa:	fab2 f282 	clz	r2, r2
 80017ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b2:	40d3      	lsrs	r3, r2
 80017b4:	4a39      	ldr	r2, [pc, #228]	; (800189c <HAL_RCC_ClockConfig+0x14c>)
 80017b6:	5cd3      	ldrb	r3, [r2, r3]
 80017b8:	40d8      	lsrs	r0, r3
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_RCC_ClockConfig+0x150>)
 80017bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_ClockConfig+0x154>)
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	f7fe ffd1 	bl	8000768 <HAL_InitTick>
  return HAL_OK;
 80017c6:	2000      	movs	r0, #0
 80017c8:	e7c8      	b.n	800175c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	6813      	ldr	r3, [r2, #0]
 80017cc:	f023 0307 	bic.w	r3, r3, #7
 80017d0:	430b      	orrs	r3, r1
 80017d2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d4:	6813      	ldr	r3, [r2, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	428b      	cmp	r3, r1
 80017dc:	d1bd      	bne.n	800175a <HAL_RCC_ClockConfig+0xa>
 80017de:	e7c5      	b.n	800176c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	492d      	ldr	r1, [pc, #180]	; (8001898 <HAL_RCC_ClockConfig+0x148>)
 80017e2:	68a0      	ldr	r0, [r4, #8]
 80017e4:	684b      	ldr	r3, [r1, #4]
 80017e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017ea:	4303      	orrs	r3, r0
 80017ec:	604b      	str	r3, [r1, #4]
 80017ee:	e7c0      	b.n	8001772 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f0:	6862      	ldr	r2, [r4, #4]
 80017f2:	4e29      	ldr	r6, [pc, #164]	; (8001898 <HAL_RCC_ClockConfig+0x148>)
 80017f4:	2a01      	cmp	r2, #1
 80017f6:	d126      	bne.n	8001846 <HAL_RCC_ClockConfig+0xf6>
 80017f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001800:	6831      	ldr	r1, [r6, #0]
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	fab3 f383 	clz	r3, r3
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	d0a1      	beq.n	800175a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001816:	6873      	ldr	r3, [r6, #4]
 8001818:	f023 0303 	bic.w	r3, r3, #3
 800181c:	431a      	orrs	r2, r3
 800181e:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001820:	f7fe ffe2 	bl	80007e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001828:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	6873      	ldr	r3, [r6, #4]
 800182c:	6862      	ldr	r2, [r4, #4]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001836:	d09e      	beq.n	8001776 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7fe ffd6 	bl	80007e8 <HAL_GetTick>
 800183c:	1bc0      	subs	r0, r0, r7
 800183e:	4540      	cmp	r0, r8
 8001840:	d9f3      	bls.n	800182a <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001842:	2003      	movs	r0, #3
 8001844:	e78a      	b.n	800175c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001846:	2a02      	cmp	r2, #2
 8001848:	bf0c      	ite	eq
 800184a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800184e:	2302      	movne	r3, #2
 8001850:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	6830      	ldr	r0, [r6, #0]
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2101      	movs	r1, #1
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	4203      	tst	r3, r0
 800186a:	e7d3      	b.n	8001814 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186c:	6813      	ldr	r3, [r2, #0]
 800186e:	f023 0307 	bic.w	r3, r3, #7
 8001872:	432b      	orrs	r3, r5
 8001874:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	6813      	ldr	r3, [r2, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	42ab      	cmp	r3, r5
 800187e:	f47f af6c 	bne.w	800175a <HAL_RCC_ClockConfig+0xa>
 8001882:	e77e      	b.n	8001782 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	686b      	ldr	r3, [r5, #4]
 8001886:	68e1      	ldr	r1, [r4, #12]
 8001888:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800188c:	430b      	orrs	r3, r1
 800188e:	606b      	str	r3, [r5, #4]
 8001890:	e77c      	b.n	800178c <HAL_RCC_ClockConfig+0x3c>
 8001892:	bf00      	nop
 8001894:	40022000 	.word	0x40022000
 8001898:	40021000 	.word	0x40021000
 800189c:	08001f80 	.word	0x08001f80
 80018a0:	20000004 	.word	0x20000004
 80018a4:	2000000c 	.word	0x2000000c

080018a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	fa92 f2a2 	rbit	r2, r2
 80018b4:	fab2 f282 	clz	r2, r2
 80018b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018bc:	40d3      	lsrs	r3, r2
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80018c4:	6810      	ldr	r0, [r2, #0]
}    
 80018c6:	40d8      	lsrs	r0, r3
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	08001f90 	.word	0x08001f90
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018da:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	fa92 f2a2 	rbit	r2, r2
 80018e4:	fab2 f282 	clz	r2, r2
 80018e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80018ec:	40d3      	lsrs	r3, r2
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80018f4:	6810      	ldr	r0, [r2, #0]
} 
 80018f6:	40d8      	lsrs	r0, r3
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	08001f90 	.word	0x08001f90
 8001904:	20000004 	.word	0x20000004

08001908 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001908:	6803      	ldr	r3, [r0, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001910:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800191a:	2320      	movs	r3, #32
 800191c:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800191e:	2300      	movs	r3, #0
 8001920:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001922:	4770      	bx	lr

08001924 <HAL_UART_Receive_DMA>:
{
 8001924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001926:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8001928:	2f20      	cmp	r7, #32
{
 800192a:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800192c:	d139      	bne.n	80019a2 <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 800192e:	b329      	cbz	r1, 800197c <HAL_UART_Receive_DMA+0x58>
 8001930:	b322      	cbz	r2, 800197c <HAL_UART_Receive_DMA+0x58>
    __HAL_LOCK(huart);
 8001932:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001936:	2b01      	cmp	r3, #1
 8001938:	d033      	beq.n	80019a2 <HAL_UART_Receive_DMA+0x7e>
 800193a:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800193c:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800193e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001940:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 8001942:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    huart->pRxBuffPtr = pData;
 8001946:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8001948:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800194c:	6783      	str	r3, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 800194e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001950:	b1b0      	cbz	r0, 8001980 <HAL_UART_Receive_DMA+0x5c>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_UART_Receive_DMA+0x84>)
 8001954:	f8d4 c000 	ldr.w	ip, [r4]
 8001958:	6283      	str	r3, [r0, #40]	; 0x28
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_UART_Receive_DMA+0x88>)
 800195c:	62c3      	str	r3, [r0, #44]	; 0x2c
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_UART_Receive_DMA+0x8c>)
      huart->hdmarx->XferAbortCallback = NULL;
 8001960:	e9c0 360c 	strd	r3, r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001964:	4613      	mov	r3, r2
 8001966:	460a      	mov	r2, r1
 8001968:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 800196c:	f7ff fad2 	bl	8000f14 <HAL_DMA_Start_IT>
 8001970:	b130      	cbz	r0, 8001980 <HAL_UART_Receive_DMA+0x5c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001972:	2310      	movs	r3, #16
 8001974:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001976:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 800197a:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 800197c:	2001      	movs	r0, #1
 800197e:	e00f      	b.n	80019a0 <HAL_UART_Receive_DMA+0x7c>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001980:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8001982:	2000      	movs	r0, #0
 8001984:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800199e:	609a      	str	r2, [r3, #8]
}
 80019a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80019a2:	2002      	movs	r0, #2
 80019a4:	e7fc      	b.n	80019a0 <HAL_UART_Receive_DMA+0x7c>
 80019a6:	bf00      	nop
 80019a8:	080019b5 	.word	0x080019b5
 80019ac:	080019ed 	.word	0x080019ed
 80019b0:	080019f7 	.word	0x080019f7

080019b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80019b4:	b508      	push	{r3, lr}
 80019b6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80019b8:	6a40      	ldr	r0, [r0, #36]	; 0x24

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2b20      	cmp	r3, #32
 80019be:	d011      	beq.n	80019e4 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80019c6:	6803      	ldr	r3, [r0, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019ce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019de:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80019e0:	2320      	movs	r3, #32
 80019e2:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80019e4:	f7fe fde2 	bl	80005ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80019e8:	bd08      	pop	{r3, pc}

080019ea <HAL_UART_RxHalfCpltCallback>:
 80019ea:	4770      	bx	lr

080019ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80019ec:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80019ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80019f0:	f7ff fffb 	bl	80019ea <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80019f4:	bd08      	pop	{r3, pc}

080019f6 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80019f6:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80019f8:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80019fa:	6f42      	ldr	r2, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80019fc:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 80019fe:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001a00:	689c      	ldr	r4, [r3, #8]
 8001a02:	0624      	lsls	r4, r4, #24
 8001a04:	d50a      	bpl.n	8001a1c <UART_DMAError+0x26>
 8001a06:	2a21      	cmp	r2, #33	; 0x21
 8001a08:	d108      	bne.n	8001a1c <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001a16:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001a18:	2220      	movs	r2, #32
 8001a1a:	6742      	str	r2, [r0, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	065b      	lsls	r3, r3, #25
 8001a20:	d506      	bpl.n	8001a30 <UART_DMAError+0x3a>
 8001a22:	2922      	cmp	r1, #34	; 0x22
 8001a24:	d104      	bne.n	8001a30 <UART_DMAError+0x3a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8001a2c:	f7ff ff6c 	bl	8001908 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001a30:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	67c3      	str	r3, [r0, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001a38:	f7fe fe06 	bl	8000648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001a3c:	bd10      	pop	{r4, pc}
	...

08001a40 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001a40:	6803      	ldr	r3, [r0, #0]
 8001a42:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a44:	6819      	ldr	r1, [r3, #0]
{
 8001a46:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8001a48:	f640 060f 	movw	r6, #2063	; 0x80f
 8001a4c:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a4e:	689d      	ldr	r5, [r3, #8]
{
 8001a50:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8001a52:	d109      	bne.n	8001a68 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001a54:	0696      	lsls	r6, r2, #26
 8001a56:	d570      	bpl.n	8001b3a <HAL_UART_IRQHandler+0xfa>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001a58:	068e      	lsls	r6, r1, #26
 8001a5a:	d56e      	bpl.n	8001b3a <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 8001a5c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d066      	beq.n	8001b30 <HAL_UART_IRQHandler+0xf0>
}
 8001a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8001a66:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001a68:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001a6c:	f401 7690 	and.w	r6, r1, #288	; 0x120
 8001a70:	4306      	orrs	r6, r0
 8001a72:	d062      	beq.n	8001b3a <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001a74:	07d5      	lsls	r5, r2, #31
 8001a76:	d507      	bpl.n	8001a88 <HAL_UART_IRQHandler+0x48>
 8001a78:	05ce      	lsls	r6, r1, #23
 8001a7a:	d505      	bpl.n	8001a88 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001a7c:	2501      	movs	r5, #1
 8001a7e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a80:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001a82:	f045 0501 	orr.w	r5, r5, #1
 8001a86:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001a88:	0795      	lsls	r5, r2, #30
 8001a8a:	d506      	bpl.n	8001a9a <HAL_UART_IRQHandler+0x5a>
 8001a8c:	b128      	cbz	r0, 8001a9a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001a8e:	2502      	movs	r5, #2
 8001a90:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a92:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001a94:	f045 0504 	orr.w	r5, r5, #4
 8001a98:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001a9a:	0756      	lsls	r6, r2, #29
 8001a9c:	d506      	bpl.n	8001aac <HAL_UART_IRQHandler+0x6c>
 8001a9e:	b128      	cbz	r0, 8001aac <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001aa0:	2504      	movs	r5, #4
 8001aa2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001aa4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001aa6:	f045 0502 	orr.w	r5, r5, #2
 8001aaa:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001aac:	0715      	lsls	r5, r2, #28
 8001aae:	d509      	bpl.n	8001ac4 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001ab0:	f001 0520 	and.w	r5, r1, #32
 8001ab4:	4328      	orrs	r0, r5
 8001ab6:	d005      	beq.n	8001ac4 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ab8:	2008      	movs	r0, #8
 8001aba:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001abc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001abe:	f040 0008 	orr.w	r0, r0, #8
 8001ac2:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001ac4:	0516      	lsls	r6, r2, #20
 8001ac6:	d508      	bpl.n	8001ada <HAL_UART_IRQHandler+0x9a>
 8001ac8:	014d      	lsls	r5, r1, #5
 8001aca:	d506      	bpl.n	8001ada <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001acc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ad0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001ad2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001ad4:	f043 0320 	orr.w	r3, r3, #32
 8001ad8:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ada:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001adc:	b343      	cbz	r3, 8001b30 <HAL_UART_IRQHandler+0xf0>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ade:	0690      	lsls	r0, r2, #26
 8001ae0:	d505      	bpl.n	8001aee <HAL_UART_IRQHandler+0xae>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ae2:	0689      	lsls	r1, r1, #26
 8001ae4:	d503      	bpl.n	8001aee <HAL_UART_IRQHandler+0xae>
        if (huart->RxISR != NULL)
 8001ae6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ae8:	b10b      	cbz	r3, 8001aee <HAL_UART_IRQHandler+0xae>
          huart->RxISR(huart);
 8001aea:	4620      	mov	r0, r4
 8001aec:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001aee:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001af0:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001af2:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001af4:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afc:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8001afe:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001b00:	d017      	beq.n	8001b32 <HAL_UART_IRQHandler+0xf2>
        UART_EndRxTransfer(huart);
 8001b02:	f7ff ff01 	bl	8001908 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	0652      	lsls	r2, r2, #25
 8001b0c:	d50d      	bpl.n	8001b2a <HAL_UART_IRQHandler+0xea>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b0e:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001b10:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b16:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001b18:	b138      	cbz	r0, 8001b2a <HAL_UART_IRQHandler+0xea>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_UART_IRQHandler+0x144>)
 8001b1c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b1e:	f7ff fa35 	bl	8000f8c <HAL_DMA_Abort_IT>
 8001b22:	b128      	cbz	r0, 8001b30 <HAL_UART_IRQHandler+0xf0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b24:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001b26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b28:	e79b      	b.n	8001a62 <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7fe fd8c 	bl	8000648 <HAL_UART_ErrorCallback>
}
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001b32:	f7fe fd89 	bl	8000648 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b36:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001b38:	e7fa      	b.n	8001b30 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001b3a:	02d6      	lsls	r6, r2, #11
 8001b3c:	d509      	bpl.n	8001b52 <HAL_UART_IRQHandler+0x112>
 8001b3e:	0268      	lsls	r0, r5, #9
 8001b40:	d507      	bpl.n	8001b52 <HAL_UART_IRQHandler+0x112>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001b42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8001b46:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001b48:	621a      	str	r2, [r3, #32]
}
 8001b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8001b4e:	f000 b9dd 	b.w	8001f0c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001b52:	0616      	lsls	r6, r2, #24
 8001b54:	d506      	bpl.n	8001b64 <HAL_UART_IRQHandler+0x124>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001b56:	060d      	lsls	r5, r1, #24
 8001b58:	d504      	bpl.n	8001b64 <HAL_UART_IRQHandler+0x124>
    if (huart->TxISR != NULL)
 8001b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0e7      	beq.n	8001b30 <HAL_UART_IRQHandler+0xf0>
      huart->TxISR(huart);
 8001b60:	4620      	mov	r0, r4
 8001b62:	e77e      	b.n	8001a62 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001b64:	0650      	lsls	r0, r2, #25
 8001b66:	d5e3      	bpl.n	8001b30 <HAL_UART_IRQHandler+0xf0>
 8001b68:	064a      	lsls	r2, r1, #25
 8001b6a:	d5e1      	bpl.n	8001b30 <HAL_UART_IRQHandler+0xf0>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b72:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001b74:	2320      	movs	r3, #32
 8001b76:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7fe fd0d 	bl	800059c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001b82:	e7d5      	b.n	8001b30 <HAL_UART_IRQHandler+0xf0>
 8001b84:	08001b89 	.word	0x08001b89

08001b88 <UART_DMAAbortOnError>:
{
 8001b88:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001b8a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001b92:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001b96:	f7fe fd57 	bl	8000648 <HAL_UART_ErrorCallback>
}
 8001b9a:	bd08      	pop	{r3, pc}

08001b9c <UART_SetConfig>:
{
 8001b9c:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b9e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ba0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ba2:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ba4:	681d      	ldr	r5, [r3, #0]
{
 8001ba6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ba8:	6900      	ldr	r0, [r0, #16]
 8001baa:	4302      	orrs	r2, r0
 8001bac:	6960      	ldr	r0, [r4, #20]
 8001bae:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bb0:	4855      	ldr	r0, [pc, #340]	; (8001d08 <UART_SetConfig+0x16c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bb2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001bb4:	4028      	ands	r0, r5
 8001bb6:	4302      	orrs	r2, r0
 8001bb8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8001bbe:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bc0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001bc8:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001bca:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001bcc:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8001bd0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001bd2:	4302      	orrs	r2, r0
 8001bd4:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bd6:	4a4d      	ldr	r2, [pc, #308]	; (8001d0c <UART_SetConfig+0x170>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d114      	bne.n	8001c06 <UART_SetConfig+0x6a>
 8001bdc:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <UART_SetConfig+0x174>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d814      	bhi.n	8001c14 <UART_SetConfig+0x78>
 8001bea:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <UART_SetConfig+0x178>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	d158      	bne.n	8001ca6 <UART_SetConfig+0x10a>
    switch (clocksource)
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d84b      	bhi.n	8001c90 <UART_SetConfig+0xf4>
 8001bf8:	e8df f003 	tbb	[pc, r3]
 8001bfc:	4a393621 	.word	0x4a393621
 8001c00:	4a4a4a42 	.word	0x4a4a4a42
 8001c04:	45          	.byte	0x45
 8001c05:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c06:	4a44      	ldr	r2, [pc, #272]	; (8001d18 <UART_SetConfig+0x17c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d003      	beq.n	8001c14 <UART_SetConfig+0x78>
 8001c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d173      	bne.n	8001cfc <UART_SetConfig+0x160>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c14:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c18:	d011      	beq.n	8001c3e <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c1a:	f7ff fe45 	bl	80018a8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c1e:	6863      	ldr	r3, [r4, #4]
 8001c20:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c28:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c2a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c2c:	f1a3 0110 	sub.w	r1, r3, #16
 8001c30:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001c34:	4291      	cmp	r1, r2
 8001c36:	d812      	bhi.n	8001c5e <UART_SetConfig+0xc2>
      huart->Instance->BRR = usartdiv;
 8001c38:	6822      	ldr	r2, [r4, #0]
 8001c3a:	60d3      	str	r3, [r2, #12]
 8001c3c:	e010      	b.n	8001c60 <UART_SetConfig+0xc4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c3e:	f7ff fe33 	bl	80018a8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001c42:	6863      	ldr	r3, [r4, #4]
 8001c44:	085a      	lsrs	r2, r3, #1
 8001c46:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8001c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c50:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c52:	f1a3 0110 	sub.w	r1, r3, #16
 8001c56:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001c5a:	4291      	cmp	r1, r2
 8001c5c:	d91b      	bls.n	8001c96 <UART_SetConfig+0xfa>
      ret = HAL_ERROR;
 8001c5e:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8001c60:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001c62:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8001c66:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8001c68:	f7ff fe36 	bl	80018d8 <HAL_RCC_GetPCLK2Freq>
 8001c6c:	e7e9      	b.n	8001c42 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c6e:	6862      	ldr	r2, [r4, #4]
 8001c70:	0853      	lsrs	r3, r2, #1
 8001c72:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001c76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c7e:	e7e6      	b.n	8001c4e <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetSysClockFreq();
 8001c80:	f7ff fd36 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 8001c84:	e7dd      	b.n	8001c42 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c86:	6862      	ldr	r2, [r4, #4]
 8001c88:	0853      	lsrs	r3, r2, #1
 8001c8a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c8e:	e7f4      	b.n	8001c7a <UART_SetConfig+0xde>
        ret = HAL_ERROR;
 8001c90:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e7dd      	b.n	8001c52 <UART_SetConfig+0xb6>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001c96:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8001c9a:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c9c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60cb      	str	r3, [r1, #12]
 8001ca4:	e7dc      	b.n	8001c60 <UART_SetConfig+0xc4>
    switch (clocksource)
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d82b      	bhi.n	8001d02 <UART_SetConfig+0x166>
 8001caa:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <UART_SetConfig+0x114>)
 8001cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb0:	08001c1b 	.word	0x08001c1b
 8001cb4:	08001cd5 	.word	0x08001cd5
 8001cb8:	08001cdb 	.word	0x08001cdb
 8001cbc:	08001d03 	.word	0x08001d03
 8001cc0:	08001ced 	.word	0x08001ced
 8001cc4:	08001d03 	.word	0x08001d03
 8001cc8:	08001d03 	.word	0x08001d03
 8001ccc:	08001d03 	.word	0x08001d03
 8001cd0:	08001cf3 	.word	0x08001cf3
        pclk = HAL_RCC_GetPCLK2Freq();
 8001cd4:	f7ff fe00 	bl	80018d8 <HAL_RCC_GetPCLK2Freq>
 8001cd8:	e7a1      	b.n	8001c1e <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001cda:	6862      	ldr	r2, [r4, #4]
 8001cdc:	0853      	lsrs	r3, r2, #1
 8001cde:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001ce2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cea:	e79d      	b.n	8001c28 <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001cec:	f7ff fd00 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 8001cf0:	e795      	b.n	8001c1e <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001cf2:	6862      	ldr	r2, [r4, #4]
 8001cf4:	0853      	lsrs	r3, r2, #1
 8001cf6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cfa:	e7f4      	b.n	8001ce6 <UART_SetConfig+0x14a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cfc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001d00:	d0c6      	beq.n	8001c90 <UART_SetConfig+0xf4>
 8001d02:	2001      	movs	r0, #1
 8001d04:	2300      	movs	r3, #0
 8001d06:	e791      	b.n	8001c2c <UART_SetConfig+0x90>
 8001d08:	efff69f3 	.word	0xefff69f3
 8001d0c:	40013800 	.word	0x40013800
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08001fb8 	.word	0x08001fb8
 8001d18:	40004400 	.word	0x40004400

08001d1c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d1e:	07da      	lsls	r2, r3, #31
{
 8001d20:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d22:	d506      	bpl.n	8001d32 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d24:	6801      	ldr	r1, [r0, #0]
 8001d26:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001d28:	684a      	ldr	r2, [r1, #4]
 8001d2a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001d2e:	4322      	orrs	r2, r4
 8001d30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d32:	079c      	lsls	r4, r3, #30
 8001d34:	d506      	bpl.n	8001d44 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d36:	6801      	ldr	r1, [r0, #0]
 8001d38:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001d3a:	684a      	ldr	r2, [r1, #4]
 8001d3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d40:	4322      	orrs	r2, r4
 8001d42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d44:	0759      	lsls	r1, r3, #29
 8001d46:	d506      	bpl.n	8001d56 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d48:	6801      	ldr	r1, [r0, #0]
 8001d4a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001d4c:	684a      	ldr	r2, [r1, #4]
 8001d4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d52:	4322      	orrs	r2, r4
 8001d54:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d56:	071a      	lsls	r2, r3, #28
 8001d58:	d506      	bpl.n	8001d68 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d5a:	6801      	ldr	r1, [r0, #0]
 8001d5c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001d5e:	684a      	ldr	r2, [r1, #4]
 8001d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d64:	4322      	orrs	r2, r4
 8001d66:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d68:	06dc      	lsls	r4, r3, #27
 8001d6a:	d506      	bpl.n	8001d7a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d6c:	6801      	ldr	r1, [r0, #0]
 8001d6e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001d70:	688a      	ldr	r2, [r1, #8]
 8001d72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d76:	4322      	orrs	r2, r4
 8001d78:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d7a:	0699      	lsls	r1, r3, #26
 8001d7c:	d506      	bpl.n	8001d8c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d7e:	6801      	ldr	r1, [r0, #0]
 8001d80:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001d82:	688a      	ldr	r2, [r1, #8]
 8001d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d88:	4322      	orrs	r2, r4
 8001d8a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d8c:	065a      	lsls	r2, r3, #25
 8001d8e:	d50f      	bpl.n	8001db0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d90:	6801      	ldr	r1, [r0, #0]
 8001d92:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001d94:	684a      	ldr	r2, [r1, #4]
 8001d96:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001d9a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d9c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001da0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001da2:	d105      	bne.n	8001db0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001da4:	684a      	ldr	r2, [r1, #4]
 8001da6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001da8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001dac:	4322      	orrs	r2, r4
 8001dae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	d506      	bpl.n	8001dc2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001db8:	6853      	ldr	r3, [r2, #4]
 8001dba:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	6053      	str	r3, [r2, #4]
}
 8001dc2:	bd10      	pop	{r4, pc}

08001dc4 <UART_WaitOnFlagUntilTimeout>:
{
 8001dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001dcc:	4604      	mov	r4, r0
 8001dce:	460e      	mov	r6, r1
 8001dd0:	4615      	mov	r5, r2
 8001dd2:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dd4:	6822      	ldr	r2, [r4, #0]
 8001dd6:	69d3      	ldr	r3, [r2, #28]
 8001dd8:	ea36 0303 	bics.w	r3, r6, r3
 8001ddc:	bf0c      	ite	eq
 8001dde:	2301      	moveq	r3, #1
 8001de0:	2300      	movne	r3, #0
 8001de2:	42ab      	cmp	r3, r5
 8001de4:	d001      	beq.n	8001dea <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001de6:	2000      	movs	r0, #0
 8001de8:	e01a      	b.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001dea:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001dee:	d0f2      	beq.n	8001dd6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df0:	f7fe fcfa 	bl	80007e8 <HAL_GetTick>
 8001df4:	1bc0      	subs	r0, r0, r7
 8001df6:	4540      	cmp	r0, r8
 8001df8:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dfa:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfc:	d802      	bhi.n	8001e04 <UART_WaitOnFlagUntilTimeout+0x40>
 8001dfe:	f1b8 0f00 	cmp.w	r8, #0
 8001e02:	d10f      	bne.n	8001e24 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e08:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e0a:	6883      	ldr	r3, [r0, #8]
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001e12:	2320      	movs	r3, #32
 8001e14:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001e16:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8001e1e:	2003      	movs	r0, #3
}
 8001e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001e24:	075a      	lsls	r2, r3, #29
 8001e26:	d5d5      	bpl.n	8001dd4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001e28:	69c3      	ldr	r3, [r0, #28]
 8001e2a:	051b      	lsls	r3, r3, #20
 8001e2c:	d5d2      	bpl.n	8001dd4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001e2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e32:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e34:	6803      	ldr	r3, [r0, #0]
 8001e36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e3a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e3c:	6883      	ldr	r3, [r0, #8]
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001e44:	2320      	movs	r3, #32
 8001e46:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001e48:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001e4a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001e4c:	e7e4      	b.n	8001e18 <UART_WaitOnFlagUntilTimeout+0x54>

08001e4e <UART_CheckIdleState>:
{
 8001e4e:	b530      	push	{r4, r5, lr}
 8001e50:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e52:	2500      	movs	r5, #0
{
 8001e54:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e56:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001e58:	f7fe fcc6 	bl	80007e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e5c:	6822      	ldr	r2, [r4, #0]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8001e62:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e64:	d414      	bmi.n	8001e90 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	0752      	lsls	r2, r2, #29
 8001e6c:	d509      	bpl.n	8001e82 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e6e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001e72:	9200      	str	r2, [sp, #0]
 8001e74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7ff ffa2 	bl	8001dc4 <UART_WaitOnFlagUntilTimeout>
 8001e80:	b998      	cbnz	r0, 8001eaa <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8001e82:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001e84:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001e86:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001e88:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001e8c:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8001e8e:	e00d      	b.n	8001eac <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e90:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001e94:	9200      	str	r2, [sp, #0]
 8001e96:	9003      	str	r0, [sp, #12]
 8001e98:	462a      	mov	r2, r5
 8001e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f7ff ff90 	bl	8001dc4 <UART_WaitOnFlagUntilTimeout>
 8001ea4:	9b03      	ldr	r3, [sp, #12]
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	d0dd      	beq.n	8001e66 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001eaa:	2003      	movs	r0, #3
}
 8001eac:	b005      	add	sp, #20
 8001eae:	bd30      	pop	{r4, r5, pc}

08001eb0 <HAL_UART_Init>:
{
 8001eb0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	b340      	cbz	r0, 8001f08 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001eb8:	b91b      	cbnz	r3, 8001ec2 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001eba:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001ebe:	f7fe fae9 	bl	8000494 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ec2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ec4:	2324      	movs	r3, #36	; 0x24
 8001ec6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001ec8:	6813      	ldr	r3, [r2, #0]
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff fe63 	bl	8001b9c <UART_SetConfig>
 8001ed6:	2801      	cmp	r0, #1
 8001ed8:	d016      	beq.n	8001f08 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001edc:	b113      	cbz	r3, 8001ee4 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f7ff ff1c 	bl	8001d1c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ef4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001efc:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001f04:	f7ff bfa3 	b.w	8001e4e <UART_CheckIdleState>
}
 8001f08:	2001      	movs	r0, #1
 8001f0a:	bd10      	pop	{r4, pc}

08001f0c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001f0c:	4770      	bx	lr
	...

08001f10 <__libc_init_array>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4d0d      	ldr	r5, [pc, #52]	; (8001f48 <__libc_init_array+0x38>)
 8001f14:	4c0d      	ldr	r4, [pc, #52]	; (8001f4c <__libc_init_array+0x3c>)
 8001f16:	1b64      	subs	r4, r4, r5
 8001f18:	10a4      	asrs	r4, r4, #2
 8001f1a:	2600      	movs	r6, #0
 8001f1c:	42a6      	cmp	r6, r4
 8001f1e:	d109      	bne.n	8001f34 <__libc_init_array+0x24>
 8001f20:	4d0b      	ldr	r5, [pc, #44]	; (8001f50 <__libc_init_array+0x40>)
 8001f22:	4c0c      	ldr	r4, [pc, #48]	; (8001f54 <__libc_init_array+0x44>)
 8001f24:	f000 f820 	bl	8001f68 <_init>
 8001f28:	1b64      	subs	r4, r4, r5
 8001f2a:	10a4      	asrs	r4, r4, #2
 8001f2c:	2600      	movs	r6, #0
 8001f2e:	42a6      	cmp	r6, r4
 8001f30:	d105      	bne.n	8001f3e <__libc_init_array+0x2e>
 8001f32:	bd70      	pop	{r4, r5, r6, pc}
 8001f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f38:	4798      	blx	r3
 8001f3a:	3601      	adds	r6, #1
 8001f3c:	e7ee      	b.n	8001f1c <__libc_init_array+0xc>
 8001f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f42:	4798      	blx	r3
 8001f44:	3601      	adds	r6, #1
 8001f46:	e7f2      	b.n	8001f2e <__libc_init_array+0x1e>
 8001f48:	08001fbc 	.word	0x08001fbc
 8001f4c:	08001fbc 	.word	0x08001fbc
 8001f50:	08001fbc 	.word	0x08001fbc
 8001f54:	08001fc0 	.word	0x08001fc0

08001f58 <memset>:
 8001f58:	4402      	add	r2, r0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d100      	bne.n	8001f62 <memset+0xa>
 8001f60:	4770      	bx	lr
 8001f62:	f803 1b01 	strb.w	r1, [r3], #1
 8001f66:	e7f9      	b.n	8001f5c <memset+0x4>

08001f68 <_init>:
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	bf00      	nop
 8001f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f6e:	bc08      	pop	{r3}
 8001f70:	469e      	mov	lr, r3
 8001f72:	4770      	bx	lr

08001f74 <_fini>:
 8001f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f76:	bf00      	nop
 8001f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7a:	bc08      	pop	{r3}
 8001f7c:	469e      	mov	lr, r3
 8001f7e:	4770      	bx	lr
