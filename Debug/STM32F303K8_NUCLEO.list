
STM32F303K8_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001a54  08001a54  00011a54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a90  08001a90  00011a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a94  08001a94  00011a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          000001d0  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001e0  200001e0  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ad6e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000212f  00000000  00000000  0002adae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00005755  00000000  00000000  0002cedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000708  00000000  00000000  00032638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000988  00000000  00000000  00032d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017542  00000000  00000000  000336c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b487  00000000  00000000  0004ac0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00082672  00000000  00000000  00056091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000d8703  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000123c  00000000  00000000  000d8754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a3c 	.word	0x08001a3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001a3c 	.word	0x08001a3c

080001c8 <MX_CAN1_Init>:

/* Private functions ---------------------------------------------------------*/

/* USART2 init function */
void MX_CAN1_Init(void)
{
 80001c8:	b510      	push	{r4, lr}
    CAN_FilterTypeDef  sFilterConfig;

    /* Configure the CAN peripheral */
    hcan.Instance = CANx;  
 80001ca:	481e      	ldr	r0, [pc, #120]	; (8000244 <MX_CAN1_Init+0x7c>)
    hcan.Init.TransmitFifoPriority = DISABLE;
    hcan.Init.Mode = CAN_MODE_NORMAL;
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
    hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
    hcan.Init.Prescaler = 4;
 80001cc:	4a1e      	ldr	r2, [pc, #120]	; (8000248 <MX_CAN1_Init+0x80>)
 80001ce:	2304      	movs	r3, #4
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80001d0:	2400      	movs	r4, #0
    hcan.Init.Prescaler = 4;
 80001d2:	e9c0 2300 	strd	r2, r3, [r0]
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80001d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80001da:	e9c0 4302 	strd	r4, r3, [r0, #8]
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80001de:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80001e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001e6:	e9c0 1304 	strd	r1, r3, [r0, #16]
    hcan.Init.TimeTriggeredMode = DISABLE;
 80001ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80001ee:	b08a      	sub	sp, #40	; 0x28
    hcan.Init.TimeTriggeredMode = DISABLE;
 80001f0:	6183      	str	r3, [r0, #24]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 80001f2:	8384      	strh	r4, [r0, #28]
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001f4:	f000 fb2e 	bl	8000854 <HAL_CAN_Init>
 80001f8:	b108      	cbz	r0, 80001fe <MX_CAN1_Init+0x36>
    {
        Error_Handler();
 80001fa:	f000 f8b1 	bl	8000360 <Error_Handler>
    }

    /* Configure the CAN Filter */
    sFilterConfig.FilterBank = 0;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001fe:	2301      	movs	r3, #1
 8000200:	9307      	str	r3, [sp, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
    sFilterConfig.FilterIdLow = 0x0000;
    sFilterConfig.FilterMaskIdHigh = 0x0000;
    sFilterConfig.FilterMaskIdLow = 0x0000;
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
 8000202:	9308      	str	r3, [sp, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000204:	480f      	ldr	r0, [pc, #60]	; (8000244 <MX_CAN1_Init+0x7c>)
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000206:	9404      	str	r4, [sp, #16]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000208:	230e      	movs	r3, #14
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800020a:	4669      	mov	r1, sp
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800020c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    sFilterConfig.FilterIdLow = 0x0000;
 8000210:	e9cd 4400 	strd	r4, r4, [sp]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000214:	e9cd 4402 	strd	r4, r4, [sp, #8]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000218:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800021a:	f000 fb96 	bl	800094a <HAL_CAN_ConfigFilter>
 800021e:	b108      	cbz	r0, 8000224 <MX_CAN1_Init+0x5c>
    {
        Error_Handler();
 8000220:	f000 f89e 	bl	8000360 <Error_Handler>
    }

    /* Start the CAN peripheral */
    if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000224:	4807      	ldr	r0, [pc, #28]	; (8000244 <MX_CAN1_Init+0x7c>)
 8000226:	f000 fbff 	bl	8000a28 <HAL_CAN_Start>
 800022a:	b108      	cbz	r0, 8000230 <MX_CAN1_Init+0x68>
    {
        Error_Handler();
 800022c:	f000 f898 	bl	8000360 <Error_Handler>
    }

    /* Activate CAN RX notification */
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <MX_CAN1_Init+0x7c>)
 8000232:	2102      	movs	r1, #2
 8000234:	f000 fc76 	bl	8000b24 <HAL_CAN_ActivateNotification>
 8000238:	b108      	cbz	r0, 800023e <MX_CAN1_Init+0x76>
    {
        Error_Handler();
 800023a:	f000 f891 	bl	8000360 <Error_Handler>
    }
}
 800023e:	b00a      	add	sp, #40	; 0x28
 8000240:	bd10      	pop	{r4, pc}
 8000242:	bf00      	nop
 8000244:	2000002c 	.word	0x2000002c
 8000248:	40006400 	.word	0x40006400

0800024c <HAL_CAN_MspInit>:
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
    GPIO_InitTypeDef   GPIO_InitStruct; 
    
    /* CAN1 Periph clock enable */
    CANx_CLK_ENABLE();
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <HAL_CAN_MspInit+0x78>)
{
 800024e:	b5f0      	push	{r4, r5, r6, r7, lr}
    CANx_CLK_ENABLE();
 8000250:	69da      	ldr	r2, [r3, #28]
 8000252:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000256:	61da      	str	r2, [r3, #28]
 8000258:	69da      	ldr	r2, [r3, #28]
{
 800025a:	b089      	sub	sp, #36	; 0x24
    CANx_CLK_ENABLE();
 800025c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000260:	9201      	str	r2, [sp, #4]
 8000262:	9a01      	ldr	r2, [sp, #4]
    
    /* Enable GPIO clock */
    CANx_GPIO_CLK_ENABLE(); 
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800026a:	615a      	str	r2, [r3, #20]
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000272:	9302      	str	r3, [sp, #8]
    
    /* CAN1 TX GPIO pin configuration */
    GPIO_InitStruct.Pin = CANx_TX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000274:	2401      	movs	r4, #1
    CANx_GPIO_CLK_ENABLE(); 
 8000276:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000278:	2702      	movs	r7, #2
 800027a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027e:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate =  CANx_TX_AF;    
 8000280:	2509      	movs	r5, #9
    HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct); 
 8000282:	a903      	add	r1, sp, #12
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000288:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800028c:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Alternate =  CANx_TX_AF;    
 8000290:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct); 
 8000292:	f000 fced 	bl	8000c70 <HAL_GPIO_Init>
    
    /* CAN1 RX GPIO pin configuration */
    GPIO_InitStruct.Pin = CANx_RX_PIN;
 8000296:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Alternate =  CANx_RX_AF;    
    HAL_GPIO_Init(CANx_RX_GPIO_PORT, &GPIO_InitStruct); 
 800029a:	a903      	add	r1, sp, #12
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002a0:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a4:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Alternate =  CANx_RX_AF;    
 80002a8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CANx_RX_GPIO_PORT, &GPIO_InitStruct); 
 80002aa:	f000 fce1 	bl	8000c70 <HAL_GPIO_Init>
    
    /* NVIC configuration for CAN1 Reception complete interrupt */
    HAL_NVIC_SetPriority(CANx_RX_IRQn, 1, 0);
 80002ae:	2200      	movs	r2, #0
 80002b0:	4621      	mov	r1, r4
 80002b2:	2014      	movs	r0, #20
 80002b4:	f000 fc5a 	bl	8000b6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CANx_RX_IRQn);
 80002b8:	2014      	movs	r0, #20
 80002ba:	f000 fc89 	bl	8000bd0 <HAL_NVIC_EnableIRQ>
}
 80002be:	b009      	add	sp, #36	; 0x24
 80002c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000

080002c8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b530      	push	{r4, r5, lr}
 80002ca:	b091      	sub	sp, #68	; 0x44
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002cc:	2220      	movs	r2, #32
 80002ce:	2100      	movs	r1, #0
 80002d0:	a807      	add	r0, sp, #28
 80002d2:	f001 fbab 	bl	8001a2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d6:	2214      	movs	r2, #20
 80002d8:	2100      	movs	r1, #0
 80002da:	a801      	add	r0, sp, #4
 80002dc:	f001 fba6 	bl	8001a2c <memset>
  
	/* HSI Oscillator already ON after system reset, activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e0:	2501      	movs	r5, #1
 80002e2:	2310      	movs	r3, #16
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f0:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f4:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f000 fd81 	bl	8000dfc <HAL_RCC_OscConfig>
 80002fa:	b100      	cbz	r0, 80002fe <SystemClock_Config+0x36>
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
	while(1)
 80002fc:	e7fe      	b.n	80002fc <SystemClock_Config+0x34>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000306:	4629      	mov	r1, r5
 8000308:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	e9cd 3401 	strd	r3, r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030e:	f001 f827 	bl	8001360 <HAL_RCC_ClockConfig>
 8000312:	b100      	cbz	r0, 8000316 <SystemClock_Config+0x4e>
	while(1)
 8000314:	e7fe      	b.n	8000314 <SystemClock_Config+0x4c>
}
 8000316:	b011      	add	sp, #68	; 0x44
 8000318:	bd30      	pop	{r4, r5, pc}
	...

0800031c <main>:
{
 800031c:	b508      	push	{r3, lr}
	HAL_Init();
 800031e:	f000 fa75 	bl	800080c <HAL_Init>
	SystemClock_Config();
 8000322:	f7ff ffd1 	bl	80002c8 <SystemClock_Config>
	BSP_LED_Init(LED3);
 8000326:	2000      	movs	r0, #0
 8000328:	f000 f9ea 	bl	8000700 <BSP_LED_Init>
	MX_USART2_UART_Init();
 800032c:	f000 f83c 	bl	80003a8 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 8000330:	f7ff ff4a 	bl	80001c8 <MX_CAN1_Init>
	if (HAL_UART_Receive_IT(&huart2, (uint8_t*)usart_rx, USART_MSG_LENGTH)!= HAL_OK)
 8000334:	4907      	ldr	r1, [pc, #28]	; (8000354 <main+0x38>)
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <main+0x3c>)
 8000338:	220a      	movs	r2, #10
 800033a:	f001 f8ed 	bl	8001518 <HAL_UART_Receive_IT>
 800033e:	b938      	cbnz	r0, 8000350 <main+0x34>
		cnt++;
 8000340:	4c06      	ldr	r4, [pc, #24]	; (800035c <main+0x40>)
		BSP_LED_Toggle(LED3);
 8000342:	2000      	movs	r0, #0
 8000344:	f000 fa04 	bl	8000750 <BSP_LED_Toggle>
		cnt++;
 8000348:	6823      	ldr	r3, [r4, #0]
 800034a:	3301      	adds	r3, #1
 800034c:	6023      	str	r3, [r4, #0]
	while (1)
 800034e:	e7f8      	b.n	8000342 <main+0x26>
	while(1)
 8000350:	e7fe      	b.n	8000350 <main+0x34>
 8000352:	bf00      	nop
 8000354:	200001b4 	.word	0x200001b4
 8000358:	200000a8 	.word	0x200000a8
 800035c:	200000a4 	.word	0x200000a4

08000360 <Error_Handler>:
 8000360:	e7fe      	b.n	8000360 <Error_Handler>
	...

08000364 <HAL_MspInit>:
  * @param None
  * @retval None
  */
void HAL_MspInit(void)
{
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <HAL_MspInit+0x2c>)
 8000366:	699a      	ldr	r2, [r3, #24]
 8000368:	f042 0201 	orr.w	r2, r2, #1
 800036c:	619a      	str	r2, [r3, #24]
 800036e:	699a      	ldr	r2, [r3, #24]
{
 8000370:	b082      	sub	sp, #8
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000372:	f002 0201 	and.w	r2, r2, #1
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 800037a:	69da      	ldr	r2, [r3, #28]
 800037c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000380:	61da      	str	r2, [r3, #28]
 8000382:	69db      	ldr	r3, [r3, #28]
 8000384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	9b01      	ldr	r3, [sp, #4]
}
 800038c:	b002      	add	sp, #8
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000

08000394 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000394:	4770      	bx	lr

08000396 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000396:	e7fe      	b.n	8000396 <HardFault_Handler>

08000398 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000398:	e7fe      	b.n	8000398 <MemManage_Handler>

0800039a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800039a:	e7fe      	b.n	800039a <BusFault_Handler>

0800039c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800039c:	e7fe      	b.n	800039c <UsageFault_Handler>

0800039e <SVC_Handler>:
 800039e:	4770      	bx	lr

080003a0 <DebugMon_Handler>:
 80003a0:	4770      	bx	lr

080003a2 <PendSV_Handler>:
 80003a2:	4770      	bx	lr

080003a4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80003a4:	f000 ba44 	b.w	8000830 <HAL_IncTick>

080003a8 <MX_USART2_UART_Init>:
/* Private functions ---------------------------------------------------------*/

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
	huart2.Instance = USART2;
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <MX_USART2_UART_Init+0x34>)
	huart2.Init.BaudRate = 115200;
 80003aa:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <MX_USART2_UART_Init+0x38>)
{
 80003ac:	b508      	push	{r3, lr}
	huart2.Init.BaudRate = 115200;
 80003ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80003b2:	e9c0 2300 	strd	r2, r3, [r0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	2300      	movs	r3, #0
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 80003b8:	220c      	movs	r2, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 80003ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003be:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003c2:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart2.Init.Parity = UART_PARITY_NONE;
 80003c6:	6103      	str	r3, [r0, #16]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c8:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ca:	f001 fadd 	bl	8001988 <HAL_UART_Init>
 80003ce:	b118      	cbz	r0, 80003d8 <MX_USART2_UART_Init+0x30>
	{
	  Error_Handler();
	}
}
 80003d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 80003d4:	f7ff bfc4 	b.w	8000360 <Error_Handler>
}
 80003d8:	bd08      	pop	{r3, pc}
 80003da:	bf00      	nop
 80003dc:	200000a8 	.word	0x200000a8
 80003e0:	40004400 	.word	0x40004400

080003e4 <HAL_UART_MspInit>:
{

	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* Enable GPIO clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 80003e4:	4b40      	ldr	r3, [pc, #256]	; (80004e8 <HAL_UART_MspInit+0x104>)
{
 80003e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	USARTx_TX_GPIO_CLK_ENABLE();
 80003ea:	695a      	ldr	r2, [r3, #20]
	GPIO_InitStruct.Alternate = USARTx_TX_AF;

	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);

	/* Configure the DMA handler for Transmission process */
	hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80003ec:	4c3f      	ldr	r4, [pc, #252]	; (80004ec <HAL_UART_MspInit+0x108>)
	USARTx_TX_GPIO_CLK_ENABLE();
 80003ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80003f2:	615a      	str	r2, [r3, #20]
 80003f4:	695a      	ldr	r2, [r3, #20]
{
 80003f6:	b08a      	sub	sp, #40	; 0x28
	USARTx_TX_GPIO_CLK_ENABLE();
 80003f8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80003fc:	9201      	str	r2, [sp, #4]
 80003fe:	9a01      	ldr	r2, [sp, #4]
	USARTx_RX_GPIO_CLK_ENABLE();
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000406:	615a      	str	r2, [r3, #20]
 8000408:	695a      	ldr	r2, [r3, #20]
 800040a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800040e:	9202      	str	r2, [sp, #8]
 8000410:	9a02      	ldr	r2, [sp, #8]
	USARTx_CLK_ENABLE();
 8000412:	69da      	ldr	r2, [r3, #28]
 8000414:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000418:	61da      	str	r2, [r3, #28]
 800041a:	69da      	ldr	r2, [r3, #28]
 800041c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000420:	9203      	str	r2, [sp, #12]
 8000422:	9a03      	ldr	r2, [sp, #12]
	DMAx_CLK_ENABLE();
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	f042 0201 	orr.w	r2, r2, #1
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000434:	f248 0204 	movw	r2, #32772	; 0x8004
	DMAx_CLK_ENABLE();
 8000438:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043a:	2302      	movs	r3, #2
 800043c:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000440:	2701      	movs	r7, #1
 8000442:	2303      	movs	r3, #3
{
 8000444:	4606      	mov	r6, r0
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000446:	a905      	add	r1, sp, #20
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
	hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000448:	f04f 0980 	mov.w	r9, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044c:	e9cd 7307 	strd	r7, r3, [sp, #28]
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000454:	2307      	movs	r3, #7
	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_tx.Init.Mode                = DMA_NORMAL;
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

	HAL_DMA_Init(&hdma_tx);
 8000456:	eb04 0a09 	add.w	sl, r4, r9
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800045a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800045c:	f000 fc08 	bl	8000c70 <HAL_GPIO_Init>
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000460:	4b23      	ldr	r3, [pc, #140]	; (80004f0 <HAL_UART_MspInit+0x10c>)
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000462:	2500      	movs	r5, #0
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000464:	f04f 0810 	mov.w	r8, #16
	HAL_DMA_Init(&hdma_tx);
 8000468:	4650      	mov	r0, sl
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800046a:	e9c4 3820 	strd	r3, r8, [r4, #128]	; 0x80
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800046e:	e9c4 5922 	strd	r5, r9, [r4, #136]	; 0x88
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000472:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8000476:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	HAL_DMA_Init(&hdma_tx);
 800047a:	f000 fbcb 	bl	8000c14 <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the UART handle */
	__HAL_LINKDMA(huart, hdmatx, hdma_tx);

	/* Configure the DMA handler for reception process */
	hdma_rx.Instance                 = USARTx_RX_DMA_CHANNEL;
 800047e:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <HAL_UART_MspInit+0x110>)
	__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8000480:	f8c6 a068 	str.w	sl, [r6, #104]	; 0x68
	hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
	hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000484:	e9c4 5933 	strd	r5, r9, [r4, #204]	; 0xcc
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_rx.Init.Mode                = DMA_NORMAL;
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

	HAL_DMA_Init(&hdma_rx);
 8000488:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
	hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800048c:	e9c4 3531 	strd	r3, r5, [r4, #196]	; 0xc4
	HAL_DMA_Init(&hdma_rx);
 8000490:	4648      	mov	r0, r9
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000496:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800049a:	e9c4 5535 	strd	r5, r5, [r4, #212]	; 0xd4
	__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800049e:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
	hdma_rx.Init.Mode                = DMA_NORMAL;
 80004a2:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
	HAL_DMA_Init(&hdma_rx);
 80004a6:	f000 fbb5 	bl	8000c14 <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the the UART handle */
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);

	/* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 80004aa:	463a      	mov	r2, r7
 80004ac:	4629      	mov	r1, r5
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);
 80004ae:	f8c6 906c 	str.w	r9, [r6, #108]	; 0x6c
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 80004b2:	2011      	movs	r0, #17
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);
 80004b4:	f8c4 60e8 	str.w	r6, [r4, #232]	; 0xe8
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 80004b8:	f000 fb58 	bl	8000b6c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80004bc:	2011      	movs	r0, #17
 80004be:	f000 fb87 	bl	8000bd0 <HAL_NVIC_EnableIRQ>

	/* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
	HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 80004c2:	462a      	mov	r2, r5
 80004c4:	4629      	mov	r1, r5
 80004c6:	4640      	mov	r0, r8
 80004c8:	f000 fb50 	bl	8000b6c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 80004cc:	4640      	mov	r0, r8
 80004ce:	f000 fb7f 	bl	8000bd0 <HAL_NVIC_EnableIRQ>

	/* NVIC configuration for USART, to catch the TX complete */
	HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 80004d2:	463a      	mov	r2, r7
 80004d4:	4629      	mov	r1, r5
 80004d6:	2026      	movs	r0, #38	; 0x26
 80004d8:	f000 fb48 	bl	8000b6c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80004dc:	2026      	movs	r0, #38	; 0x26
 80004de:	f000 fb77 	bl	8000bd0 <HAL_NVIC_EnableIRQ>

}
 80004e2:	b00a      	add	sp, #40	; 0x28
 80004e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	200000a8 	.word	0x200000a8
 80004f0:	40020080 	.word	0x40020080
 80004f4:	4002006c 	.word	0x4002006c

080004f8 <HAL_UART_RxCpltCallback>:
    uint8_t computed_chksm = 0x00;
    uint8_t data_chksm = 0x00;
    uint8_t artifact = 0x00;
    uint8_t data_dec[7] = { 0, 0, 0, 0, 0, 0, 0 };

	if (HAL_UART_Receive_IT(&huart2, (uint8_t*)usart_rx, USART_MSG_LENGTH)!= HAL_OK)
 80004f8:	4966      	ldr	r1, [pc, #408]	; (8000694 <HAL_UART_RxCpltCallback+0x19c>)
{
 80004fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (HAL_UART_Receive_IT(&huart2, (uint8_t*)usart_rx, USART_MSG_LENGTH)!= HAL_OK)
 80004fe:	220a      	movs	r2, #10
{
 8000500:	4605      	mov	r5, r0
	if (HAL_UART_Receive_IT(&huart2, (uint8_t*)usart_rx, USART_MSG_LENGTH)!= HAL_OK)
 8000502:	f5a1 7086 	sub.w	r0, r1, #268	; 0x10c
 8000506:	f001 f807 	bl	8001518 <HAL_UART_Receive_IT>
 800050a:	b108      	cbz	r0, 8000510 <HAL_UART_RxCpltCallback+0x18>
		Error_Handler();
 800050c:	f7ff ff28 	bl	8000360 <Error_Handler>
	usart_rx_msg_cnt++;
 8000510:	4c61      	ldr	r4, [pc, #388]	; (8000698 <HAL_UART_RxCpltCallback+0x1a0>)
 8000512:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8000516:	3301      	adds	r3, #1
 8000518:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
	 * idx:	[0]   [1]   [2]     [3]     [4]     [5]     [6]   [7]        [8]	 [9]
	 *  	---------------------------------------------------------------------------
	 *  	| ID1 | ID0 | DATA3 | DATA2 | DATA1 | DATA0 | STS | ARTIFACT | CHKSM | LF |
	 *  	---------------------------------------------------------------------------
	 */
	if ((huart->RxXferSize == 10) && (usart_rx[9] == 0x0A))
 800051c:	f8b5 3058 	ldrh.w	r3, [r5, #88]	; 0x58
 8000520:	2b0a      	cmp	r3, #10
 8000522:	f040 8098 	bne.w	8000656 <HAL_UART_RxCpltCallback+0x15e>
 8000526:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
 800052a:	2b0a      	cmp	r3, #10
 800052c:	f040 8093 	bne.w	8000656 <HAL_UART_RxCpltCallback+0x15e>
	{
		computed_chksm = 0xA5 ^ \
				usart_rx[0] ^ \
 8000530:	f894 c10c 	ldrb.w	ip, [r4, #268]	; 0x10c
				usart_rx[2] ^ \
				usart_rx[3] ^ \
				usart_rx[4] ^ \
				usart_rx[5] ^ \
				usart_rx[6] ^ \
				usart_rx[7];
 8000534:	f894 5113 	ldrb.w	r5, [r4, #275]	; 0x113
				usart_rx[1] ^ \
 8000538:	f894 e10d 	ldrb.w	lr, [r4, #269]	; 0x10d
				usart_rx[2] ^ \
 800053c:	f894 710e 	ldrb.w	r7, [r4, #270]	; 0x10e
				usart_rx[3] ^ \
 8000540:	f894 610f 	ldrb.w	r6, [r4, #271]	; 0x10f
				usart_rx[4] ^ \
 8000544:	f894 0110 	ldrb.w	r0, [r4, #272]	; 0x110
				usart_rx[5] ^ \
 8000548:	f894 1111 	ldrb.w	r1, [r4, #273]	; 0x111
		computed_chksm = 0xA5 ^ \
 800054c:	f894 8112 	ldrb.w	r8, [r4, #274]	; 0x112
 8000550:	ea8c 0205 	eor.w	r2, ip, r5
 8000554:	ea8e 0202 	eor.w	r2, lr, r2
 8000558:	407a      	eors	r2, r7
 800055a:	4072      	eors	r2, r6
 800055c:	4042      	eors	r2, r0
 800055e:	404a      	eors	r2, r1
 8000560:	ea82 0208 	eor.w	r2, r2, r8
		data_chksm = ((usart_rx[8] == 0x1A) ? (0x0A) : (usart_rx[8]));
 8000564:	f894 8114 	ldrb.w	r8, [r4, #276]	; 0x114
 8000568:	f1b8 0f1a 	cmp.w	r8, #26
		computed_chksm = 0xA5 ^ \
 800056c:	f082 02a5 	eor.w	r2, r2, #165	; 0xa5
		data_chksm = ((usart_rx[8] == 0x1A) ? (0x0A) : (usart_rx[8]));
 8000570:	bf08      	it	eq
 8000572:	f04f 080a 	moveq.w	r8, #10
		if (computed_chksm == data_chksm)
 8000576:	4590      	cmp	r8, r2
 8000578:	d16d      	bne.n	8000656 <HAL_UART_RxCpltCallback+0x15e>
		{
			en_send_can = 1;
 800057a:	2201      	movs	r2, #1
			artifact = ((usart_rx[7] == 0x01) ? (0x0A) : (usart_rx[7]));
 800057c:	4295      	cmp	r5, r2
 800057e:	bf18      	it	ne
 8000580:	462b      	movne	r3, r5
			en_send_can = 1;
 8000582:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
			data_dec[0] = ((((artifact & 0x80) >> 7) * 0x0A) + (usart_rx[0] * (1 - ((artifact & 0x80) >> 7))));
			data_dec[1] = ((((artifact & 0x40) >> 6) * 0x0A) + (usart_rx[1] * (1 - ((artifact & 0x40) >> 6))));
 8000586:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800058a:	eb02 0982 	add.w	r9, r2, r2, lsl #2
 800058e:	f083 0240 	eor.w	r2, r3, #64	; 0x40
			data_dec[0] = ((((artifact & 0x80) >> 7) * 0x0A) + (usart_rx[0] * (1 - ((artifact & 0x80) >> 7))));
 8000592:	ea4f 18d3 	mov.w	r8, r3, lsr #7
			data_dec[1] = ((((artifact & 0x40) >> 6) * 0x0A) + (usart_rx[1] * (1 - ((artifact & 0x40) >> 6))));
 8000596:	f3c2 1280 	ubfx	r2, r2, #6, #1
 800059a:	fb12 fe0e 	smulbb	lr, r2, lr
			data_dec[0] = ((((artifact & 0x80) >> 7) * 0x0A) + (usart_rx[0] * (1 - ((artifact & 0x80) >> 7))));
 800059e:	f1c8 0201 	rsb	r2, r8, #1
 80005a2:	fb12 fc0c 	smulbb	ip, r2, ip
 80005a6:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80005aa:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1

    /* Configure Transmission process */
	if (en_send_can)
	{
		can_tx_header.StdId = (uint32_t)((uint16_t)(data_dec[1] & 0x00FF) +
				(uint16_t)((data_dec[0] << 8) & 0xFF00));
 80005ae:	fa5f fc8c 	uxtb.w	ip, ip
		can_tx_header.StdId = (uint32_t)((uint16_t)(data_dec[1] & 0x00FF) +
 80005b2:	4d3a      	ldr	r5, [pc, #232]	; (800069c <HAL_UART_RxCpltCallback+0x1a4>)
			data_dec[1] = ((((artifact & 0x40) >> 6) * 0x0A) + (usart_rx[1] * (1 - ((artifact & 0x40) >> 6))));
 80005b4:	eb0e 0e49 	add.w	lr, lr, r9, lsl #1
				(uint16_t)((data_dec[0] << 8) & 0xFF00));
 80005b8:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
		can_tx_header.StdId = (uint32_t)((uint16_t)(data_dec[1] & 0x00FF) +
 80005bc:	fa5c f28e 	uxtab	r2, ip, lr
	    //can_tx_header.ExtId = 0x01;
		can_tx_header.RTR = CAN_RTR_DATA;
		can_tx_header.IDE = CAN_ID_STD;
		can_tx_header.DLC = CAN_DATA_LENGTH;
 80005c0:	f04f 0c04 	mov.w	ip, #4
 80005c4:	f8c5 c010 	str.w	ip, [r5, #16]
			data_dec[2] = ((((artifact & 0x20) >> 5) * 0x0A) + (usart_rx[2] * (1 - ((artifact & 0x20) >> 5))));
 80005c8:	f3c3 1c40 	ubfx	ip, r3, #5, #1
 80005cc:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 80005d0:	f083 0c20 	eor.w	ip, r3, #32
 80005d4:	f3cc 1c40 	ubfx	ip, ip, #5, #1
		can_tx_header.StdId = (uint32_t)((uint16_t)(data_dec[1] & 0x00FF) +
 80005d8:	602a      	str	r2, [r5, #0]
		can_tx_header.RTR = CAN_RTR_DATA;
 80005da:	2200      	movs	r2, #0
			data_dec[2] = ((((artifact & 0x20) >> 5) * 0x0A) + (usart_rx[2] * (1 - ((artifact & 0x20) >> 5))));
 80005dc:	fb1c f707 	smulbb	r7, ip, r7
		can_tx_header.IDE = CAN_ID_STD;
 80005e0:	e9c5 2202 	strd	r2, r2, [r5, #8]
		can_tx_header.TransmitGlobalTime = DISABLE;
 80005e4:	752a      	strb	r2, [r5, #20]
		can_tx[0] = data_dec[2];
 80005e6:	4a2e      	ldr	r2, [pc, #184]	; (80006a0 <HAL_UART_RxCpltCallback+0x1a8>)
			data_dec[2] = ((((artifact & 0x20) >> 5) * 0x0A) + (usart_rx[2] * (1 - ((artifact & 0x20) >> 5))));
 80005e8:	eb07 074e 	add.w	r7, r7, lr, lsl #1
		can_tx[0] = data_dec[2];
 80005ec:	7017      	strb	r7, [r2, #0]
			data_dec[3] = ((((artifact & 0x10) >> 4) * 0x0A) + (usart_rx[3] * (1 - ((artifact & 0x10) >> 4))));
 80005ee:	f3c3 1700 	ubfx	r7, r3, #4, #1
 80005f2:	eb07 0c87 	add.w	ip, r7, r7, lsl #2
 80005f6:	f083 0710 	eor.w	r7, r3, #16
 80005fa:	f3c7 1700 	ubfx	r7, r7, #4, #1
 80005fe:	fb17 f606 	smulbb	r6, r7, r6
 8000602:	eb06 064c 	add.w	r6, r6, ip, lsl #1
		can_tx[1] = data_dec[3];
 8000606:	7056      	strb	r6, [r2, #1]
			data_dec[4] = ((((artifact & 0x08) >> 3) * 0x0A) + (usart_rx[4] * (1 - ((artifact & 0x08) >> 3))));
 8000608:	f3c3 06c0 	ubfx	r6, r3, #3, #1
 800060c:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8000610:	f083 0608 	eor.w	r6, r3, #8
 8000614:	f3c6 06c0 	ubfx	r6, r6, #3, #1
 8000618:	fb16 f000 	smulbb	r0, r6, r0
 800061c:	eb00 0047 	add.w	r0, r0, r7, lsl #1
			data_dec[5] = ((((artifact & 0x04) >> 2) * 0x0A) + (usart_rx[5] * (1 - ((artifact & 0x04) >> 2))));
 8000620:	f003 0604 	and.w	r6, r3, #4
		can_tx[2] = data_dec[4];
 8000624:	7090      	strb	r0, [r2, #2]
			data_dec[5] = ((((artifact & 0x04) >> 2) * 0x0A) + (usart_rx[5] * (1 - ((artifact & 0x04) >> 2))));
 8000626:	f3c3 0080 	ubfx	r0, r3, #2, #1
 800062a:	f083 0304 	eor.w	r3, r3, #4
 800062e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000632:	4430      	add	r0, r6
 8000634:	fb13 f301 	smulbb	r3, r3, r1
 8000638:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		can_tx[3] = data_dec[5];
 800063c:	70d3      	strb	r3, [r2, #3]
	    if (HAL_CAN_AddTxMessage(&hcan, &can_tx_header, can_tx, &can_tx_mailbox) != HAL_OK)
 800063e:	4819      	ldr	r0, [pc, #100]	; (80006a4 <HAL_UART_RxCpltCallback+0x1ac>)
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <HAL_UART_RxCpltCallback+0x1b0>)
 8000642:	4629      	mov	r1, r5
 8000644:	f000 fa1e 	bl	8000a84 <HAL_CAN_AddTxMessage>
 8000648:	b108      	cbz	r0, 800064e <HAL_UART_RxCpltCallback+0x156>
	    	Error_Handler();
 800064a:	f7ff fe89 	bl	8000360 <Error_Handler>
	    promise_sdo = (uint16_t)can_tx_header.StdId;
 800064e:	682b      	ldr	r3, [r5, #0]
 8000650:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
		usart_rx[6] = 0;
		usart_rx[7] = 0;
		usart_rx[8] = 0;
		usart_rx[9] = 0;
	}
}
 8000654:	e01b      	b.n	800068e <HAL_UART_RxCpltCallback+0x196>
			usart_rx_chksum_err++;
 8000656:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800065a:	3301      	adds	r3, #1
 800065c:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
			en_send_can = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		usart_rx[0] = 0;
 8000666:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
		usart_rx[1] = 0;
 800066a:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		usart_rx[2] = 0;
 800066e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		usart_rx[3] = 0;
 8000672:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
		usart_rx[4] = 0;
 8000676:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
		usart_rx[5] = 0;
 800067a:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		usart_rx[6] = 0;
 800067e:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		usart_rx[7] = 0;
 8000682:	f884 3113 	strb.w	r3, [r4, #275]	; 0x113
		usart_rx[8] = 0;
 8000686:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		usart_rx[9] = 0;
 800068a:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
}
 800068e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000692:	bf00      	nop
 8000694:	200001b4 	.word	0x200001b4
 8000698:	200000a8 	.word	0x200000a8
 800069c:	20000088 	.word	0x20000088
 80006a0:	20000084 	.word	0x20000084
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	20000080 	.word	0x20000080

080006ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006b2:	e003      	b.n	80006bc <LoopCopyDataInit>

080006b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006ba:	3104      	adds	r1, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006c4:	d3f6      	bcc.n	80006b4 <CopyDataInit>
	ldr	r2, =_sbss
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006c8:	e002      	b.n	80006d0 <LoopFillZerobss>

080006ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006cc:	f842 3b04 	str.w	r3, [r2], #4

080006d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <LoopForever+0x16>)
	cmp	r2, r3
 80006d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006d4:	d3f9      	bcc.n	80006ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006d6:	f000 f843 	bl	8000760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006da:	f001 f983 	bl	80019e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006de:	f7ff fe1d 	bl	800031c <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80006e8:	08001a98 	.word	0x08001a98
	ldr	r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006f0:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80006f4:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80006f8:	200001e0 	.word	0x200001e0

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>
	...

08000700 <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <BSP_LED_Init+0x48>)
{
 8000702:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000704:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8000706:	4d11      	ldr	r5, [pc, #68]	; (800074c <BSP_LED_Init+0x4c>)
  LEDx_GPIO_CLK_ENABLE(Led);
 8000708:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800070c:	615a      	str	r2, [r3, #20]
 800070e:	695b      	ldr	r3, [r3, #20]
{
 8000710:	b087      	sub	sp, #28
  LEDx_GPIO_CLK_ENABLE(Led);
 8000712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	9b00      	ldr	r3, [sp, #0]
{
 800071a:	4604      	mov	r4, r0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2608      	movs	r6, #8
 800071e:	2301      	movs	r3, #1
 8000720:	e9cd 6301 	strd	r6, r3, [sp, #4]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8000724:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	2700      	movs	r7, #0
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800072c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072e:	e9cd 7303 	strd	r7, r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8000732:	f000 fa9d 	bl	8000c70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8000736:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800073a:	463a      	mov	r2, r7
 800073c:	4631      	mov	r1, r6
 800073e:	f000 fb51 	bl	8000de4 <HAL_GPIO_WritePin>
}
 8000742:	b007      	add	sp, #28
 8000744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000
 800074c:	20000000 	.word	0x20000000

08000750 <BSP_LED_Toggle>:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000750:	4b02      	ldr	r3, [pc, #8]	; (800075c <BSP_LED_Toggle+0xc>)
 8000752:	2108      	movs	r1, #8
 8000754:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000758:	f000 bb49 	b.w	8000dee <HAL_GPIO_TogglePin>
 800075c:	20000000 	.word	0x20000000

08000760 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4915      	ldr	r1, [pc, #84]	; (80007b8 <SystemInit+0x58>)
 8000762:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000766:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <SystemInit+0x5c>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	f042 0201 	orr.w	r2, r2, #1
 8000776:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000778:	6858      	ldr	r0, [r3, #4]
 800077a:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <SystemInit+0x60>)
 800077c:	4002      	ands	r2, r0
 800077e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000786:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800078a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000792:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800079a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800079c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800079e:	f022 020f 	bic.w	r2, r2, #15
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80007a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <SystemInit+0x64>)
 80007a8:	4002      	ands	r2, r0
 80007aa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007b4:	608b      	str	r3, [r1, #8]
#endif
}
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	40021000 	.word	0x40021000
 80007c0:	f87fc00c 	.word	0xf87fc00c
 80007c4:	ff00fccc 	.word	0xff00fccc

080007c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_InitTick+0x3c>)
 80007cc:	4e0e      	ldr	r6, [pc, #56]	; (8000808 <HAL_InitTick+0x40>)
{
 80007ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d4:	7830      	ldrb	r0, [r6, #0]
 80007d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80007da:	6810      	ldr	r0, [r2, #0]
 80007dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80007e0:	f000 fa04 	bl	8000bec <HAL_SYSTICK_Config>
 80007e4:	4604      	mov	r4, r0
 80007e6:	b950      	cbnz	r0, 80007fe <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e8:	2d0f      	cmp	r5, #15
 80007ea:	d808      	bhi.n	80007fe <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ec:	4602      	mov	r2, r0
 80007ee:	4629      	mov	r1, r5
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f000 f9ba 	bl	8000b6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f8:	6075      	str	r5, [r6, #4]
 80007fa:	4620      	mov	r0, r4
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80007fe:	2001      	movs	r0, #1
 8000800:	e7fc      	b.n	80007fc <HAL_InitTick+0x34>
 8000802:	bf00      	nop
 8000804:	20000004 	.word	0x20000004
 8000808:	20000008 	.word	0x20000008

0800080c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_Init+0x20>)
{
 800080e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000810:	6813      	ldr	r3, [r2, #0]
 8000812:	f043 0310 	orr.w	r3, r3, #16
 8000816:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000818:	2003      	movs	r0, #3
 800081a:	f000 f995 	bl	8000b48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800081e:	200f      	movs	r0, #15
 8000820:	f7ff ffd2 	bl	80007c8 <HAL_InitTick>
  HAL_MspInit();
 8000824:	f7ff fd9e 	bl	8000364 <HAL_MspInit>
}
 8000828:	2000      	movs	r0, #0
 800082a:	bd08      	pop	{r3, pc}
 800082c:	40022000 	.word	0x40022000

08000830 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000830:	4a03      	ldr	r2, [pc, #12]	; (8000840 <HAL_IncTick+0x10>)
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <HAL_IncTick+0x14>)
 8000834:	6811      	ldr	r1, [r2, #0]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	440b      	add	r3, r1
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	200001dc 	.word	0x200001dc
 8000844:	20000008 	.word	0x20000008

08000848 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000848:	4b01      	ldr	r3, [pc, #4]	; (8000850 <HAL_GetTick+0x8>)
 800084a:	6818      	ldr	r0, [r3, #0]
}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	200001dc 	.word	0x200001dc

08000854 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000854:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000856:	4604      	mov	r4, r0
 8000858:	2800      	cmp	r0, #0
 800085a:	d06e      	beq.n	800093a <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800085c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000860:	b90b      	cbnz	r3, 8000866 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000862:	f7ff fcf3 	bl	800024c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000866:	6822      	ldr	r2, [r4, #0]
 8000868:	6813      	ldr	r3, [r2, #0]
 800086a:	f023 0302 	bic.w	r3, r3, #2
 800086e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000870:	f7ff ffea 	bl	8000848 <HAL_GetTick>
 8000874:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	0791      	lsls	r1, r2, #30
 800087c:	d451      	bmi.n	8000922 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	f042 0201 	orr.w	r2, r2, #1
 8000884:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000886:	f7ff ffdf 	bl	8000848 <HAL_GetTick>
 800088a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	07d2      	lsls	r2, r2, #31
 8000892:	d554      	bpl.n	800093e <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000894:	7e22      	ldrb	r2, [r4, #24]
 8000896:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	bf0c      	ite	eq
 800089c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008a0:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008a6:	7e62      	ldrb	r2, [r4, #25]
 80008a8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	bf0c      	ite	eq
 80008ae:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008b2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80008b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008b8:	7ea2      	ldrb	r2, [r4, #26]
 80008ba:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	bf0c      	ite	eq
 80008c0:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c4:	f022 0220 	bicne.w	r2, r2, #32
 80008c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008ca:	7ee2      	ldrb	r2, [r4, #27]
 80008cc:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	bf0c      	ite	eq
 80008d2:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008d6:	f042 0210 	orrne.w	r2, r2, #16
 80008da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008dc:	7f22      	ldrb	r2, [r4, #28]
 80008de:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	bf0c      	ite	eq
 80008e4:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008e8:	f022 0208 	bicne.w	r2, r2, #8
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008ee:	7f62      	ldrb	r2, [r4, #29]
 80008f0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	bf0c      	ite	eq
 80008f6:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008fa:	f022 0204 	bicne.w	r2, r2, #4
 80008fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000900:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000904:	430a      	orrs	r2, r1
 8000906:	6921      	ldr	r1, [r4, #16]
 8000908:	430a      	orrs	r2, r1
 800090a:	6961      	ldr	r1, [r4, #20]
 800090c:	430a      	orrs	r2, r1
 800090e:	6861      	ldr	r1, [r4, #4]
 8000910:	3901      	subs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000916:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000918:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800091a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800091c:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000920:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000922:	f7ff ff91 	bl	8000848 <HAL_GetTick>
 8000926:	1b40      	subs	r0, r0, r5
 8000928:	280a      	cmp	r0, #10
 800092a:	d9a4      	bls.n	8000876 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800092c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800092e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000932:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000934:	2305      	movs	r3, #5
 8000936:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800093a:	2001      	movs	r0, #1
 800093c:	e7f0      	b.n	8000920 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800093e:	f7ff ff83 	bl	8000848 <HAL_GetTick>
 8000942:	1b40      	subs	r0, r0, r5
 8000944:	280a      	cmp	r0, #10
 8000946:	d9a1      	bls.n	800088c <HAL_CAN_Init+0x38>
 8000948:	e7f0      	b.n	800092c <HAL_CAN_Init+0xd8>

0800094a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800094a:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800094c:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000950:	3b01      	subs	r3, #1
 8000952:	2b01      	cmp	r3, #1
 8000954:	d862      	bhi.n	8000a1c <HAL_CAN_ConfigFilter+0xd2>
  CAN_TypeDef *can_ip = hcan->Instance;
 8000956:	6803      	ldr	r3, [r0, #0]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000958:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800095c:	f042 0201 	orr.w	r2, r2, #1
 8000960:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000964:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000966:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800096a:	2401      	movs	r4, #1
 800096c:	f002 001f 	and.w	r0, r2, #31
 8000970:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000974:	ea25 0500 	bic.w	r5, r5, r0
 8000978:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800097c:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800097e:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000980:	bb85      	cbnz	r5, 80009e4 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000982:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000986:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000988:	4025      	ands	r5, r4
 800098a:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800098e:	888d      	ldrh	r5, [r1, #4]
 8000990:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000994:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000998:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800099c:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800099e:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009a0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009a4:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80009a8:	698a      	ldr	r2, [r1, #24]
 80009aa:	bb6a      	cbnz	r2, 8000a08 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80009ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009b0:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80009b6:	690a      	ldr	r2, [r1, #16]
 80009b8:	bb52      	cbnz	r2, 8000a10 <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009be:	4014      	ands	r4, r2
 80009c0:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80009c4:	6a0a      	ldr	r2, [r1, #32]
 80009c6:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009c8:	bf02      	ittt	eq
 80009ca:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 80009ce:	4310      	orreq	r0, r2
 80009d0:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80009d8:	f022 0201 	bic.w	r2, r2, #1
 80009dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80009e0:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009e4:	2d01      	cmp	r5, #1
 80009e6:	d1df      	bne.n	80009a8 <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009e8:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009ec:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009ee:	4305      	orrs	r5, r0
 80009f0:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009f4:	888d      	ldrh	r5, [r1, #4]
 80009f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009fa:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009fe:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a02:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a04:	898d      	ldrh	r5, [r1, #12]
 8000a06:	e7cb      	b.n	80009a0 <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a0c:	4302      	orrs	r2, r0
 8000a0e:	e7d0      	b.n	80009b2 <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a14:	4302      	orrs	r2, r0
 8000a16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a1a:	e7d3      	b.n	80009c4 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a22:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000a24:	2001      	movs	r0, #1
 8000a26:	e7dc      	b.n	80009e2 <HAL_CAN_ConfigFilter+0x98>

08000a28 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a28:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a2a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000a2e:	2b01      	cmp	r3, #1
{
 8000a30:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000a32:	b2dd      	uxtb	r5, r3
 8000a34:	d120      	bne.n	8000a78 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a36:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a3e:	6813      	ldr	r3, [r2, #0]
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a46:	f7ff feff 	bl	8000848 <HAL_GetTick>
 8000a4a:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f013 0301 	ands.w	r3, r3, #1
 8000a54:	d102      	bne.n	8000a5c <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a56:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a58:	461d      	mov	r5, r3
 8000a5a:	e00b      	b.n	8000a74 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a5c:	f7ff fef4 	bl	8000848 <HAL_GetTick>
 8000a60:	1b80      	subs	r0, r0, r6
 8000a62:	280a      	cmp	r0, #10
 8000a64:	d9f2      	bls.n	8000a4c <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000a74:	4628      	mov	r0, r5
 8000a76:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a7e:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000a80:	2501      	movs	r5, #1
 8000a82:	e7f7      	b.n	8000a74 <HAL_CAN_Start+0x4c>

08000a84 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a84:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a86:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a8a:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a8c:	3d01      	subs	r5, #1
 8000a8e:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a90:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000a92:	d843      	bhi.n	8000b1c <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a94:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000a98:	d03c      	beq.n	8000b14 <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a9a:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a9e:	2c03      	cmp	r4, #3
 8000aa0:	f04f 0501 	mov.w	r5, #1
 8000aa4:	d105      	bne.n	8000ab2 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000aa6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000aa8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000aac:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000aae:	2001      	movs	r0, #1
 8000ab0:	e02a      	b.n	8000b08 <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ab2:	40a5      	lsls	r5, r4
 8000ab4:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000ab6:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000aba:	f104 0318 	add.w	r3, r4, #24
 8000abe:	bb20      	cbnz	r0, 8000b0a <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ac0:	6808      	ldr	r0, [r1, #0]
 8000ac2:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000aca:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8000ace:	690d      	ldr	r5, [r1, #16]
 8000ad0:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ad4:	7d09      	ldrb	r1, [r1, #20]
 8000ad6:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ad8:	bf08      	it	eq
 8000ada:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000ade:	ea4f 1004 	mov.w	r0, r4, lsl #4
 8000ae2:	bf04      	itt	eq
 8000ae4:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000ae8:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000aec:	4406      	add	r6, r0
 8000aee:	6851      	ldr	r1, [r2, #4]
 8000af0:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000af4:	6812      	ldr	r2, [r2, #0]
 8000af6:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000afa:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000afe:	f042 0201 	orr.w	r2, r2, #1
 8000b02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8000b06:	2000      	movs	r0, #0
  }
}
 8000b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b0a:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000b0c:	4338      	orrs	r0, r7
 8000b0e:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000b12:	e7d8      	b.n	8000ac6 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1a:	e7c7      	b.n	8000aac <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b22:	e7c3      	b.n	8000aac <HAL_CAN_AddTxMessage+0x28>

08000b24 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b24:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d805      	bhi.n	8000b3a <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000b2e:	6802      	ldr	r2, [r0, #0]
 8000b30:	6953      	ldr	r3, [r2, #20]
 8000b32:	4319      	orrs	r1, r3
 8000b34:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8000b36:	2000      	movs	r0, #0
 8000b38:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b40:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000b42:	2001      	movs	r0, #1
  }
}
 8000b44:	4770      	bx	lr
	...

08000b48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b4a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b50:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b58:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000b64:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6e:	b530      	push	{r4, r5, lr}
 8000b70:	68dc      	ldr	r4, [r3, #12]
 8000b72:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b76:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	2d04      	cmp	r5, #4
 8000b7e:	bf28      	it	cs
 8000b80:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b88:	bf8c      	ite	hi
 8000b8a:	3c03      	subhi	r4, #3
 8000b8c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8e:	fa03 f505 	lsl.w	r5, r3, r5
 8000b92:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b96:	40a3      	lsls	r3, r4
 8000b98:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	bfac      	ite	ge
 8000ba6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	4a08      	ldrlt	r2, [pc, #32]	; (8000bcc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	bfb8      	it	lt
 8000bb2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	bfaa      	itet	ge
 8000bba:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000bc4:	bd30      	pop	{r4, r5, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	e000ed14 	.word	0xe000ed14

08000bd0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	db08      	blt.n	8000be6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd4:	0942      	lsrs	r2, r0, #5
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	f000 001f 	and.w	r0, r0, #31
 8000bdc:	fa03 f000 	lsl.w	r0, r3, r0
 8000be0:	4b01      	ldr	r3, [pc, #4]	; (8000be8 <HAL_NVIC_EnableIRQ+0x18>)
 8000be2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100

08000bec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	3801      	subs	r0, #1
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d20b      	bcs.n	8000c0c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	21f0      	movs	r1, #240	; 0xf0
 8000bfe:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c02:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c04:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c06:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c08:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c0c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000c14:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c16:	b320      	cbz	r0, 8000c62 <HAL_DMA_Init+0x4e>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c18:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8000c1c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1e:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8000c20:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c22:	4323      	orrs	r3, r4
 8000c24:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000c26:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c28:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c2a:	6944      	ldr	r4, [r0, #20]
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	6984      	ldr	r4, [r0, #24]
 8000c30:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c32:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c34:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000c38:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c3c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000c3e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c40:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_DMA_Init+0x54>)
 8000c44:	2214      	movs	r2, #20
 8000c46:	440b      	add	r3, r1
 8000c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_DMA_Init+0x58>)
 8000c52:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8000c54:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000c5c:	8402      	strh	r2, [r0, #32]
  return HAL_OK;
 8000c5e:	4618      	mov	r0, r3
}  
 8000c60:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c62:	2001      	movs	r0, #1
 8000c64:	e7fc      	b.n	8000c60 <HAL_DMA_Init+0x4c>
 8000c66:	bf00      	nop
 8000c68:	bffdfff8 	.word	0xbffdfff8
 8000c6c:	40020000 	.word	0x40020000

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c74:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8000de0 <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c78:	4c57      	ldr	r4, [pc, #348]	; (8000dd8 <HAL_GPIO_Init+0x168>)
  uint32_t position = 0x00u;
 8000c7a:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c7c:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c80:	680a      	ldr	r2, [r1, #0]
 8000c82:	fa32 f503 	lsrs.w	r5, r2, r3
 8000c86:	d102      	bne.n	8000c8e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000c88:	b003      	add	sp, #12
 8000c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c8e:	2501      	movs	r5, #1
 8000c90:	fa05 fa03 	lsl.w	sl, r5, r3
    if (iocurrent != 0x00u)
 8000c94:	ea1a 0202 	ands.w	r2, sl, r2
 8000c98:	f000 8095 	beq.w	8000dc6 <HAL_GPIO_Init+0x156>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c9c:	684d      	ldr	r5, [r1, #4]
 8000c9e:	f025 0e10 	bic.w	lr, r5, #16
 8000ca2:	f1be 0f02 	cmp.w	lr, #2
 8000ca6:	d111      	bne.n	8000ccc <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3u];
 8000ca8:	08df      	lsrs	r7, r3, #3
 8000caa:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cae:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000cb2:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000cb8:	fa09 fb0c 	lsl.w	fp, r9, ip
 8000cbc:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cc0:	690e      	ldr	r6, [r1, #16]
 8000cc2:	fa06 f60c 	lsl.w	r6, r6, ip
 8000cc6:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3u] = temp;
 8000cca:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 8000ccc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cd4:	2603      	movs	r6, #3
 8000cd6:	fa06 f70c 	lsl.w	r7, r6, ip
 8000cda:	ea2b 0b07 	bic.w	fp, fp, r7
 8000cde:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce0:	f005 0703 	and.w	r7, r5, #3
 8000ce4:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce8:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cec:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf0:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8000cf4:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf6:	d811      	bhi.n	8000d1c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000cf8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cfa:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cfe:	68cf      	ldr	r7, [r1, #12]
 8000d00:	fa07 f70c 	lsl.w	r7, r7, ip
 8000d04:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000d08:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d0a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d10:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000d14:	409f      	lsls	r7, r3
 8000d16:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000d1a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d1c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d1e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d20:	688e      	ldr	r6, [r1, #8]
 8000d22:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d26:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000d28:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2a:	00ee      	lsls	r6, r5, #3
 8000d2c:	d54b      	bpl.n	8000dc6 <HAL_GPIO_Init+0x156>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000d32:	f046 0601 	orr.w	r6, r6, #1
 8000d36:	f8c8 6018 	str.w	r6, [r8, #24]
 8000d3a:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000d3e:	f023 0703 	bic.w	r7, r3, #3
 8000d42:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d46:	f006 0601 	and.w	r6, r6, #1
 8000d4a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000d4e:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d50:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d54:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d56:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d58:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d5c:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d60:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d64:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d68:	d02f      	beq.n	8000dca <HAL_GPIO_Init+0x15a>
 8000d6a:	4e1c      	ldr	r6, [pc, #112]	; (8000ddc <HAL_GPIO_Init+0x16c>)
 8000d6c:	42b0      	cmp	r0, r6
 8000d6e:	d02e      	beq.n	8000dce <HAL_GPIO_Init+0x15e>
 8000d70:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d74:	42b0      	cmp	r0, r6
 8000d76:	d02c      	beq.n	8000dd2 <HAL_GPIO_Init+0x162>
 8000d78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000d7c:	42b0      	cmp	r0, r6
 8000d7e:	bf0c      	ite	eq
 8000d80:	2603      	moveq	r6, #3
 8000d82:	2605      	movne	r6, #5
 8000d84:	fa06 f60c 	lsl.w	r6, r6, ip
 8000d88:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d8c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000d8e:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8000d90:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d92:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000d96:	bf0c      	ite	eq
 8000d98:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000d9a:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8000d9c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000d9e:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da0:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000da4:	bf0c      	ite	eq
 8000da6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000da8:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8000daa:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000dac:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dae:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000db2:	bf0c      	ite	eq
 8000db4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000db6:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8000db8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000dba:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dbc:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 8000dbe:	bf54      	ite	pl
 8000dc0:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000dc2:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8000dc4:	60e6      	str	r6, [r4, #12]
    position++;
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	e75a      	b.n	8000c80 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dca:	2600      	movs	r6, #0
 8000dcc:	e7da      	b.n	8000d84 <HAL_GPIO_Init+0x114>
 8000dce:	2601      	movs	r6, #1
 8000dd0:	e7d8      	b.n	8000d84 <HAL_GPIO_Init+0x114>
 8000dd2:	2602      	movs	r6, #2
 8000dd4:	e7d6      	b.n	8000d84 <HAL_GPIO_Init+0x114>
 8000dd6:	bf00      	nop
 8000dd8:	40010400 	.word	0x40010400
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000de4:	b10a      	cbz	r2, 8000dea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de6:	6181      	str	r1, [r0, #24]
 8000de8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dea:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000dec:	4770      	bx	lr

08000dee <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000dee:	6943      	ldr	r3, [r0, #20]
 8000df0:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000df2:	bf18      	it	ne
 8000df4:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000df6:	6181      	str	r1, [r0, #24]
  }
}
 8000df8:	4770      	bx	lr
	...

08000dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e00:	4605      	mov	r5, r0
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d035      	beq.n	8000e72 <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e06:	6803      	ldr	r3, [r0, #0]
 8000e08:	07da      	lsls	r2, r3, #31
 8000e0a:	d411      	bmi.n	8000e30 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	079b      	lsls	r3, r3, #30
 8000e10:	f100 8088 	bmi.w	8000f24 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	071c      	lsls	r4, r3, #28
 8000e18:	f100 80f8 	bmi.w	800100c <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e1c:	682b      	ldr	r3, [r5, #0]
 8000e1e:	0758      	lsls	r0, r3, #29
 8000e20:	f100 8146 	bmi.w	80010b0 <HAL_RCC_OscConfig+0x2b4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e24:	69e8      	ldr	r0, [r5, #28]
 8000e26:	2800      	cmp	r0, #0
 8000e28:	f040 81d4 	bne.w	80011d4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }

  return HAL_OK;
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e04b      	b.n	8000ec8 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e30:	4c9d      	ldr	r4, [pc, #628]	; (80010a8 <HAL_RCC_OscConfig+0x2ac>)
 8000e32:	6863      	ldr	r3, [r4, #4]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d007      	beq.n	8000e4c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e3c:	6863      	ldr	r3, [r4, #4]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d117      	bne.n	8000e76 <HAL_RCC_OscConfig+0x7a>
 8000e46:	6863      	ldr	r3, [r4, #4]
 8000e48:	03df      	lsls	r7, r3, #15
 8000e4a:	d514      	bpl.n	8000e76 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e50:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e54:	6821      	ldr	r1, [r4, #0]
 8000e56:	fa93 f3a3 	rbit	r3, r3
 8000e5a:	fab3 f383 	clz	r3, r3
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	2201      	movs	r2, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	420b      	tst	r3, r1
 8000e6a:	d0cf      	beq.n	8000e0c <HAL_RCC_OscConfig+0x10>
 8000e6c:	686b      	ldr	r3, [r5, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1cc      	bne.n	8000e0c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8000e72:	2001      	movs	r0, #1
 8000e74:	e028      	b.n	8000ec8 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e76:	686a      	ldr	r2, [r5, #4]
 8000e78:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000e7c:	d127      	bne.n	8000ece <HAL_RCC_OscConfig+0xd2>
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e84:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e88:	68a9      	ldr	r1, [r5, #8]
 8000e8a:	f023 030f 	bic.w	r3, r3, #15
 8000e8e:	430b      	orrs	r3, r1
 8000e90:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e92:	b362      	cbz	r2, 8000eee <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000e94:	f7ff fcd8 	bl	8000848 <HAL_GetTick>
 8000e98:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8000e9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	f04f 0801 	mov.w	r8, #1
 8000ea2:	fa97 f3a7 	rbit	r3, r7
 8000ea6:	6822      	ldr	r2, [r4, #0]
 8000ea8:	fa97 f3a7 	rbit	r3, r7
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	f003 031f 	and.w	r3, r3, #31
 8000eb4:	fa08 f303 	lsl.w	r3, r8, r3
 8000eb8:	4213      	tst	r3, r2
 8000eba:	d1a7      	bne.n	8000e0c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ebc:	f7ff fcc4 	bl	8000848 <HAL_GetTick>
 8000ec0:	1b83      	subs	r3, r0, r6
 8000ec2:	2b64      	cmp	r3, #100	; 0x64
 8000ec4:	d9ed      	bls.n	8000ea2 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 8000ec6:	2003      	movs	r0, #3
}
 8000ec8:	b003      	add	sp, #12
 8000eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	b932      	cbnz	r2, 8000ee0 <HAL_RCC_OscConfig+0xe4>
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed6:	6023      	str	r3, [r4, #0]
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ede:	e7d1      	b.n	8000e84 <HAL_RCC_OscConfig+0x88>
 8000ee0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000ee4:	d1f5      	bne.n	8000ed2 <HAL_RCC_OscConfig+0xd6>
 8000ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eea:	6023      	str	r3, [r4, #0]
 8000eec:	e7c7      	b.n	8000e7e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000eee:	f7ff fcab 	bl	8000848 <HAL_GetTick>
 8000ef2:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8000ef6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef8:	f04f 0801 	mov.w	r8, #1
 8000efc:	fa97 f3a7 	rbit	r3, r7
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	fa97 f3a7 	rbit	r3, r7
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	fa08 f303 	lsl.w	r3, r8, r3
 8000f12:	4213      	tst	r3, r2
 8000f14:	f43f af7a 	beq.w	8000e0c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fc96 	bl	8000848 <HAL_GetTick>
 8000f1c:	1b83      	subs	r3, r0, r6
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d9ec      	bls.n	8000efc <HAL_RCC_OscConfig+0x100>
 8000f22:	e7d0      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f24:	4c60      	ldr	r4, [pc, #384]	; (80010a8 <HAL_RCC_OscConfig+0x2ac>)
 8000f26:	6863      	ldr	r3, [r4, #4]
 8000f28:	f013 0f0c 	tst.w	r3, #12
 8000f2c:	d007      	beq.n	8000f3e <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f2e:	6863      	ldr	r3, [r4, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d121      	bne.n	8000f7c <HAL_RCC_OscConfig+0x180>
 8000f38:	6863      	ldr	r3, [r4, #4]
 8000f3a:	03de      	lsls	r6, r3, #15
 8000f3c:	d41e      	bmi.n	8000f7c <HAL_RCC_OscConfig+0x180>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f44:	6821      	ldr	r1, [r4, #0]
 8000f46:	fa93 f3a3 	rbit	r3, r3
 8000f4a:	fab3 f383 	clz	r3, r3
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2201      	movs	r2, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	420b      	tst	r3, r1
 8000f5a:	d002      	beq.n	8000f62 <HAL_RCC_OscConfig+0x166>
 8000f5c:	692b      	ldr	r3, [r5, #16]
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d187      	bne.n	8000e72 <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f62:	6821      	ldr	r1, [r4, #0]
 8000f64:	23f8      	movs	r3, #248	; 0xf8
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	fab3 f283 	clz	r2, r3
 8000f6e:	696b      	ldr	r3, [r5, #20]
 8000f70:	4093      	lsls	r3, r2
 8000f72:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000f76:	4313      	orrs	r3, r2
 8000f78:	6023      	str	r3, [r4, #0]
 8000f7a:	e74b      	b.n	8000e14 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f7c:	692a      	ldr	r2, [r5, #16]
 8000f7e:	2601      	movs	r6, #1
 8000f80:	b30a      	cbz	r2, 8000fc6 <HAL_RCC_OscConfig+0x1ca>
 8000f82:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000f86:	fab3 f383 	clz	r3, r3
 8000f8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	f04f 0802 	mov.w	r8, #2
 8000f98:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fc55 	bl	8000848 <HAL_GetTick>
 8000f9e:	4607      	mov	r7, r0
 8000fa0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa4:	6822      	ldr	r2, [r4, #0]
 8000fa6:	fa98 f3a8 	rbit	r3, r8
 8000faa:	fab3 f383 	clz	r3, r3
 8000fae:	f003 031f 	and.w	r3, r3, #31
 8000fb2:	fa06 f303 	lsl.w	r3, r6, r3
 8000fb6:	4213      	tst	r3, r2
 8000fb8:	d1d3      	bne.n	8000f62 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fba:	f7ff fc45 	bl	8000848 <HAL_GetTick>
 8000fbe:	1bc3      	subs	r3, r0, r7
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d9ed      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x1a4>
 8000fc4:	e77f      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
 8000fc6:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000fca:	fab3 f383 	clz	r3, r3
 8000fce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	f04f 0802 	mov.w	r8, #2
 8000fdc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fde:	f7ff fc33 	bl	8000848 <HAL_GetTick>
 8000fe2:	4607      	mov	r7, r0
 8000fe4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe8:	6822      	ldr	r2, [r4, #0]
 8000fea:	fa98 f3a8 	rbit	r3, r8
 8000fee:	fab3 f383 	clz	r3, r3
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	fa06 f303 	lsl.w	r3, r6, r3
 8000ffa:	4213      	tst	r3, r2
 8000ffc:	f43f af0a 	beq.w	8000e14 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001000:	f7ff fc22 	bl	8000848 <HAL_GetTick>
 8001004:	1bc3      	subs	r3, r0, r7
 8001006:	2b02      	cmp	r3, #2
 8001008:	d9ec      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x1e8>
 800100a:	e75c      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800100c:	69aa      	ldr	r2, [r5, #24]
 800100e:	4e26      	ldr	r6, [pc, #152]	; (80010a8 <HAL_RCC_OscConfig+0x2ac>)
 8001010:	4926      	ldr	r1, [pc, #152]	; (80010ac <HAL_RCC_OscConfig+0x2b0>)
 8001012:	2401      	movs	r4, #1
 8001014:	b31a      	cbz	r2, 800105e <HAL_RCC_OscConfig+0x262>
 8001016:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800101a:	fab3 f383 	clz	r3, r3
 800101e:	440b      	add	r3, r1
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	2702      	movs	r7, #2
 8001024:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8001026:	f7ff fc0f 	bl	8000848 <HAL_GetTick>
 800102a:	4680      	mov	r8, r0
 800102c:	fa97 f3a7 	rbit	r3, r7
 8001030:	fa97 f3a7 	rbit	r3, r7
 8001034:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001038:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800103a:	fa97 f3a7 	rbit	r3, r7
 800103e:	fab3 f383 	clz	r3, r3
 8001042:	f003 031f 	and.w	r3, r3, #31
 8001046:	fa04 f303 	lsl.w	r3, r4, r3
 800104a:	4213      	tst	r3, r2
 800104c:	f47f aee6 	bne.w	8000e1c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001050:	f7ff fbfa 	bl	8000848 <HAL_GetTick>
 8001054:	eba0 0308 	sub.w	r3, r0, r8
 8001058:	2b02      	cmp	r3, #2
 800105a:	d9e7      	bls.n	800102c <HAL_RCC_OscConfig+0x230>
 800105c:	e733      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
 800105e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001062:	fab3 f383 	clz	r3, r3
 8001066:	440b      	add	r3, r1
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	2702      	movs	r7, #2
 800106c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800106e:	f7ff fbeb 	bl	8000848 <HAL_GetTick>
 8001072:	4680      	mov	r8, r0
 8001074:	fa97 f3a7 	rbit	r3, r7
 8001078:	fa97 f3a7 	rbit	r3, r7
 800107c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001080:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001082:	fa97 f3a7 	rbit	r3, r7
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	fa04 f303 	lsl.w	r3, r4, r3
 8001092:	4213      	tst	r3, r2
 8001094:	f43f aec2 	beq.w	8000e1c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001098:	f7ff fbd6 	bl	8000848 <HAL_GetTick>
 800109c:	eba0 0308 	sub.w	r3, r0, r8
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d9e7      	bls.n	8001074 <HAL_RCC_OscConfig+0x278>
 80010a4:	e70f      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010b0:	4c91      	ldr	r4, [pc, #580]	; (80012f8 <HAL_RCC_OscConfig+0x4fc>)
 80010b2:	69e3      	ldr	r3, [r4, #28]
 80010b4:	00d9      	lsls	r1, r3, #3
 80010b6:	d433      	bmi.n	8001120 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	69e3      	ldr	r3, [r4, #28]
 80010ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010be:	61e3      	str	r3, [r4, #28]
 80010c0:	69e3      	ldr	r3, [r4, #28]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010ca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010cc:	4f8b      	ldr	r7, [pc, #556]	; (80012fc <HAL_RCC_OscConfig+0x500>)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	05da      	lsls	r2, r3, #23
 80010d2:	d527      	bpl.n	8001124 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d4:	68eb      	ldr	r3, [r5, #12]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d135      	bne.n	8001146 <HAL_RCC_OscConfig+0x34a>
 80010da:	6a23      	ldr	r3, [r4, #32]
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010e2:	f7ff fbb1 	bl	8000848 <HAL_GetTick>
 80010e6:	2702      	movs	r7, #2
 80010e8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ea:	f04f 0901 	mov.w	r9, #1
 80010ee:	fa97 f3a7 	rbit	r3, r7
 80010f2:	fa97 f3a7 	rbit	r3, r7
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d064      	beq.n	80011c4 <HAL_RCC_OscConfig+0x3c8>
 80010fa:	6a22      	ldr	r2, [r4, #32]
 80010fc:	fa97 f3a7 	rbit	r3, r7
 8001100:	fab3 f383 	clz	r3, r3
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	fa09 f303 	lsl.w	r3, r9, r3
 800110c:	4213      	tst	r3, r2
 800110e:	d050      	beq.n	80011b2 <HAL_RCC_OscConfig+0x3b6>
    if(pwrclkchanged == SET)
 8001110:	2e00      	cmp	r6, #0
 8001112:	f43f ae87 	beq.w	8000e24 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001116:	69e3      	ldr	r3, [r4, #28]
 8001118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800111c:	61e3      	str	r3, [r4, #28]
 800111e:	e681      	b.n	8000e24 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001120:	2600      	movs	r6, #0
 8001122:	e7d3      	b.n	80010cc <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800112c:	f7ff fb8c 	bl	8000848 <HAL_GetTick>
 8001130:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	d4cd      	bmi.n	80010d4 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001138:	f7ff fb86 	bl	8000848 <HAL_GetTick>
 800113c:	eba0 0008 	sub.w	r0, r0, r8
 8001140:	2864      	cmp	r0, #100	; 0x64
 8001142:	d9f6      	bls.n	8001132 <HAL_RCC_OscConfig+0x336>
 8001144:	e6bf      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001146:	bb33      	cbnz	r3, 8001196 <HAL_RCC_OscConfig+0x39a>
 8001148:	6a23      	ldr	r3, [r4, #32]
 800114a:	f023 0301 	bic.w	r3, r3, #1
 800114e:	6223      	str	r3, [r4, #32]
 8001150:	6a23      	ldr	r3, [r4, #32]
 8001152:	f023 0304 	bic.w	r3, r3, #4
 8001156:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001158:	f7ff fb76 	bl	8000848 <HAL_GetTick>
 800115c:	2702      	movs	r7, #2
 800115e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001160:	f04f 0901 	mov.w	r9, #1
 8001164:	fa97 f3a7 	rbit	r3, r7
 8001168:	fa97 f3a7 	rbit	r3, r7
 800116c:	b373      	cbz	r3, 80011cc <HAL_RCC_OscConfig+0x3d0>
 800116e:	6a22      	ldr	r2, [r4, #32]
 8001170:	fa97 f3a7 	rbit	r3, r7
 8001174:	fab3 f383 	clz	r3, r3
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	fa09 f303 	lsl.w	r3, r9, r3
 8001180:	4213      	tst	r3, r2
 8001182:	d0c5      	beq.n	8001110 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001184:	f7ff fb60 	bl	8000848 <HAL_GetTick>
 8001188:	f241 3388 	movw	r3, #5000	; 0x1388
 800118c:	eba0 0008 	sub.w	r0, r0, r8
 8001190:	4298      	cmp	r0, r3
 8001192:	d9e7      	bls.n	8001164 <HAL_RCC_OscConfig+0x368>
 8001194:	e697      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001196:	2b05      	cmp	r3, #5
 8001198:	6a23      	ldr	r3, [r4, #32]
 800119a:	d103      	bne.n	80011a4 <HAL_RCC_OscConfig+0x3a8>
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6223      	str	r3, [r4, #32]
 80011a2:	e79a      	b.n	80010da <HAL_RCC_OscConfig+0x2de>
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	6223      	str	r3, [r4, #32]
 80011aa:	6a23      	ldr	r3, [r4, #32]
 80011ac:	f023 0304 	bic.w	r3, r3, #4
 80011b0:	e796      	b.n	80010e0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fb49 	bl	8000848 <HAL_GetTick>
 80011b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80011ba:	eba0 0008 	sub.w	r0, r0, r8
 80011be:	4298      	cmp	r0, r3
 80011c0:	d995      	bls.n	80010ee <HAL_RCC_OscConfig+0x2f2>
 80011c2:	e680      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
 80011c4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011ca:	e797      	b.n	80010fc <HAL_RCC_OscConfig+0x300>
 80011cc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011d2:	e7cd      	b.n	8001170 <HAL_RCC_OscConfig+0x374>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d4:	4c48      	ldr	r4, [pc, #288]	; (80012f8 <HAL_RCC_OscConfig+0x4fc>)
 80011d6:	6863      	ldr	r3, [r4, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d07a      	beq.n	80012d6 <HAL_RCC_OscConfig+0x4da>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e0:	2802      	cmp	r0, #2
 80011e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011e6:	d151      	bne.n	800128c <HAL_RCC_OscConfig+0x490>
 80011e8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80011ec:	fab3 f383 	clz	r3, r3
 80011f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011fe:	f7ff fb23 	bl	8000848 <HAL_GetTick>
 8001202:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8001206:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001208:	2601      	movs	r6, #1
 800120a:	fa98 f3a8 	rbit	r3, r8
 800120e:	6822      	ldr	r2, [r4, #0]
 8001210:	fa98 f3a8 	rbit	r3, r8
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	fa06 f303 	lsl.w	r3, r6, r3
 8001220:	4213      	tst	r3, r2
 8001222:	d12d      	bne.n	8001280 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001224:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8001228:	6862      	ldr	r2, [r4, #4]
 800122a:	430b      	orrs	r3, r1
 800122c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001230:	4313      	orrs	r3, r2
 8001232:	6063      	str	r3, [r4, #4]
 8001234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001238:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001244:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001248:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124a:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 800124c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800124e:	f7ff fafb 	bl	8000848 <HAL_GetTick>
 8001252:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001256:	4605      	mov	r5, r0
 8001258:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800125c:	6822      	ldr	r2, [r4, #0]
 800125e:	fa96 f3a6 	rbit	r3, r6
 8001262:	fab3 f383 	clz	r3, r3
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	fa07 f303 	lsl.w	r3, r7, r3
 800126e:	4213      	tst	r3, r2
 8001270:	f47f addc 	bne.w	8000e2c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fae8 	bl	8000848 <HAL_GetTick>
 8001278:	1b40      	subs	r0, r0, r5
 800127a:	2802      	cmp	r0, #2
 800127c:	d9ec      	bls.n	8001258 <HAL_RCC_OscConfig+0x45c>
 800127e:	e622      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff fae2 	bl	8000848 <HAL_GetTick>
 8001284:	1bc3      	subs	r3, r0, r7
 8001286:	2b02      	cmp	r3, #2
 8001288:	d9bf      	bls.n	800120a <HAL_RCC_OscConfig+0x40e>
 800128a:	e61c      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
 800128c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001298:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012a2:	f7ff fad1 	bl	8000848 <HAL_GetTick>
 80012a6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80012aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ac:	2701      	movs	r7, #1
 80012ae:	fa96 f3a6 	rbit	r3, r6
 80012b2:	6822      	ldr	r2, [r4, #0]
 80012b4:	fa96 f3a6 	rbit	r3, r6
 80012b8:	fab3 f383 	clz	r3, r3
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	fa07 f303 	lsl.w	r3, r7, r3
 80012c4:	4213      	tst	r3, r2
 80012c6:	f43f adb1 	beq.w	8000e2c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ca:	f7ff fabd 	bl	8000848 <HAL_GetTick>
 80012ce:	1b40      	subs	r0, r0, r5
 80012d0:	2802      	cmp	r0, #2
 80012d2:	d9ec      	bls.n	80012ae <HAL_RCC_OscConfig+0x4b2>
 80012d4:	e5f7      	b.n	8000ec6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d6:	2801      	cmp	r0, #1
 80012d8:	f43f adf6 	beq.w	8000ec8 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 80012dc:	6863      	ldr	r3, [r4, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80012de:	6a2a      	ldr	r2, [r5, #32]
 80012e0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80012e4:	4291      	cmp	r1, r2
 80012e6:	f47f adc4 	bne.w	8000e72 <HAL_RCC_OscConfig+0x76>
 80012ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80012ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80012f0:	4293      	cmp	r3, r2
 80012f2:	f43f ad9b 	beq.w	8000e2c <HAL_RCC_OscConfig+0x30>
 80012f6:	e5bc      	b.n	8000e72 <HAL_RCC_OscConfig+0x76>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001300:	b530      	push	{r4, r5, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001302:	4d13      	ldr	r5, [pc, #76]	; (8001350 <HAL_RCC_GetSysClockFreq+0x50>)
 8001304:	686c      	ldr	r4, [r5, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001306:	f004 030c 	and.w	r3, r4, #12
 800130a:	2b08      	cmp	r3, #8
 800130c:	d11e      	bne.n	800134c <HAL_RCC_GetSysClockFreq+0x4c>
 800130e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001312:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001316:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	490c      	ldr	r1, [pc, #48]	; (8001354 <HAL_RCC_GetSysClockFreq+0x54>)
 8001324:	220f      	movs	r2, #15
 8001326:	5cc8      	ldrb	r0, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001328:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800132a:	fa92 f2a2 	rbit	r2, r2
 800132e:	fab2 f282 	clz	r2, r2
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	40d3      	lsrs	r3, r2
 8001338:	440b      	add	r3, r1
 800133a:	7c1a      	ldrb	r2, [r3, #16]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800133c:	03e3      	lsls	r3, r4, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800133e:	bf4a      	itet	mi
 8001340:	4b05      	ldrmi	r3, [pc, #20]	; (8001358 <HAL_RCC_GetSysClockFreq+0x58>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001342:	4b06      	ldrpl	r3, [pc, #24]	; (800135c <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001344:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001348:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800134a:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800134e:	e7fc      	b.n	800134a <HAL_RCC_GetSysClockFreq+0x4a>
 8001350:	40021000 	.word	0x40021000
 8001354:	08001a6c 	.word	0x08001a6c
 8001358:	007a1200 	.word	0x007a1200
 800135c:	003d0900 	.word	0x003d0900

08001360 <HAL_RCC_ClockConfig>:
{
 8001360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001364:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001366:	4604      	mov	r4, r0
 8001368:	b910      	cbnz	r0, 8001370 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800136a:	2001      	movs	r0, #1
}
 800136c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001370:	4a4c      	ldr	r2, [pc, #304]	; (80014a4 <HAL_RCC_ClockConfig+0x144>)
 8001372:	6813      	ldr	r3, [r2, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	428b      	cmp	r3, r1
 800137a:	d32e      	bcc.n	80013da <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800137c:	6822      	ldr	r2, [r4, #0]
 800137e:	0791      	lsls	r1, r2, #30
 8001380:	d436      	bmi.n	80013f0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001382:	07d2      	lsls	r2, r2, #31
 8001384:	d43c      	bmi.n	8001400 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001386:	4a47      	ldr	r2, [pc, #284]	; (80014a4 <HAL_RCC_ClockConfig+0x144>)
 8001388:	6813      	ldr	r3, [r2, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	42ab      	cmp	r3, r5
 8001390:	d874      	bhi.n	800147c <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001392:	6822      	ldr	r2, [r4, #0]
 8001394:	4d44      	ldr	r5, [pc, #272]	; (80014a8 <HAL_RCC_ClockConfig+0x148>)
 8001396:	f012 0f04 	tst.w	r2, #4
 800139a:	d17b      	bne.n	8001494 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800139c:	0713      	lsls	r3, r2, #28
 800139e:	d506      	bpl.n	80013ae <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013a0:	686b      	ldr	r3, [r5, #4]
 80013a2:	6922      	ldr	r2, [r4, #16]
 80013a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013a8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013ac:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013ae:	f7ff ffa7 	bl	8001300 <HAL_RCC_GetSysClockFreq>
 80013b2:	686b      	ldr	r3, [r5, #4]
 80013b4:	22f0      	movs	r2, #240	; 0xf0
 80013b6:	fa92 f2a2 	rbit	r2, r2
 80013ba:	fab2 f282 	clz	r2, r2
 80013be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c2:	40d3      	lsrs	r3, r2
 80013c4:	4a39      	ldr	r2, [pc, #228]	; (80014ac <HAL_RCC_ClockConfig+0x14c>)
 80013c6:	5cd3      	ldrb	r3, [r2, r3]
 80013c8:	40d8      	lsrs	r0, r3
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_RCC_ClockConfig+0x150>)
 80013cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80013ce:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_RCC_ClockConfig+0x154>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	f7ff f9f9 	bl	80007c8 <HAL_InitTick>
  return HAL_OK;
 80013d6:	2000      	movs	r0, #0
 80013d8:	e7c8      	b.n	800136c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	f023 0307 	bic.w	r3, r3, #7
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e4:	6813      	ldr	r3, [r2, #0]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	428b      	cmp	r3, r1
 80013ec:	d1bd      	bne.n	800136a <HAL_RCC_ClockConfig+0xa>
 80013ee:	e7c5      	b.n	800137c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f0:	492d      	ldr	r1, [pc, #180]	; (80014a8 <HAL_RCC_ClockConfig+0x148>)
 80013f2:	68a0      	ldr	r0, [r4, #8]
 80013f4:	684b      	ldr	r3, [r1, #4]
 80013f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013fa:	4303      	orrs	r3, r0
 80013fc:	604b      	str	r3, [r1, #4]
 80013fe:	e7c0      	b.n	8001382 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001400:	6862      	ldr	r2, [r4, #4]
 8001402:	4e29      	ldr	r6, [pc, #164]	; (80014a8 <HAL_RCC_ClockConfig+0x148>)
 8001404:	2a01      	cmp	r2, #1
 8001406:	d126      	bne.n	8001456 <HAL_RCC_ClockConfig+0xf6>
 8001408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001410:	6831      	ldr	r1, [r6, #0]
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	d0a1      	beq.n	800136a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001426:	6873      	ldr	r3, [r6, #4]
 8001428:	f023 0303 	bic.w	r3, r3, #3
 800142c:	431a      	orrs	r2, r3
 800142e:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001430:	f7ff fa0a 	bl	8000848 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001434:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001438:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143a:	6873      	ldr	r3, [r6, #4]
 800143c:	6862      	ldr	r2, [r4, #4]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001446:	d09e      	beq.n	8001386 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001448:	f7ff f9fe 	bl	8000848 <HAL_GetTick>
 800144c:	1bc0      	subs	r0, r0, r7
 800144e:	4540      	cmp	r0, r8
 8001450:	d9f3      	bls.n	800143a <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001452:	2003      	movs	r0, #3
 8001454:	e78a      	b.n	800136c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001456:	2a02      	cmp	r2, #2
 8001458:	bf0c      	ite	eq
 800145a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800145e:	2302      	movne	r3, #2
 8001460:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	6830      	ldr	r0, [r6, #0]
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	fab3 f383 	clz	r3, r3
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	4203      	tst	r3, r0
 800147a:	e7d3      	b.n	8001424 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	f023 0307 	bic.w	r3, r3, #7
 8001482:	432b      	orrs	r3, r5
 8001484:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	42ab      	cmp	r3, r5
 800148e:	f47f af6c 	bne.w	800136a <HAL_RCC_ClockConfig+0xa>
 8001492:	e77e      	b.n	8001392 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001494:	686b      	ldr	r3, [r5, #4]
 8001496:	68e1      	ldr	r1, [r4, #12]
 8001498:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800149c:	430b      	orrs	r3, r1
 800149e:	606b      	str	r3, [r5, #4]
 80014a0:	e77c      	b.n	800139c <HAL_RCC_ClockConfig+0x3c>
 80014a2:	bf00      	nop
 80014a4:	40022000 	.word	0x40022000
 80014a8:	40021000 	.word	0x40021000
 80014ac:	08001a54 	.word	0x08001a54
 80014b0:	20000004 	.word	0x20000004
 80014b4:	2000000c 	.word	0x2000000c

080014b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	fa92 f2a2 	rbit	r2, r2
 80014c4:	fab2 f282 	clz	r2, r2
 80014c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014cc:	40d3      	lsrs	r3, r2
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80014d4:	6810      	ldr	r0, [r2, #0]
}    
 80014d6:	40d8      	lsrs	r0, r3
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	08001a64 	.word	0x08001a64
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	fa92 f2a2 	rbit	r2, r2
 80014f4:	fab2 f282 	clz	r2, r2
 80014f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80014fc:	40d3      	lsrs	r3, r2
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001500:	5cd3      	ldrb	r3, [r2, r3]
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001504:	6810      	ldr	r0, [r2, #0]
} 
 8001506:	40d8      	lsrs	r0, r3
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	08001a64 	.word	0x08001a64
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001518:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800151a:	2b20      	cmp	r3, #32
{
 800151c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800151e:	d14c      	bne.n	80015ba <HAL_UART_Receive_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001520:	2900      	cmp	r1, #0
 8001522:	d048      	beq.n	80015b6 <HAL_UART_Receive_IT+0x9e>
 8001524:	2a00      	cmp	r2, #0
 8001526:	d046      	beq.n	80015b6 <HAL_UART_Receive_IT+0x9e>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8001528:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800152c:	2b01      	cmp	r3, #1
 800152e:	d044      	beq.n	80015ba <HAL_UART_Receive_IT+0xa2>
 8001530:	2301      	movs	r3, #1
 8001532:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxXferSize  = Size;
    huart->RxXferCount = Size;
    huart->RxISR       = NULL;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001536:	6883      	ldr	r3, [r0, #8]
    huart->RxXferSize  = Size;
 8001538:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800153c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 8001544:	f04f 0200 	mov.w	r2, #0
    huart->pRxBuffPtr  = pData;
 8001548:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxISR       = NULL;
 800154a:	6602      	str	r2, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800154c:	d123      	bne.n	8001596 <HAL_UART_Receive_IT+0x7e>
 800154e:	6902      	ldr	r2, [r0, #16]
 8001550:	b9fa      	cbnz	r2, 8001592 <HAL_UART_Receive_IT+0x7a>
 8001552:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001556:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800155a:	2200      	movs	r2, #0
 800155c:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800155e:	2222      	movs	r2, #34	; 0x22
 8001560:	6782      	str	r2, [r0, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001562:	6802      	ldr	r2, [r0, #0]
 8001564:	6891      	ldr	r1, [r2, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800156a:	f041 0101 	orr.w	r1, r1, #1
 800156e:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001570:	d11f      	bne.n	80015b2 <HAL_UART_Receive_IT+0x9a>
 8001572:	6904      	ldr	r4, [r0, #16]
    {
      huart->RxISR = UART_RxISR_16BIT;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_UART_Receive_IT+0xa8>)
 8001576:	4913      	ldr	r1, [pc, #76]	; (80015c4 <HAL_UART_Receive_IT+0xac>)
 8001578:	2c00      	cmp	r4, #0
 800157a:	bf08      	it	eq
 800157c:	460b      	moveq	r3, r1
 800157e:	6603      	str	r3, [r0, #96]	; 0x60
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
    }

    __HAL_UNLOCK(huart);
 8001580:	2300      	movs	r3, #0
 8001582:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001586:	6811      	ldr	r1, [r2, #0]
 8001588:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 800158c:	6011      	str	r1, [r2, #0]

    return HAL_OK;
 800158e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001590:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8001592:	22ff      	movs	r2, #255	; 0xff
 8001594:	e7df      	b.n	8001556 <HAL_UART_Receive_IT+0x3e>
 8001596:	b923      	cbnz	r3, 80015a2 <HAL_UART_Receive_IT+0x8a>
 8001598:	6902      	ldr	r2, [r0, #16]
 800159a:	2a00      	cmp	r2, #0
 800159c:	d0f9      	beq.n	8001592 <HAL_UART_Receive_IT+0x7a>
 800159e:	227f      	movs	r2, #127	; 0x7f
 80015a0:	e7d9      	b.n	8001556 <HAL_UART_Receive_IT+0x3e>
 80015a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015a6:	d1d6      	bne.n	8001556 <HAL_UART_Receive_IT+0x3e>
 80015a8:	6902      	ldr	r2, [r0, #16]
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	d0f7      	beq.n	800159e <HAL_UART_Receive_IT+0x86>
 80015ae:	223f      	movs	r2, #63	; 0x3f
 80015b0:	e7d1      	b.n	8001556 <HAL_UART_Receive_IT+0x3e>
      huart->RxISR = UART_RxISR_8BIT;
 80015b2:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_UART_Receive_IT+0xa8>)
 80015b4:	e7e3      	b.n	800157e <HAL_UART_Receive_IT+0x66>
      return HAL_ERROR;
 80015b6:	2001      	movs	r0, #1
 80015b8:	e7ea      	b.n	8001590 <HAL_UART_Receive_IT+0x78>
    return HAL_BUSY;
 80015ba:	2002      	movs	r0, #2
 80015bc:	e7e8      	b.n	8001590 <HAL_UART_Receive_IT+0x78>
 80015be:	bf00      	nop
 80015c0:	080015c9 	.word	0x080015c9
 80015c4:	08001621 	.word	0x08001621

080015c8 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80015c8:	6f81      	ldr	r1, [r0, #120]	; 0x78
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80015ca:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80015cc:	2922      	cmp	r1, #34	; 0x22
{
 80015ce:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80015d0:	d121      	bne.n	8001616 <UART_RxISR_8BIT+0x4e>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80015d2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80015d4:	f8b0 405c 	ldrh.w	r4, [r0, #92]	; 0x5c
 80015d8:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80015da:	4022      	ands	r2, r4
 80015dc:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 80015de:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80015e0:	3201      	adds	r2, #1
 80015e2:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80015e4:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80015e8:	3a01      	subs	r2, #1
 80015ea:	b292      	uxth	r2, r2
 80015ec:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80015f0:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80015f4:	b292      	uxth	r2, r2
 80015f6:	b96a      	cbnz	r2, 8001614 <UART_RxISR_8BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015f8:	6801      	ldr	r1, [r0, #0]
 80015fa:	680c      	ldr	r4, [r1, #0]
 80015fc:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8001600:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001602:	688c      	ldr	r4, [r1, #8]
 8001604:	f024 0401 	bic.w	r4, r4, #1
 8001608:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800160a:	2120      	movs	r1, #32
 800160c:	6781      	str	r1, [r0, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800160e:	6602      	str	r2, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001610:	f7fe ff72 	bl	80004f8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001614:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001616:	6993      	ldr	r3, [r2, #24]
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6193      	str	r3, [r2, #24]
}
 800161e:	e7f9      	b.n	8001614 <UART_RxISR_8BIT+0x4c>

08001620 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001620:	6f81      	ldr	r1, [r0, #120]	; 0x78
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001622:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001624:	2922      	cmp	r1, #34	; 0x22
{
 8001626:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001628:	d11f      	bne.n	800166a <UART_RxISR_16BIT+0x4a>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800162a:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 800162c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8001630:	400c      	ands	r4, r1
 8001632:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001634:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 8001638:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800163a:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 800163e:	3901      	subs	r1, #1
 8001640:	b289      	uxth	r1, r1
 8001642:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8001646:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 800164a:	b289      	uxth	r1, r1
 800164c:	b961      	cbnz	r1, 8001668 <UART_RxISR_16BIT+0x48>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800164e:	6814      	ldr	r4, [r2, #0]
 8001650:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8001654:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001656:	6894      	ldr	r4, [r2, #8]
 8001658:	f024 0401 	bic.w	r4, r4, #1
 800165c:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800165e:	2220      	movs	r2, #32
 8001660:	6782      	str	r2, [r0, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001662:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001664:	f7fe ff48 	bl	80004f8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001668:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800166a:	6993      	ldr	r3, [r2, #24]
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6193      	str	r3, [r2, #24]
}
 8001672:	e7f9      	b.n	8001668 <UART_RxISR_16BIT+0x48>

08001674 <UART_SetConfig>:
{
 8001674:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001676:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001678:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800167a:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800167c:	681d      	ldr	r5, [r3, #0]
{
 800167e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001680:	6900      	ldr	r0, [r0, #16]
 8001682:	4302      	orrs	r2, r0
 8001684:	6960      	ldr	r0, [r4, #20]
 8001686:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001688:	4855      	ldr	r0, [pc, #340]	; (80017e0 <UART_SetConfig+0x16c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800168a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800168c:	4028      	ands	r0, r5
 800168e:	4302      	orrs	r2, r0
 8001690:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8001696:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001698:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800169c:	4302      	orrs	r2, r0
 800169e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016a0:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80016a2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016a4:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80016a8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016aa:	4302      	orrs	r2, r0
 80016ac:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016ae:	4a4d      	ldr	r2, [pc, #308]	; (80017e4 <UART_SetConfig+0x170>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d114      	bne.n	80016de <UART_SetConfig+0x6a>
 80016b4:	4b4c      	ldr	r3, [pc, #304]	; (80017e8 <UART_SetConfig+0x174>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	3b01      	subs	r3, #1
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d814      	bhi.n	80016ec <UART_SetConfig+0x78>
 80016c2:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <UART_SetConfig+0x178>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016c4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	d158      	bne.n	800177e <UART_SetConfig+0x10a>
    switch (clocksource)
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d84b      	bhi.n	8001768 <UART_SetConfig+0xf4>
 80016d0:	e8df f003 	tbb	[pc, r3]
 80016d4:	4a393621 	.word	0x4a393621
 80016d8:	4a4a4a42 	.word	0x4a4a4a42
 80016dc:	45          	.byte	0x45
 80016dd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016de:	4a44      	ldr	r2, [pc, #272]	; (80017f0 <UART_SetConfig+0x17c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d003      	beq.n	80016ec <UART_SetConfig+0x78>
 80016e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d173      	bne.n	80017d4 <UART_SetConfig+0x160>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016ec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80016f0:	d011      	beq.n	8001716 <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80016f2:	f7ff fee1 	bl	80014b8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016f6:	6863      	ldr	r3, [r4, #4]
 80016f8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80016fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001700:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001702:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001704:	f1a3 0110 	sub.w	r1, r3, #16
 8001708:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800170c:	4291      	cmp	r1, r2
 800170e:	d812      	bhi.n	8001736 <UART_SetConfig+0xc2>
      huart->Instance->BRR = usartdiv;
 8001710:	6822      	ldr	r2, [r4, #0]
 8001712:	60d3      	str	r3, [r2, #12]
 8001714:	e010      	b.n	8001738 <UART_SetConfig+0xc4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001716:	f7ff fecf 	bl	80014b8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800171a:	6863      	ldr	r3, [r4, #4]
 800171c:	085a      	lsrs	r2, r3, #1
 800171e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8001722:	fbb0 f3f3 	udiv	r3, r0, r3
 8001726:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001728:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800172a:	f1a3 0110 	sub.w	r1, r3, #16
 800172e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001732:	4291      	cmp	r1, r2
 8001734:	d91b      	bls.n	800176e <UART_SetConfig+0xfa>
      ret = HAL_ERROR;
 8001736:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8001738:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800173a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800173e:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8001740:	f7ff fed2 	bl	80014e8 <HAL_RCC_GetPCLK2Freq>
 8001744:	e7e9      	b.n	800171a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001746:	6862      	ldr	r2, [r4, #4]
 8001748:	0853      	lsrs	r3, r2, #1
 800174a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800174e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001752:	fbb3 f3f2 	udiv	r3, r3, r2
 8001756:	e7e6      	b.n	8001726 <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetSysClockFreq();
 8001758:	f7ff fdd2 	bl	8001300 <HAL_RCC_GetSysClockFreq>
 800175c:	e7dd      	b.n	800171a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800175e:	6862      	ldr	r2, [r4, #4]
 8001760:	0853      	lsrs	r3, r2, #1
 8001762:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001766:	e7f4      	b.n	8001752 <UART_SetConfig+0xde>
        ret = HAL_ERROR;
 8001768:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800176a:	2300      	movs	r3, #0
 800176c:	e7dd      	b.n	800172a <UART_SetConfig+0xb6>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800176e:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8001772:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001774:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001778:	4313      	orrs	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
 800177c:	e7dc      	b.n	8001738 <UART_SetConfig+0xc4>
    switch (clocksource)
 800177e:	2b08      	cmp	r3, #8
 8001780:	d82b      	bhi.n	80017da <UART_SetConfig+0x166>
 8001782:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <UART_SetConfig+0x114>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	080016f3 	.word	0x080016f3
 800178c:	080017ad 	.word	0x080017ad
 8001790:	080017b3 	.word	0x080017b3
 8001794:	080017db 	.word	0x080017db
 8001798:	080017c5 	.word	0x080017c5
 800179c:	080017db 	.word	0x080017db
 80017a0:	080017db 	.word	0x080017db
 80017a4:	080017db 	.word	0x080017db
 80017a8:	080017cb 	.word	0x080017cb
        pclk = HAL_RCC_GetPCLK2Freq();
 80017ac:	f7ff fe9c 	bl	80014e8 <HAL_RCC_GetPCLK2Freq>
 80017b0:	e7a1      	b.n	80016f6 <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80017b2:	6862      	ldr	r2, [r4, #4]
 80017b4:	0853      	lsrs	r3, r2, #1
 80017b6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80017ba:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80017be:	fbb3 f3f2 	udiv	r3, r3, r2
 80017c2:	e79d      	b.n	8001700 <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetSysClockFreq();
 80017c4:	f7ff fd9c 	bl	8001300 <HAL_RCC_GetSysClockFreq>
 80017c8:	e795      	b.n	80016f6 <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80017ca:	6862      	ldr	r2, [r4, #4]
 80017cc:	0853      	lsrs	r3, r2, #1
 80017ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017d2:	e7f4      	b.n	80017be <UART_SetConfig+0x14a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80017d8:	d0c6      	beq.n	8001768 <UART_SetConfig+0xf4>
    switch (clocksource)
 80017da:	2001      	movs	r0, #1
 80017dc:	2300      	movs	r3, #0
 80017de:	e791      	b.n	8001704 <UART_SetConfig+0x90>
 80017e0:	efff69f3 	.word	0xefff69f3
 80017e4:	40013800 	.word	0x40013800
 80017e8:	40021000 	.word	0x40021000
 80017ec:	08001a8c 	.word	0x08001a8c
 80017f0:	40004400 	.word	0x40004400

080017f4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017f6:	07da      	lsls	r2, r3, #31
{
 80017f8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017fa:	d506      	bpl.n	800180a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80017fc:	6801      	ldr	r1, [r0, #0]
 80017fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001800:	684a      	ldr	r2, [r1, #4]
 8001802:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001806:	4322      	orrs	r2, r4
 8001808:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800180a:	079c      	lsls	r4, r3, #30
 800180c:	d506      	bpl.n	800181c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800180e:	6801      	ldr	r1, [r0, #0]
 8001810:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001812:	684a      	ldr	r2, [r1, #4]
 8001814:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001818:	4322      	orrs	r2, r4
 800181a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800181c:	0759      	lsls	r1, r3, #29
 800181e:	d506      	bpl.n	800182e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001820:	6801      	ldr	r1, [r0, #0]
 8001822:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001824:	684a      	ldr	r2, [r1, #4]
 8001826:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800182a:	4322      	orrs	r2, r4
 800182c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800182e:	071a      	lsls	r2, r3, #28
 8001830:	d506      	bpl.n	8001840 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001832:	6801      	ldr	r1, [r0, #0]
 8001834:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001836:	684a      	ldr	r2, [r1, #4]
 8001838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800183c:	4322      	orrs	r2, r4
 800183e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001840:	06dc      	lsls	r4, r3, #27
 8001842:	d506      	bpl.n	8001852 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001844:	6801      	ldr	r1, [r0, #0]
 8001846:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001848:	688a      	ldr	r2, [r1, #8]
 800184a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800184e:	4322      	orrs	r2, r4
 8001850:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001852:	0699      	lsls	r1, r3, #26
 8001854:	d506      	bpl.n	8001864 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001856:	6801      	ldr	r1, [r0, #0]
 8001858:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800185a:	688a      	ldr	r2, [r1, #8]
 800185c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001860:	4322      	orrs	r2, r4
 8001862:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001864:	065a      	lsls	r2, r3, #25
 8001866:	d50f      	bpl.n	8001888 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001868:	6801      	ldr	r1, [r0, #0]
 800186a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800186c:	684a      	ldr	r2, [r1, #4]
 800186e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001872:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001874:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001878:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800187a:	d105      	bne.n	8001888 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800187c:	684a      	ldr	r2, [r1, #4]
 800187e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001880:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001884:	4322      	orrs	r2, r4
 8001886:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001888:	061b      	lsls	r3, r3, #24
 800188a:	d506      	bpl.n	800189a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800188c:	6802      	ldr	r2, [r0, #0]
 800188e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001890:	6853      	ldr	r3, [r2, #4]
 8001892:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001896:	430b      	orrs	r3, r1
 8001898:	6053      	str	r3, [r2, #4]
}
 800189a:	bd10      	pop	{r4, pc}

0800189c <UART_WaitOnFlagUntilTimeout>:
{
 800189c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80018a4:	4604      	mov	r4, r0
 80018a6:	460e      	mov	r6, r1
 80018a8:	4615      	mov	r5, r2
 80018aa:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	69d3      	ldr	r3, [r2, #28]
 80018b0:	ea36 0303 	bics.w	r3, r6, r3
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	42ab      	cmp	r3, r5
 80018bc:	d001      	beq.n	80018c2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80018be:	2000      	movs	r0, #0
 80018c0:	e01a      	b.n	80018f8 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80018c2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80018c6:	d0f2      	beq.n	80018ae <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018c8:	f7fe ffbe 	bl	8000848 <HAL_GetTick>
 80018cc:	1bc0      	subs	r0, r0, r7
 80018ce:	4540      	cmp	r0, r8
 80018d0:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018d2:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018d4:	d802      	bhi.n	80018dc <UART_WaitOnFlagUntilTimeout+0x40>
 80018d6:	f1b8 0f00 	cmp.w	r8, #0
 80018da:	d10f      	bne.n	80018fc <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80018e0:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018e2:	6883      	ldr	r3, [r0, #8]
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80018ea:	2320      	movs	r3, #32
 80018ec:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80018ee:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80018f0:	2300      	movs	r3, #0
 80018f2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80018f6:	2003      	movs	r0, #3
}
 80018f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80018fc:	075a      	lsls	r2, r3, #29
 80018fe:	d5d5      	bpl.n	80018ac <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001900:	69c3      	ldr	r3, [r0, #28]
 8001902:	051b      	lsls	r3, r3, #20
 8001904:	d5d2      	bpl.n	80018ac <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800190a:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800190c:	6803      	ldr	r3, [r0, #0]
 800190e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001912:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001914:	6883      	ldr	r3, [r0, #8]
 8001916:	f023 0301 	bic.w	r3, r3, #1
 800191a:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800191c:	2320      	movs	r3, #32
 800191e:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001920:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001922:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001924:	e7e4      	b.n	80018f0 <UART_WaitOnFlagUntilTimeout+0x54>

08001926 <UART_CheckIdleState>:
{
 8001926:	b530      	push	{r4, r5, lr}
 8001928:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800192a:	2500      	movs	r5, #0
{
 800192c:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800192e:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001930:	f7fe ff8a 	bl	8000848 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800193a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800193c:	d414      	bmi.n	8001968 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800193e:	6822      	ldr	r2, [r4, #0]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	0752      	lsls	r2, r2, #29
 8001944:	d509      	bpl.n	800195a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001946:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800194a:	9200      	str	r2, [sp, #0]
 800194c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001950:	2200      	movs	r2, #0
 8001952:	4620      	mov	r0, r4
 8001954:	f7ff ffa2 	bl	800189c <UART_WaitOnFlagUntilTimeout>
 8001958:	b998      	cbnz	r0, 8001982 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800195a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800195c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800195e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001960:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001964:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8001966:	e00d      	b.n	8001984 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001968:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800196c:	9200      	str	r2, [sp, #0]
 800196e:	9003      	str	r0, [sp, #12]
 8001970:	462a      	mov	r2, r5
 8001972:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001976:	4620      	mov	r0, r4
 8001978:	f7ff ff90 	bl	800189c <UART_WaitOnFlagUntilTimeout>
 800197c:	9b03      	ldr	r3, [sp, #12]
 800197e:	2800      	cmp	r0, #0
 8001980:	d0dd      	beq.n	800193e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001982:	2003      	movs	r0, #3
}
 8001984:	b005      	add	sp, #20
 8001986:	bd30      	pop	{r4, r5, pc}

08001988 <HAL_UART_Init>:
{
 8001988:	b510      	push	{r4, lr}
  if (huart == NULL)
 800198a:	4604      	mov	r4, r0
 800198c:	b340      	cbz	r0, 80019e0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800198e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001990:	b91b      	cbnz	r3, 800199a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001992:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001996:	f7fe fd25 	bl	80003e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800199a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800199c:	2324      	movs	r3, #36	; 0x24
 800199e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff fe63 	bl	8001674 <UART_SetConfig>
 80019ae:	2801      	cmp	r0, #1
 80019b0:	d016      	beq.n	80019e0 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019b4:	b113      	cbz	r3, 80019bc <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff ff1c 	bl	80017f4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019cc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80019d4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80019dc:	f7ff bfa3 	b.w	8001926 <UART_CheckIdleState>
}
 80019e0:	2001      	movs	r0, #1
 80019e2:	bd10      	pop	{r4, pc}

080019e4 <__libc_init_array>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	4d0d      	ldr	r5, [pc, #52]	; (8001a1c <__libc_init_array+0x38>)
 80019e8:	4c0d      	ldr	r4, [pc, #52]	; (8001a20 <__libc_init_array+0x3c>)
 80019ea:	1b64      	subs	r4, r4, r5
 80019ec:	10a4      	asrs	r4, r4, #2
 80019ee:	2600      	movs	r6, #0
 80019f0:	42a6      	cmp	r6, r4
 80019f2:	d109      	bne.n	8001a08 <__libc_init_array+0x24>
 80019f4:	4d0b      	ldr	r5, [pc, #44]	; (8001a24 <__libc_init_array+0x40>)
 80019f6:	4c0c      	ldr	r4, [pc, #48]	; (8001a28 <__libc_init_array+0x44>)
 80019f8:	f000 f820 	bl	8001a3c <_init>
 80019fc:	1b64      	subs	r4, r4, r5
 80019fe:	10a4      	asrs	r4, r4, #2
 8001a00:	2600      	movs	r6, #0
 8001a02:	42a6      	cmp	r6, r4
 8001a04:	d105      	bne.n	8001a12 <__libc_init_array+0x2e>
 8001a06:	bd70      	pop	{r4, r5, r6, pc}
 8001a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a0c:	4798      	blx	r3
 8001a0e:	3601      	adds	r6, #1
 8001a10:	e7ee      	b.n	80019f0 <__libc_init_array+0xc>
 8001a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a16:	4798      	blx	r3
 8001a18:	3601      	adds	r6, #1
 8001a1a:	e7f2      	b.n	8001a02 <__libc_init_array+0x1e>
 8001a1c:	08001a90 	.word	0x08001a90
 8001a20:	08001a90 	.word	0x08001a90
 8001a24:	08001a90 	.word	0x08001a90
 8001a28:	08001a94 	.word	0x08001a94

08001a2c <memset>:
 8001a2c:	4402      	add	r2, r0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d100      	bne.n	8001a36 <memset+0xa>
 8001a34:	4770      	bx	lr
 8001a36:	f803 1b01 	strb.w	r1, [r3], #1
 8001a3a:	e7f9      	b.n	8001a30 <memset+0x4>

08001a3c <_init>:
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	bf00      	nop
 8001a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a42:	bc08      	pop	{r3}
 8001a44:	469e      	mov	lr, r3
 8001a46:	4770      	bx	lr

08001a48 <_fini>:
 8001a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4a:	bf00      	nop
 8001a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4e:	bc08      	pop	{r3}
 8001a50:	469e      	mov	lr, r3
 8001a52:	4770      	bx	lr
