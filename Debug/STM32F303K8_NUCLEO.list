
STM32F303K8_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002230  08002230  00012230  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002270  08002270  00012270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          000001dc  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200001ec  200001ec  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e97b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002605  00000000  00000000  0002e9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000585c  00000000  00000000  00030fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000750  00000000  00000000  00036820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000009c0  00000000  00000000  00036f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000177df  00000000  00000000  00037930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000be06  00000000  00000000  0004f10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00082f8e  00000000  00000000  0005af15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000ddea3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000012fc  00000000  00000000  000ddef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002218 	.word	0x08002218

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002218 	.word	0x08002218

080001c8 <MX_CAN1_Init>:

/* Private functions ---------------------------------------------------------*/

/* USART2 init function */
void MX_CAN1_Init(void)
{
 80001c8:	b510      	push	{r4, lr}
    CAN_FilterTypeDef  sFilterConfig;

    /* Configure the CAN peripheral */
    hcan.Instance = CANx;  
 80001ca:	481e      	ldr	r0, [pc, #120]	; (8000244 <MX_CAN1_Init+0x7c>)
    hcan.Init.TransmitFifoPriority = DISABLE;
    hcan.Init.Mode = CAN_MODE_NORMAL;
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
    hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
    hcan.Init.Prescaler = 4;
 80001cc:	4a1e      	ldr	r2, [pc, #120]	; (8000248 <MX_CAN1_Init+0x80>)
 80001ce:	2304      	movs	r3, #4
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80001d0:	2400      	movs	r4, #0
    hcan.Init.Prescaler = 4;
 80001d2:	e9c0 2300 	strd	r2, r3, [r0]
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80001d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80001da:	e9c0 4302 	strd	r4, r3, [r0, #8]
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80001de:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80001e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001e6:	e9c0 1304 	strd	r1, r3, [r0, #16]
    hcan.Init.TimeTriggeredMode = DISABLE;
 80001ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80001ee:	b08a      	sub	sp, #40	; 0x28
    hcan.Init.TimeTriggeredMode = DISABLE;
 80001f0:	6183      	str	r3, [r0, #24]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 80001f2:	8384      	strh	r4, [r0, #28]
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001f4:	f000 fc04 	bl	8000a00 <HAL_CAN_Init>
 80001f8:	b108      	cbz	r0, 80001fe <MX_CAN1_Init+0x36>
    {
        Error_Handler();
 80001fa:	f000 f983 	bl	8000504 <Error_Handler>
    }

    /* Configure the CAN Filter */
    sFilterConfig.FilterBank = 0;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001fe:	2301      	movs	r3, #1
 8000200:	9307      	str	r3, [sp, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
    sFilterConfig.FilterIdLow = 0x0000;
    sFilterConfig.FilterMaskIdHigh = 0x0000;
    sFilterConfig.FilterMaskIdLow = 0x0000;
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
 8000202:	9308      	str	r3, [sp, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000204:	480f      	ldr	r0, [pc, #60]	; (8000244 <MX_CAN1_Init+0x7c>)
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000206:	9404      	str	r4, [sp, #16]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000208:	230e      	movs	r3, #14
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800020a:	4669      	mov	r1, sp
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800020c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    sFilterConfig.FilterIdLow = 0x0000;
 8000210:	e9cd 4400 	strd	r4, r4, [sp]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000214:	e9cd 4402 	strd	r4, r4, [sp, #8]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000218:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800021a:	f000 fc6c 	bl	8000af6 <HAL_CAN_ConfigFilter>
 800021e:	b108      	cbz	r0, 8000224 <MX_CAN1_Init+0x5c>
    {
        Error_Handler();
 8000220:	f000 f970 	bl	8000504 <Error_Handler>
    }

    /* Start the CAN peripheral */
    if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000224:	4807      	ldr	r0, [pc, #28]	; (8000244 <MX_CAN1_Init+0x7c>)
 8000226:	f000 fcd5 	bl	8000bd4 <HAL_CAN_Start>
 800022a:	b108      	cbz	r0, 8000230 <MX_CAN1_Init+0x68>
    {
        Error_Handler();
 800022c:	f000 f96a 	bl	8000504 <Error_Handler>
    }

    /* Activate CAN RX notification */
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <MX_CAN1_Init+0x7c>)
 8000232:	2102      	movs	r1, #2
 8000234:	f000 fdc3 	bl	8000dbe <HAL_CAN_ActivateNotification>
 8000238:	b108      	cbz	r0, 800023e <MX_CAN1_Init+0x76>
    {
        Error_Handler();
 800023a:	f000 f963 	bl	8000504 <Error_Handler>
    }
}
 800023e:	b00a      	add	sp, #40	; 0x28
 8000240:	bd10      	pop	{r4, pc}
 8000242:	bf00      	nop
 8000244:	20000098 	.word	0x20000098
 8000248:	40006400 	.word	0x40006400

0800024c <HAL_CAN_MspInit>:
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
    GPIO_InitTypeDef   GPIO_InitStruct; 
    
    /* CAN1 Periph clock enable */
    CANx_CLK_ENABLE();
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <HAL_CAN_MspInit+0x78>)
{
 800024e:	b5f0      	push	{r4, r5, r6, r7, lr}
    CANx_CLK_ENABLE();
 8000250:	69da      	ldr	r2, [r3, #28]
 8000252:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000256:	61da      	str	r2, [r3, #28]
 8000258:	69da      	ldr	r2, [r3, #28]
{
 800025a:	b089      	sub	sp, #36	; 0x24
    CANx_CLK_ENABLE();
 800025c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000260:	9201      	str	r2, [sp, #4]
 8000262:	9a01      	ldr	r2, [sp, #4]
    
    /* Enable GPIO clock */
    CANx_GPIO_CLK_ENABLE(); 
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800026a:	615a      	str	r2, [r3, #20]
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000272:	9302      	str	r3, [sp, #8]
    
    /* CAN1 TX GPIO pin configuration */
    GPIO_InitStruct.Pin = CANx_TX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000274:	2401      	movs	r4, #1
    CANx_GPIO_CLK_ENABLE(); 
 8000276:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000278:	2702      	movs	r7, #2
 800027a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027e:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate =  CANx_TX_AF;    
 8000280:	2509      	movs	r5, #9
    HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct); 
 8000282:	a903      	add	r1, sp, #12
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000288:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800028c:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Alternate =  CANx_TX_AF;    
 8000290:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct); 
 8000292:	f000 ffad 	bl	80011f0 <HAL_GPIO_Init>
    
    /* CAN1 RX GPIO pin configuration */
    GPIO_InitStruct.Pin = CANx_RX_PIN;
 8000296:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Alternate =  CANx_RX_AF;    
    HAL_GPIO_Init(CANx_RX_GPIO_PORT, &GPIO_InitStruct); 
 800029a:	a903      	add	r1, sp, #12
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002a0:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a4:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Alternate =  CANx_RX_AF;    
 80002a8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CANx_RX_GPIO_PORT, &GPIO_InitStruct); 
 80002aa:	f000 ffa1 	bl	80011f0 <HAL_GPIO_Init>
    
    /* NVIC configuration for CAN1 Reception complete interrupt */
    HAL_NVIC_SetPriority(CANx_RX_IRQn, 1, 0);
 80002ae:	2200      	movs	r2, #0
 80002b0:	4621      	mov	r1, r4
 80002b2:	2014      	movs	r0, #20
 80002b4:	f000 feb0 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CANx_RX_IRQn);
 80002b8:	2014      	movs	r0, #20
 80002ba:	f000 fedf 	bl	800107c <HAL_NVIC_EnableIRQ>
}
 80002be:	b009      	add	sp, #36	; 0x24
 80002c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000

080002c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80002c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t en_artifact = 0;
	uint16_t i = 0;
	uint8_t send_usart_code = 0;

	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx) != HAL_OK)
 80002ca:	4a64      	ldr	r2, [pc, #400]	; (800045c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80002cc:	4b64      	ldr	r3, [pc, #400]	; (8000460 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80002ce:	2100      	movs	r1, #0
 80002d0:	f000 fcfe 	bl	8000cd0 <HAL_CAN_GetRxMessage>
 80002d4:	b108      	cbz	r0, 80002da <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
		Error_Handler();
 80002d6:	f000 f915 	bl	8000504 <Error_Handler>
	 * idx:	[0]   [1]   [2]     [3]     [4]     [5]     [6]   [7]        [8]	 [9]
	 *  	---------------------------------------------------------------------------
	 *  	| ID1 | ID0 | DATA3 | DATA2 | DATA1 | DATA0 | STS | ARTIFACT | CHKSM | LF |
	 *  	---------------------------------------------------------------------------
	 */
	if (can_rx_header.DLC == CAN_DATA_LENGTH)
 80002da:	4b60      	ldr	r3, [pc, #384]	; (800045c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80002dc:	691a      	ldr	r2, [r3, #16]
 80002de:	2a04      	cmp	r2, #4
 80002e0:	461d      	mov	r5, r3
 80002e2:	d10c      	bne.n	80002fe <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
	{
		/* Check ID of received can packet and take properly action */
		switch (can_rx_header.StdId & 0x0000FF00)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	4c5f      	ldr	r4, [pc, #380]	; (8000464 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80002e8:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 80002ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002f0:	d006      	beq.n	8000300 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
 80002f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002f6:	d051      	beq.n	800039c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
				usart_sdo_pending = 1;
			}
			break;
		/* don't send through usart */
		default:
			can_inv_rx_cnt++;
 80002f8:	69a3      	ldr	r3, [r4, #24]
 80002fa:	3301      	adds	r3, #1
 80002fc:	61a3      	str	r3, [r4, #24]
			/* Display LED*/
			if ((uint16_t)(can_rx_header.StdId & 0x0000FFFF) == ID_PDO_00)
				BSP_LED_Toggle(LED3);
		}
	}
}
 80002fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			can_pdo_rx_cnt++;
 8000300:	6823      	ldr	r3, [r4, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	6023      	str	r3, [r4, #0]
			usart_tx[0] = ((can_rx_header.StdId & 0x0000FF00) >> 8);
 8000306:	4b58      	ldr	r3, [pc, #352]	; (8000468 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000308:	0a11      	lsrs	r1, r2, #8
			usart_tx[1] = (can_rx_header.StdId & 0x000000FF);
 800030a:	705a      	strb	r2, [r3, #1]
			usart_tx[2] = can_rx[0];
 800030c:	4a54      	ldr	r2, [pc, #336]	; (8000460 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
			usart_tx[0] = ((can_rx_header.StdId & 0x0000FF00) >> 8);
 800030e:	7019      	strb	r1, [r3, #0]
			usart_tx[2] = can_rx[0];
 8000310:	7811      	ldrb	r1, [r2, #0]
 8000312:	7099      	strb	r1, [r3, #2]
			usart_tx[3] = can_rx[1];
 8000314:	7851      	ldrb	r1, [r2, #1]
 8000316:	70d9      	strb	r1, [r3, #3]
			usart_tx[4] = can_rx[2];
 8000318:	7891      	ldrb	r1, [r2, #2]
			usart_tx[5] = can_rx[3];
 800031a:	78d2      	ldrb	r2, [r2, #3]
 800031c:	715a      	strb	r2, [r3, #5]
			usart_tx[6] = (uint8_t)(usart_rx_chksum_err & 0xFF);
 800031e:	4a53      	ldr	r2, [pc, #332]	; (800046c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
			usart_tx[4] = can_rx[2];
 8000320:	7119      	strb	r1, [r3, #4]
			usart_tx[6] = (uint8_t)(usart_rx_chksum_err & 0xFF);
 8000322:	7812      	ldrb	r2, [r2, #0]
 8000324:	719a      	strb	r2, [r3, #6]
 8000326:	2107      	movs	r1, #7
	uint16_t en_artifact = 0;
 8000328:	2200      	movs	r2, #0
 800032a:	4618      	mov	r0, r3
					usart_tx[i] = 0x1A;
 800032c:	261a      	movs	r6, #26
					en_artifact |= (uint8_t)(0x0001 << (7-i));
 800032e:	2701      	movs	r7, #1
				if (usart_tx[i] == '\n')
 8000330:	f813 cb01 	ldrb.w	ip, [r3], #1
 8000334:	f1bc 0f0a 	cmp.w	ip, #10
					en_artifact |= (uint8_t)(0x0001 << (7-i));
 8000338:	bf01      	itttt	eq
 800033a:	fa07 fc01 	lsleq.w	ip, r7, r1
 800033e:	ea42 020c 	orreq.w	r2, r2, ip
					usart_tx[i] = 0x1A;
 8000342:	f803 6c01 	strbeq.w	r6, [r3, #-1]
					en_artifact |= (uint8_t)(0x0001 << (7-i));
 8000346:	b292      	uxtheq	r2, r2
			for (i=0; i<7; i++)
 8000348:	3901      	subs	r1, #1
 800034a:	d1f1      	bne.n	8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
			usart_tx[8] = 0xA5 ^ \
 800034c:	7841      	ldrb	r1, [r0, #1]
 800034e:	7803      	ldrb	r3, [r0, #0]
 8000350:	404b      	eors	r3, r1
 8000352:	7881      	ldrb	r1, [r0, #2]
 8000354:	404b      	eors	r3, r1
 8000356:	78c1      	ldrb	r1, [r0, #3]
 8000358:	404b      	eors	r3, r1
 800035a:	7901      	ldrb	r1, [r0, #4]
 800035c:	404b      	eors	r3, r1
 800035e:	7941      	ldrb	r1, [r0, #5]
				en_artifact = 0x01;
 8000360:	2a0a      	cmp	r2, #10
			usart_tx[8] = 0xA5 ^ \
 8000362:	ea83 0301 	eor.w	r3, r3, r1
 8000366:	7981      	ldrb	r1, [r0, #6]
				en_artifact = 0x01;
 8000368:	bf08      	it	eq
 800036a:	2201      	moveq	r2, #1
			usart_tx[7] = (uint8_t)en_artifact;
 800036c:	b2d2      	uxtb	r2, r2
			usart_tx[8] = 0xA5 ^ \
 800036e:	404b      	eors	r3, r1
 8000370:	4053      	eors	r3, r2
			if (usart_tx[8] == '\n')
 8000372:	2baf      	cmp	r3, #175	; 0xaf
			usart_tx[8] = 0xA5 ^ \
 8000374:	bf14      	ite	ne
 8000376:	f083 03a5 	eorne.w	r3, r3, #165	; 0xa5
				usart_tx[8] = 0x1A;
 800037a:	231a      	moveq	r3, #26
 800037c:	7203      	strb	r3, [r0, #8]
			if (usart_sdo_pending)
 800037e:	7923      	ldrb	r3, [r4, #4]
			usart_tx[7] = (uint8_t)en_artifact;
 8000380:	71c2      	strb	r2, [r0, #7]
			usart_tx[9] = '\n';
 8000382:	220a      	movs	r2, #10
 8000384:	7242      	strb	r2, [r0, #9]
			if (usart_sdo_pending)
 8000386:	2b00      	cmp	r3, #0
 8000388:	d14b      	bne.n	8000422 <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
				if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)usart_tx, USART_MSG_LENGTH)!= HAL_OK)
 800038a:	4937      	ldr	r1, [pc, #220]	; (8000468 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800038c:	4838      	ldr	r0, [pc, #224]	; (8000470 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800038e:	f001 fbcf 	bl	8001b30 <HAL_UART_Transmit_IT>
 8000392:	2800      	cmp	r0, #0
 8000394:	d058      	beq.n	8000448 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
					Error_Handler();
 8000396:	f000 f8b5 	bl	8000504 <Error_Handler>
 800039a:	e055      	b.n	8000448 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
			if (!usart_sdo_pending)
 800039c:	7923      	ldrb	r3, [r4, #4]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1ad      	bne.n	80002fe <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
			usart_tx_sdo_pending[0] = ((can_rx_header.StdId & 0x0000FF00) >> 8);
 80003a2:	0a10      	lsrs	r0, r2, #8
			usart_tx_sdo_pending[1] = (can_rx_header.StdId & 0x000000FF);
 80003a4:	7362      	strb	r2, [r4, #13]
			usart_tx_sdo_pending[2] = can_rx[0];
 80003a6:	4a2e      	ldr	r2, [pc, #184]	; (8000460 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
			usart_tx_sdo_pending[0] = ((can_rx_header.StdId & 0x0000FF00) >> 8);
 80003a8:	7320      	strb	r0, [r4, #12]
			usart_tx_sdo_pending[2] = can_rx[0];
 80003aa:	7810      	ldrb	r0, [r2, #0]
 80003ac:	73a0      	strb	r0, [r4, #14]
			usart_tx_sdo_pending[3] = can_rx[1];
 80003ae:	7850      	ldrb	r0, [r2, #1]
				can_sdo_rx_cnt++;
 80003b0:	68a1      	ldr	r1, [r4, #8]
			usart_tx_sdo_pending[3] = can_rx[1];
 80003b2:	73e0      	strb	r0, [r4, #15]
			usart_tx_sdo_pending[4] = can_rx[2];
 80003b4:	7890      	ldrb	r0, [r2, #2]
			usart_tx_sdo_pending[5] = can_rx[3];
 80003b6:	78d2      	ldrb	r2, [r2, #3]
 80003b8:	7462      	strb	r2, [r4, #17]
			usart_tx_sdo_pending[6] = (uint8_t)(usart_rx_chksum_err & 0xFF);
 80003ba:	4a2c      	ldr	r2, [pc, #176]	; (800046c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
			usart_tx_sdo_pending[4] = can_rx[2];
 80003bc:	7420      	strb	r0, [r4, #16]
				can_sdo_rx_cnt++;
 80003be:	3101      	adds	r1, #1
			usart_tx_sdo_pending[6] = (uint8_t)(usart_rx_chksum_err & 0xFF);
 80003c0:	7812      	ldrb	r2, [r2, #0]
				can_sdo_rx_cnt++;
 80003c2:	60a1      	str	r1, [r4, #8]
				usart_sdo_pending = 1;
 80003c4:	2101      	movs	r1, #1
			usart_tx_sdo_pending[6] = (uint8_t)(usart_rx_chksum_err & 0xFF);
 80003c6:	74a2      	strb	r2, [r4, #18]
				usart_sdo_pending = 1;
 80003c8:	7121      	strb	r1, [r4, #4]
			for (i=0; i<7; i++)
 80003ca:	f104 000c 	add.w	r0, r4, #12
			usart_tx_sdo_pending[6] = (uint8_t)(usart_rx_chksum_err & 0xFF);
 80003ce:	2207      	movs	r2, #7
					usart_tx_sdo_pending[i] = 0x1A;
 80003d0:	251a      	movs	r5, #26
				if (usart_tx_sdo_pending[i] == '\n')
 80003d2:	f810 6b01 	ldrb.w	r6, [r0], #1
 80003d6:	2e0a      	cmp	r6, #10
					en_artifact |= (uint8_t)(0x0001 << (7-i));
 80003d8:	bf01      	itttt	eq
 80003da:	fa01 f602 	lsleq.w	r6, r1, r2
 80003de:	4333      	orreq	r3, r6
					usart_tx_sdo_pending[i] = 0x1A;
 80003e0:	f800 5c01 	strbeq.w	r5, [r0, #-1]
					en_artifact |= (uint8_t)(0x0001 << (7-i));
 80003e4:	b29b      	uxtheq	r3, r3
			for (i=0; i<7; i++)
 80003e6:	3a01      	subs	r2, #1
 80003e8:	d1f3      	bne.n	80003d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
				en_artifact = 0x01;
 80003ea:	2b0a      	cmp	r3, #10
 80003ec:	bf08      	it	eq
 80003ee:	2301      	moveq	r3, #1
			usart_tx_sdo_pending[7] = (uint8_t)en_artifact;
 80003f0:	b2da      	uxtb	r2, r3
			usart_tx_sdo_pending[8] = 0xA5 ^ \
 80003f2:	7b61      	ldrb	r1, [r4, #13]
 80003f4:	7b23      	ldrb	r3, [r4, #12]
			usart_tx_sdo_pending[7] = (uint8_t)en_artifact;
 80003f6:	74e2      	strb	r2, [r4, #19]
			usart_tx_sdo_pending[8] = 0xA5 ^ \
 80003f8:	404b      	eors	r3, r1
 80003fa:	7ba1      	ldrb	r1, [r4, #14]
 80003fc:	404b      	eors	r3, r1
 80003fe:	7be1      	ldrb	r1, [r4, #15]
 8000400:	404b      	eors	r3, r1
 8000402:	7c21      	ldrb	r1, [r4, #16]
 8000404:	404b      	eors	r3, r1
 8000406:	7c61      	ldrb	r1, [r4, #17]
 8000408:	404b      	eors	r3, r1
 800040a:	7ca1      	ldrb	r1, [r4, #18]
 800040c:	404b      	eors	r3, r1
 800040e:	4053      	eors	r3, r2
			if (usart_tx_sdo_pending[8] == '\n')
 8000410:	2baf      	cmp	r3, #175	; 0xaf
			usart_tx_sdo_pending[8] = 0xA5 ^ \
 8000412:	bf14      	ite	ne
 8000414:	f083 03a5 	eorne.w	r3, r3, #165	; 0xa5
				usart_tx_sdo_pending[8] = 0x1A;
 8000418:	231a      	moveq	r3, #26
 800041a:	7523      	strb	r3, [r4, #20]
			usart_tx_sdo_pending[9] = '\n';
 800041c:	230a      	movs	r3, #10
 800041e:	7563      	strb	r3, [r4, #21]
		if (send_usart_code == 1)
 8000420:	e76d      	b.n	80002fe <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
				memcpy(&(usart_tx[USART_MSG_LENGTH]), &(usart_tx_sdo_pending[0]), USART_MSG_LENGTH);
 8000422:	4b14      	ldr	r3, [pc, #80]	; (8000474 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000424:	4914      	ldr	r1, [pc, #80]	; (8000478 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	f8c0 200a 	str.w	r2, [r0, #10]
 800042c:	685a      	ldr	r2, [r3, #4]
 800042e:	891b      	ldrh	r3, [r3, #8]
 8000430:	604a      	str	r2, [r1, #4]
 8000432:	810b      	strh	r3, [r1, #8]
				if(HAL_UART_Transmit_IT(&huart2, (uint8_t*)usart_tx, 2*USART_MSG_LENGTH)!= HAL_OK)
 8000434:	480e      	ldr	r0, [pc, #56]	; (8000470 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000436:	2214      	movs	r2, #20
 8000438:	390a      	subs	r1, #10
 800043a:	f001 fb79 	bl	8001b30 <HAL_UART_Transmit_IT>
 800043e:	b108      	cbz	r0, 8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
					Error_Handler();
 8000440:	f000 f860 	bl	8000504 <Error_Handler>
				usart_sdo_pending = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	7123      	strb	r3, [r4, #4]
			if ((uint16_t)(can_rx_header.StdId & 0x0000FFFF) == ID_PDO_00)
 8000448:	882b      	ldrh	r3, [r5, #0]
 800044a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800044e:	f47f af56 	bne.w	80002fe <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
}
 8000452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				BSP_LED_Toggle(LED3);
 8000456:	2000      	movs	r0, #0
 8000458:	f000 ba50 	b.w	80008fc <BSP_LED_Toggle>
 800045c:	2000007c 	.word	0x2000007c
 8000460:	200000dc 	.word	0x200000dc
 8000464:	2000002c 	.word	0x2000002c
 8000468:	20000062 	.word	0x20000062
 800046c:	20000061 	.word	0x20000061
 8000470:	20000168 	.word	0x20000168
 8000474:	20000038 	.word	0x20000038
 8000478:	2000006c 	.word	0x2000006c

0800047c <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	b091      	sub	sp, #68	; 0x44
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000480:	2218      	movs	r2, #24
 8000482:	2100      	movs	r1, #0
 8000484:	a807      	add	r0, sp, #28
 8000486:	f001 febf 	bl	8002208 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048a:	2214      	movs	r2, #20
 800048c:	2100      	movs	r1, #0
 800048e:	a801      	add	r0, sp, #4
 8000490:	f001 feba 	bl	8002208 <memset>
  
	/* HSI Oscillator already ON after system reset, activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000494:	2501      	movs	r5, #1
 8000496:	2310      	movs	r3, #16
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000498:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049a:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a4:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004aa:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ac:	940d      	str	r4, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ae:	f000 ff65 	bl	800137c <HAL_RCC_OscConfig>
 80004b2:	b100      	cbz	r0, 80004b6 <SystemClock_Config+0x3a>
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
	while(1)
 80004b4:	e7fe      	b.n	80004b4 <SystemClock_Config+0x38>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b6:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ba:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004bc:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004be:	4629      	mov	r1, r5
 80004c0:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004c6:	f001 fa0d 	bl	80018e4 <HAL_RCC_ClockConfig>
 80004ca:	b100      	cbz	r0, 80004ce <SystemClock_Config+0x52>
	while(1)
 80004cc:	e7fe      	b.n	80004cc <SystemClock_Config+0x50>
}
 80004ce:	b011      	add	sp, #68	; 0x44
 80004d0:	bd30      	pop	{r4, r5, pc}
	...

080004d4 <main>:
{
 80004d4:	b508      	push	{r3, lr}
	HAL_Init();
 80004d6:	f000 fa6f 	bl	80009b8 <HAL_Init>
	SystemClock_Config();
 80004da:	f7ff ffcf 	bl	800047c <SystemClock_Config>
	BSP_LED_Init(LED3);
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 f9e4 	bl	80008ac <BSP_LED_Init>
	MX_USART2_UART_Init();
 80004e4:	f000 f84a 	bl	800057c <MX_USART2_UART_Init>
	MX_CAN1_Init();
 80004e8:	f7ff fe6e 	bl	80001c8 <MX_CAN1_Init>
	if (HAL_UART_Receive_IT(&huart2, (uint8_t*)usart_rx, USART_MSG_LENGTH)!= HAL_OK)
 80004ec:	4903      	ldr	r1, [pc, #12]	; (80004fc <main+0x28>)
 80004ee:	4804      	ldr	r0, [pc, #16]	; (8000500 <main+0x2c>)
 80004f0:	220a      	movs	r2, #10
 80004f2:	f001 fb4f 	bl	8001b94 <HAL_UART_Receive_IT>
 80004f6:	b100      	cbz	r0, 80004fa <main+0x26>
	while(1)
 80004f8:	e7fe      	b.n	80004f8 <main+0x24>
	while (1)
 80004fa:	e7fe      	b.n	80004fa <main+0x26>
 80004fc:	20000050 	.word	0x20000050
 8000500:	20000168 	.word	0x20000168

08000504 <Error_Handler>:
	while(1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler>
	...

08000508 <HAL_MspInit>:
  * @param None
  * @retval None
  */
void HAL_MspInit(void)
{
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_MspInit+0x2c>)
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	f042 0201 	orr.w	r2, r2, #1
 8000510:	619a      	str	r2, [r3, #24]
 8000512:	699a      	ldr	r2, [r3, #24]
{
 8000514:	b082      	sub	sp, #8
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	f002 0201 	and.w	r2, r2, #1
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 800051e:	69da      	ldr	r2, [r3, #28]
 8000520:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000524:	61da      	str	r2, [r3, #28]
 8000526:	69db      	ldr	r3, [r3, #28]
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	9b01      	ldr	r3, [sp, #4]
}
 8000530:	b002      	add	sp, #8
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000

08000538 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000538:	4770      	bx	lr

0800053a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler>

0800053c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800053c:	e7fe      	b.n	800053c <MemManage_Handler>

0800053e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800053e:	e7fe      	b.n	800053e <BusFault_Handler>

08000540 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000540:	e7fe      	b.n	8000540 <UsageFault_Handler>

08000542 <SVC_Handler>:
 8000542:	4770      	bx	lr

08000544 <DebugMon_Handler>:
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:
 8000546:	4770      	bx	lr

08000548 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000548:	f000 ba48 	b.w	80009dc <HAL_IncTick>

0800054c <DMA1_Channel6_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(huart2.hdmarx);
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <DMA1_Channel6_IRQHandler+0x8>)
 800054e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000550:	f000 be07 	b.w	8001162 <HAL_DMA_IRQHandler>
 8000554:	20000168 	.word	0x20000168

08000558 <DMA1_Channel7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(huart2.hdmatx);
 8000558:	4b01      	ldr	r3, [pc, #4]	; (8000560 <DMA1_Channel7_IRQHandler+0x8>)
 800055a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800055c:	f000 be01 	b.w	8001162 <HAL_DMA_IRQHandler>
 8000560:	20000168 	.word	0x20000168

08000564 <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA  
  *         used for USART data transmission     
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&huart2);
 8000564:	4801      	ldr	r0, [pc, #4]	; (800056c <USART2_IRQHandler+0x8>)
 8000566:	f001 bbc3 	b.w	8001cf0 <HAL_UART_IRQHandler>
 800056a:	bf00      	nop
 800056c:	20000168 	.word	0x20000168

08000570 <CAN_RX0_IRQHandler>:
  * @param  None
  * @retval None
  */
void CANx_RX_IRQHandler(void)
{
  HAL_CAN_IRQHandler(&hcan);
 8000570:	4801      	ldr	r0, [pc, #4]	; (8000578 <CAN_RX0_IRQHandler+0x8>)
 8000572:	f000 bc41 	b.w	8000df8 <HAL_CAN_IRQHandler>
 8000576:	bf00      	nop
 8000578:	20000098 	.word	0x20000098

0800057c <MX_USART2_UART_Init>:
/* Private functions ---------------------------------------------------------*/

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
	huart2.Instance = USART2;
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <MX_USART2_UART_Init+0x34>)
	huart2.Init.BaudRate = 115200;
 800057e:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <MX_USART2_UART_Init+0x38>)
{
 8000580:	b508      	push	{r3, lr}
	huart2.Init.BaudRate = 115200;
 8000582:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000586:	e9c0 2300 	strd	r2, r3, [r0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	2300      	movs	r3, #0
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 800058c:	220c      	movs	r2, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 800058e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000592:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000596:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart2.Init.Parity = UART_PARITY_NONE;
 800059a:	6103      	str	r3, [r0, #16]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800059c:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800059e:	f001 fddf 	bl	8002160 <HAL_UART_Init>
 80005a2:	b118      	cbz	r0, 80005ac <MX_USART2_UART_Init+0x30>
	{
	  Error_Handler();
	}
}
 80005a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 80005a8:	f7ff bfac 	b.w	8000504 <Error_Handler>
}
 80005ac:	bd08      	pop	{r3, pc}
 80005ae:	bf00      	nop
 80005b0:	20000168 	.word	0x20000168
 80005b4:	40004400 	.word	0x40004400

080005b8 <HAL_UART_MspInit>:
{

	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* Enable GPIO clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 80005b8:	4b3c      	ldr	r3, [pc, #240]	; (80006ac <HAL_UART_MspInit+0xf4>)
{
 80005ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	USARTx_TX_GPIO_CLK_ENABLE();
 80005be:	695a      	ldr	r2, [r3, #20]
	GPIO_InitStruct.Alternate = USARTx_TX_AF;

	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);

	/* Configure the DMA handler for Transmission process */
	hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80005c0:	4d3b      	ldr	r5, [pc, #236]	; (80006b0 <HAL_UART_MspInit+0xf8>)
	USARTx_TX_GPIO_CLK_ENABLE();
 80005c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	695a      	ldr	r2, [r3, #20]
{
 80005ca:	b08b      	sub	sp, #44	; 0x2c
	USARTx_TX_GPIO_CLK_ENABLE();
 80005cc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80005d0:	9201      	str	r2, [sp, #4]
 80005d2:	9a01      	ldr	r2, [sp, #4]
	USARTx_RX_GPIO_CLK_ENABLE();
 80005d4:	695a      	ldr	r2, [r3, #20]
 80005d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80005e2:	9202      	str	r2, [sp, #8]
 80005e4:	9a02      	ldr	r2, [sp, #8]
	USARTx_CLK_ENABLE();
 80005e6:	69da      	ldr	r2, [r3, #28]
 80005e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80005ec:	61da      	str	r2, [r3, #28]
 80005ee:	69da      	ldr	r2, [r3, #28]
 80005f0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80005f4:	9203      	str	r2, [sp, #12]
 80005f6:	9a03      	ldr	r2, [sp, #12]
	DMAx_CLK_ENABLE();
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	f042 0201 	orr.w	r2, r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	f248 0204 	movw	r2, #32772	; 0x8004
	DMAx_CLK_ENABLE();
 800060c:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	2701      	movs	r7, #1
 8000616:	2303      	movs	r3, #3
{
 8000618:	4606      	mov	r6, r0
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800061a:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061c:	e9cd 7307 	strd	r7, r3, [sp, #28]
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000624:	2307      	movs	r3, #7
 8000626:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000628:	f000 fde2 	bl	80011f0 <HAL_GPIO_Init>
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <HAL_UART_MspInit+0xfc>)
	hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800062e:	2400      	movs	r4, #0
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000630:	f04f 0810 	mov.w	r8, #16
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000634:	f04f 0980 	mov.w	r9, #128	; 0x80
	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_tx.Init.Mode                = DMA_NORMAL;
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

	HAL_DMA_Init(&hdma_tx);
 8000638:	4628      	mov	r0, r5
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800063a:	e9c5 3800 	strd	r3, r8, [r5]
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800063e:	e9c5 4902 	strd	r4, r9, [r5, #8]
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000642:	e9c5 4404 	strd	r4, r4, [r5, #16]
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8000646:	e9c5 4406 	strd	r4, r4, [r5, #24]
	HAL_DMA_Init(&hdma_tx);
 800064a:	f000 fd3b 	bl	80010c4 <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the UART handle */
	__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800064e:	66b5      	str	r5, [r6, #104]	; 0x68
 8000650:	626e      	str	r6, [r5, #36]	; 0x24

	/* Configure the DMA handler for reception process */
	hdma_rx.Instance                 = USARTx_RX_DMA_CHANNEL;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <HAL_UART_MspInit+0x100>)
 8000654:	4d19      	ldr	r5, [pc, #100]	; (80006bc <HAL_UART_MspInit+0x104>)
	hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000656:	e9c5 3400 	strd	r3, r4, [r5]
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_rx.Init.Mode                = DMA_NORMAL;
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

	HAL_DMA_Init(&hdma_rx);
 800065a:	4628      	mov	r0, r5
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800065c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000660:	61eb      	str	r3, [r5, #28]
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000662:	e9c5 4902 	strd	r4, r9, [r5, #8]
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000666:	e9c5 4404 	strd	r4, r4, [r5, #16]
	hdma_rx.Init.Mode                = DMA_NORMAL;
 800066a:	61ac      	str	r4, [r5, #24]
	HAL_DMA_Init(&hdma_rx);
 800066c:	f000 fd2a 	bl	80010c4 <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the the UART handle */
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);

	/* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8000670:	463a      	mov	r2, r7
 8000672:	4621      	mov	r1, r4
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8000674:	66f5      	str	r5, [r6, #108]	; 0x6c
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8000676:	2011      	movs	r0, #17
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8000678:	626e      	str	r6, [r5, #36]	; 0x24
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 800067a:	f000 fccd 	bl	8001018 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800067e:	2011      	movs	r0, #17
 8000680:	f000 fcfc 	bl	800107c <HAL_NVIC_EnableIRQ>

	/* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
	HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 8000684:	4622      	mov	r2, r4
 8000686:	4621      	mov	r1, r4
 8000688:	4640      	mov	r0, r8
 800068a:	f000 fcc5 	bl	8001018 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 800068e:	4640      	mov	r0, r8
 8000690:	f000 fcf4 	bl	800107c <HAL_NVIC_EnableIRQ>

	/* NVIC configuration for USART, to catch the TX complete */
	HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8000694:	463a      	mov	r2, r7
 8000696:	4621      	mov	r1, r4
 8000698:	2026      	movs	r0, #38	; 0x26
 800069a:	f000 fcbd 	bl	8001018 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800069e:	2026      	movs	r0, #38	; 0x26
 80006a0:	f000 fcec 	bl	800107c <HAL_NVIC_EnableIRQ>

}
 80006a4:	b00b      	add	sp, #44	; 0x2c
 80006a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	20000124 	.word	0x20000124
 80006b4:	40020080 	.word	0x40020080
 80006b8:	4002006c 	.word	0x4002006c
 80006bc:	200000e0 	.word	0x200000e0

080006c0 <HAL_UART_TxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	usart_tx_msg_cnt++;
 80006c0:	4a02      	ldr	r2, [pc, #8]	; (80006cc <HAL_UART_TxCpltCallback+0xc>)
 80006c2:	6813      	ldr	r3, [r2, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	2000004c 	.word	0x2000004c

080006d0 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t computed_chksm = 0x00;
    uint8_t data_chksm = 0x00;
    uint8_t artifact = 0x00;
    uint8_t data_dec[7] = { 0, 0, 0, 0, 0, 0, 0 };

	if (HAL_UART_Receive_IT(&huart2, (uint8_t*)usart_rx, USART_MSG_LENGTH)!= HAL_OK)
 80006d4:	4958      	ldr	r1, [pc, #352]	; (8000838 <HAL_UART_RxCpltCallback+0x168>)
{
 80006d6:	4604      	mov	r4, r0
	if (HAL_UART_Receive_IT(&huart2, (uint8_t*)usart_rx, USART_MSG_LENGTH)!= HAL_OK)
 80006d8:	220a      	movs	r2, #10
 80006da:	4858      	ldr	r0, [pc, #352]	; (800083c <HAL_UART_RxCpltCallback+0x16c>)
 80006dc:	f001 fa5a 	bl	8001b94 <HAL_UART_Receive_IT>
 80006e0:	b108      	cbz	r0, 80006e6 <HAL_UART_RxCpltCallback+0x16>
		Error_Handler();
 80006e2:	f7ff ff0f 	bl	8000504 <Error_Handler>
	usart_rx_msg_cnt++;
 80006e6:	4956      	ldr	r1, [pc, #344]	; (8000840 <HAL_UART_RxCpltCallback+0x170>)
 80006e8:	690b      	ldr	r3, [r1, #16]
 80006ea:	3301      	adds	r3, #1
 80006ec:	610b      	str	r3, [r1, #16]
	 * idx:	[0]   [1]   [2]     [3]     [4]     [5]     [6]   [7]        [8]	 [9]
	 *  	---------------------------------------------------------------------------
	 *  	| ID1 | ID0 | DATA3 | DATA2 | DATA1 | DATA0 | STS | ARTIFACT | CHKSM | LF |
	 *  	---------------------------------------------------------------------------
	 */
	if ((huart->RxXferSize == 10) && (usart_rx[9] == 0x0A))
 80006ee:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 80006f2:	2b0a      	cmp	r3, #10
 80006f4:	4608      	mov	r0, r1
 80006f6:	f040 808e 	bne.w	8000816 <HAL_UART_RxCpltCallback+0x146>
 80006fa:	7b4b      	ldrb	r3, [r1, #13]
 80006fc:	2b0a      	cmp	r3, #10
 80006fe:	f040 808a 	bne.w	8000816 <HAL_UART_RxCpltCallback+0x146>
	{
		computed_chksm = 0xA5 ^ \
				usart_rx[0] ^ \
 8000702:	f891 e004 	ldrb.w	lr, [r1, #4]
				usart_rx[2] ^ \
				usart_rx[3] ^ \
				usart_rx[4] ^ \
				usart_rx[5] ^ \
				usart_rx[6] ^ \
				usart_rx[7];
 8000706:	7acc      	ldrb	r4, [r1, #11]
				usart_rx[1] ^ \
 8000708:	f891 8005 	ldrb.w	r8, [r1, #5]
				usart_rx[2] ^ \
 800070c:	f891 c006 	ldrb.w	ip, [r1, #6]
				usart_rx[3] ^ \
 8000710:	79cf      	ldrb	r7, [r1, #7]
				usart_rx[4] ^ \
 8000712:	7a0e      	ldrb	r6, [r1, #8]
				usart_rx[5] ^ \
 8000714:	7a4d      	ldrb	r5, [r1, #9]
		computed_chksm = 0xA5 ^ \
 8000716:	f891 900a 	ldrb.w	r9, [r1, #10]
 800071a:	ea8e 0204 	eor.w	r2, lr, r4
 800071e:	ea88 0202 	eor.w	r2, r8, r2
 8000722:	ea8c 0202 	eor.w	r2, ip, r2
 8000726:	407a      	eors	r2, r7
 8000728:	4072      	eors	r2, r6
 800072a:	406a      	eors	r2, r5
 800072c:	ea82 0209 	eor.w	r2, r2, r9
		data_chksm = ((usart_rx[8] == 0x1A) ? (0x0A) : (usart_rx[8]));
 8000730:	f891 900c 	ldrb.w	r9, [r1, #12]
 8000734:	f1b9 0f1a 	cmp.w	r9, #26
		computed_chksm = 0xA5 ^ \
 8000738:	f082 02a5 	eor.w	r2, r2, #165	; 0xa5
		data_chksm = ((usart_rx[8] == 0x1A) ? (0x0A) : (usart_rx[8]));
 800073c:	bf08      	it	eq
 800073e:	f04f 090a 	moveq.w	r9, #10
		if (computed_chksm == data_chksm)
 8000742:	4591      	cmp	r9, r2
 8000744:	d167      	bne.n	8000816 <HAL_UART_RxCpltCallback+0x146>
		{
			en_send_can = 1;
 8000746:	2201      	movs	r2, #1
			artifact = ((usart_rx[7] == 0x01) ? (0x0A) : (usart_rx[7]));
 8000748:	4294      	cmp	r4, r2
 800074a:	bf18      	it	ne
 800074c:	4623      	movne	r3, r4
			en_send_can = 1;
 800074e:	750a      	strb	r2, [r1, #20]
			data_dec[0] = ((((artifact & 0x80) >> 7) * 0x0A) + (usart_rx[0] * (1 - ((artifact & 0x80) >> 7))));
			data_dec[1] = ((((artifact & 0x40) >> 6) * 0x0A) + (usart_rx[1] * (1 - ((artifact & 0x40) >> 6))));
 8000750:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8000754:	0094      	lsls	r4, r2, #2
 8000756:	4414      	add	r4, r2
 8000758:	f083 0240 	eor.w	r2, r3, #64	; 0x40
			data_dec[0] = ((((artifact & 0x80) >> 7) * 0x0A) + (usart_rx[0] * (1 - ((artifact & 0x80) >> 7))));
 800075c:	09d8      	lsrs	r0, r3, #7
			data_dec[1] = ((((artifact & 0x40) >> 6) * 0x0A) + (usart_rx[1] * (1 - ((artifact & 0x40) >> 6))));
 800075e:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8000762:	fb12 f808 	smulbb	r8, r2, r8
			data_dec[0] = ((((artifact & 0x80) >> 7) * 0x0A) + (usart_rx[0] * (1 - ((artifact & 0x80) >> 7))));
 8000766:	f1c0 0201 	rsb	r2, r0, #1


    /* Configure Transmission process */
	if (en_send_can)
	{
		can_tx_header.StdId = (uint32_t)((uint16_t)(data_dec[1] & 0x00FF) +
 800076a:	4936      	ldr	r1, [pc, #216]	; (8000844 <HAL_UART_RxCpltCallback+0x174>)
			data_dec[0] = ((((artifact & 0x80) >> 7) * 0x0A) + (usart_rx[0] * (1 - ((artifact & 0x80) >> 7))));
 800076c:	fb12 fe0e 	smulbb	lr, r2, lr
 8000770:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000774:	eb0e 0e40 	add.w	lr, lr, r0, lsl #1
				(uint16_t)((data_dec[0] << 8) & 0xFF00));
	    //can_tx_header.ExtId = 0x01;
		can_tx_header.RTR = CAN_RTR_DATA;
		can_tx_header.IDE = CAN_ID_STD;
		can_tx_header.DLC = CAN_DATA_LENGTH;
 8000778:	2004      	movs	r0, #4
 800077a:	6108      	str	r0, [r1, #16]
			data_dec[2] = ((((artifact & 0x20) >> 5) * 0x0A) + (usart_rx[2] * (1 - ((artifact & 0x20) >> 5))));
 800077c:	f3c3 1040 	ubfx	r0, r3, #5, #1
			data_dec[1] = ((((artifact & 0x40) >> 6) * 0x0A) + (usart_rx[1] * (1 - ((artifact & 0x40) >> 6))));
 8000780:	eb08 0844 	add.w	r8, r8, r4, lsl #1
			data_dec[2] = ((((artifact & 0x20) >> 5) * 0x0A) + (usart_rx[2] * (1 - ((artifact & 0x20) >> 5))));
 8000784:	0084      	lsls	r4, r0, #2
 8000786:	4404      	add	r4, r0
 8000788:	f083 0020 	eor.w	r0, r3, #32
 800078c:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8000790:	fb10 fc0c 	smulbb	ip, r0, ip
			data_dec[3] = ((((artifact & 0x10) >> 4) * 0x0A) + (usart_rx[3] * (1 - ((artifact & 0x10) >> 4))));
 8000794:	f3c3 1000 	ubfx	r0, r3, #4, #1
			data_dec[2] = ((((artifact & 0x20) >> 5) * 0x0A) + (usart_rx[2] * (1 - ((artifact & 0x20) >> 5))));
 8000798:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
			data_dec[3] = ((((artifact & 0x10) >> 4) * 0x0A) + (usart_rx[3] * (1 - ((artifact & 0x10) >> 4))));
 800079c:	0084      	lsls	r4, r0, #2
 800079e:	4404      	add	r4, r0
 80007a0:	f083 0010 	eor.w	r0, r3, #16
 80007a4:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80007a8:	fb10 f707 	smulbb	r7, r0, r7
			data_dec[4] = ((((artifact & 0x08) >> 3) * 0x0A) + (usart_rx[4] * (1 - ((artifact & 0x08) >> 3))));
 80007ac:	f3c3 00c0 	ubfx	r0, r3, #3, #1
			data_dec[3] = ((((artifact & 0x10) >> 4) * 0x0A) + (usart_rx[3] * (1 - ((artifact & 0x10) >> 4))));
 80007b0:	eb07 0744 	add.w	r7, r7, r4, lsl #1
			data_dec[4] = ((((artifact & 0x08) >> 3) * 0x0A) + (usart_rx[4] * (1 - ((artifact & 0x08) >> 3))));
 80007b4:	0084      	lsls	r4, r0, #2
 80007b6:	4404      	add	r4, r0
 80007b8:	f083 0008 	eor.w	r0, r3, #8
 80007bc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
				(uint16_t)((data_dec[0] << 8) & 0xFF00));
 80007c0:	fa5f fe8e 	uxtb.w	lr, lr
			data_dec[4] = ((((artifact & 0x08) >> 3) * 0x0A) + (usart_rx[4] * (1 - ((artifact & 0x08) >> 3))));
 80007c4:	fb10 f606 	smulbb	r6, r0, r6
				(uint16_t)((data_dec[0] << 8) & 0xFF00));
 80007c8:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
		can_tx_header.StdId = (uint32_t)((uint16_t)(data_dec[1] & 0x00FF) +
 80007cc:	fa5e f288 	uxtab	r2, lr, r8
			data_dec[4] = ((((artifact & 0x08) >> 3) * 0x0A) + (usart_rx[4] * (1 - ((artifact & 0x08) >> 3))));
 80007d0:	eb06 0644 	add.w	r6, r6, r4, lsl #1
			data_dec[5] = ((((artifact & 0x04) >> 2) * 0x0A) + (usart_rx[5] * (1 - ((artifact & 0x04) >> 2))));
 80007d4:	f3c3 0080 	ubfx	r0, r3, #2, #1
 80007d8:	f003 0404 	and.w	r4, r3, #4
 80007dc:	f083 0304 	eor.w	r3, r3, #4
		can_tx_header.StdId = (uint32_t)((uint16_t)(data_dec[1] & 0x00FF) +
 80007e0:	600a      	str	r2, [r1, #0]
			data_dec[5] = ((((artifact & 0x04) >> 2) * 0x0A) + (usart_rx[5] * (1 - ((artifact & 0x04) >> 2))));
 80007e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
		can_tx_header.RTR = CAN_RTR_DATA;
 80007e6:	2200      	movs	r2, #0
			data_dec[5] = ((((artifact & 0x04) >> 2) * 0x0A) + (usart_rx[5] * (1 - ((artifact & 0x04) >> 2))));
 80007e8:	4420      	add	r0, r4
		can_tx_header.IDE = CAN_ID_STD;
 80007ea:	e9c1 2202 	strd	r2, r2, [r1, #8]
		can_tx_header.TransmitGlobalTime = DISABLE;
 80007ee:	750a      	strb	r2, [r1, #20]
			data_dec[5] = ((((artifact & 0x04) >> 2) * 0x0A) + (usart_rx[5] * (1 - ((artifact & 0x04) >> 2))));
 80007f0:	fb13 f305 	smulbb	r3, r3, r5
		can_tx[0] = data_dec[2];
 80007f4:	4a14      	ldr	r2, [pc, #80]	; (8000848 <HAL_UART_RxCpltCallback+0x178>)
			data_dec[5] = ((((artifact & 0x04) >> 2) * 0x0A) + (usart_rx[5] * (1 - ((artifact & 0x04) >> 2))));
 80007f6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		can_tx[1] = data_dec[3];
		can_tx[2] = data_dec[4];
		can_tx[3] = data_dec[5];
 80007fa:	70d3      	strb	r3, [r2, #3]
	    if (HAL_CAN_AddTxMessage(&hcan, &can_tx_header, can_tx, &can_tx_mailbox) != HAL_OK)
 80007fc:	4813      	ldr	r0, [pc, #76]	; (800084c <HAL_UART_RxCpltCallback+0x17c>)
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_UART_RxCpltCallback+0x180>)
		can_tx[0] = data_dec[2];
 8000800:	f882 c000 	strb.w	ip, [r2]
		can_tx[1] = data_dec[3];
 8000804:	7057      	strb	r7, [r2, #1]
		can_tx[2] = data_dec[4];
 8000806:	7096      	strb	r6, [r2, #2]
	    if (HAL_CAN_AddTxMessage(&hcan, &can_tx_header, can_tx, &can_tx_mailbox) != HAL_OK)
 8000808:	f000 fa12 	bl	8000c30 <HAL_CAN_AddTxMessage>
 800080c:	b190      	cbz	r0, 8000834 <HAL_UART_RxCpltCallback+0x164>
		usart_rx[6] = 0;
		usart_rx[7] = 0;
		usart_rx[8] = 0;
		usart_rx[9] = 0;
	}
}
 800080e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	    	Error_Handler();
 8000812:	f7ff be77 	b.w	8000504 <Error_Handler>
			usart_rx_chksum_err++;
 8000816:	7d43      	ldrb	r3, [r0, #21]
 8000818:	3301      	adds	r3, #1
 800081a:	7543      	strb	r3, [r0, #21]
			en_send_can = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	7503      	strb	r3, [r0, #20]
		usart_rx[0] = 0;
 8000820:	7103      	strb	r3, [r0, #4]
		usart_rx[1] = 0;
 8000822:	7143      	strb	r3, [r0, #5]
		usart_rx[2] = 0;
 8000824:	7183      	strb	r3, [r0, #6]
		usart_rx[3] = 0;
 8000826:	71c3      	strb	r3, [r0, #7]
		usart_rx[4] = 0;
 8000828:	7203      	strb	r3, [r0, #8]
		usart_rx[5] = 0;
 800082a:	7243      	strb	r3, [r0, #9]
		usart_rx[6] = 0;
 800082c:	7283      	strb	r3, [r0, #10]
		usart_rx[7] = 0;
 800082e:	72c3      	strb	r3, [r0, #11]
		usart_rx[8] = 0;
 8000830:	7303      	strb	r3, [r0, #12]
		usart_rx[9] = 0;
 8000832:	7343      	strb	r3, [r0, #13]
}
 8000834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000838:	20000050 	.word	0x20000050
 800083c:	20000168 	.word	0x20000168
 8000840:	2000004c 	.word	0x2000004c
 8000844:	200000c0 	.word	0x200000c0
 8000848:	200000d8 	.word	0x200000d8
 800084c:	20000098 	.word	0x20000098
 8000850:	20000078 	.word	0x20000078

08000854 <HAL_UART_ErrorCallback>:
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
}
 8000854:	4770      	bx	lr
	...

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000890 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800085c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800085e:	e003      	b.n	8000868 <LoopCopyDataInit>

08000860 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000862:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000864:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000866:	3104      	adds	r1, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <LoopForever+0xa>)
	ldr	r3, =_edata
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <LoopForever+0xe>)
	adds	r2, r0, r1
 800086c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800086e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000870:	d3f6      	bcc.n	8000860 <CopyDataInit>
	ldr	r2, =_sbss
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000874:	e002      	b.n	800087c <LoopFillZerobss>

08000876 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000876:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000878:	f842 3b04 	str.w	r3, [r2], #4

0800087c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <LoopForever+0x16>)
	cmp	r2, r3
 800087e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000880:	d3f9      	bcc.n	8000876 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000882:	f000 f843 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f001 fc9b 	bl	80021c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fe23 	bl	80004d4 <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000890:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000894:	08002274 	.word	0x08002274
	ldr	r0, =_sdata
 8000898:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800089c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80008a0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80008a4:	200001ec 	.word	0x200001ec

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <BSP_LED_Init+0x48>)
{
 80008ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 80008b0:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80008b2:	4d11      	ldr	r5, [pc, #68]	; (80008f8 <BSP_LED_Init+0x4c>)
  LEDx_GPIO_CLK_ENABLE(Led);
 80008b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	695b      	ldr	r3, [r3, #20]
{
 80008bc:	b087      	sub	sp, #28
  LEDx_GPIO_CLK_ENABLE(Led);
 80008be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	9b00      	ldr	r3, [sp, #0]
{
 80008c6:	4604      	mov	r4, r0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2608      	movs	r6, #8
 80008ca:	2301      	movs	r3, #1
 80008cc:	e9cd 6301 	strd	r6, r3, [sp, #4]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80008d0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	2700      	movs	r7, #0
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80008d8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008da:	e9cd 7303 	strd	r7, r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80008de:	f000 fc87 	bl	80011f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80008e2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80008e6:	463a      	mov	r2, r7
 80008e8:	4631      	mov	r1, r6
 80008ea:	f000 fd3b 	bl	8001364 <HAL_GPIO_WritePin>
}
 80008ee:	b007      	add	sp, #28
 80008f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000
 80008f8:	20000000 	.word	0x20000000

080008fc <BSP_LED_Toggle>:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <BSP_LED_Toggle+0xc>)
 80008fe:	2108      	movs	r1, #8
 8000900:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000904:	f000 bd33 	b.w	800136e <HAL_GPIO_TogglePin>
 8000908:	20000000 	.word	0x20000000

0800090c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4915      	ldr	r1, [pc, #84]	; (8000964 <SystemInit+0x58>)
 800090e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000912:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <SystemInit+0x5c>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	f042 0201 	orr.w	r2, r2, #1
 8000922:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000924:	6858      	ldr	r0, [r3, #4]
 8000926:	4a11      	ldr	r2, [pc, #68]	; (800096c <SystemInit+0x60>)
 8000928:	4002      	ands	r2, r0
 800092a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000932:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000936:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800093e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000946:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800094a:	f022 020f 	bic.w	r2, r2, #15
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000950:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000952:	4a07      	ldr	r2, [pc, #28]	; (8000970 <SystemInit+0x64>)
 8000954:	4002      	ands	r2, r0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800095c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000960:	608b      	str	r3, [r1, #8]
#endif
}
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00
 8000968:	40021000 	.word	0x40021000
 800096c:	f87fc00c 	.word	0xf87fc00c
 8000970:	ff00fccc 	.word	0xff00fccc

08000974 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_InitTick+0x3c>)
 8000978:	4e0e      	ldr	r6, [pc, #56]	; (80009b4 <HAL_InitTick+0x40>)
{
 800097a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000980:	7830      	ldrb	r0, [r6, #0]
 8000982:	fbb3 f3f0 	udiv	r3, r3, r0
 8000986:	6810      	ldr	r0, [r2, #0]
 8000988:	fbb0 f0f3 	udiv	r0, r0, r3
 800098c:	f000 fb84 	bl	8001098 <HAL_SYSTICK_Config>
 8000990:	4604      	mov	r4, r0
 8000992:	b950      	cbnz	r0, 80009aa <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000994:	2d0f      	cmp	r5, #15
 8000996:	d808      	bhi.n	80009aa <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000998:	4602      	mov	r2, r0
 800099a:	4629      	mov	r1, r5
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f000 fb3a 	bl	8001018 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	6075      	str	r5, [r6, #4]
 80009a6:	4620      	mov	r0, r4
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80009a8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80009aa:	2001      	movs	r0, #1
 80009ac:	e7fc      	b.n	80009a8 <HAL_InitTick+0x34>
 80009ae:	bf00      	nop
 80009b0:	20000004 	.word	0x20000004
 80009b4:	20000008 	.word	0x20000008

080009b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_Init+0x20>)
{
 80009ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	6813      	ldr	r3, [r2, #0]
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 fb15 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	200f      	movs	r0, #15
 80009cc:	f7ff ffd2 	bl	8000974 <HAL_InitTick>
  HAL_MspInit();
 80009d0:	f7ff fd9a 	bl	8000508 <HAL_MspInit>
}
 80009d4:	2000      	movs	r0, #0
 80009d6:	bd08      	pop	{r3, pc}
 80009d8:	40022000 	.word	0x40022000

080009dc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <HAL_IncTick+0x10>)
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <HAL_IncTick+0x14>)
 80009e0:	6811      	ldr	r1, [r2, #0]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	440b      	add	r3, r1
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	200001e8 	.word	0x200001e8
 80009f0:	20000008 	.word	0x20000008

080009f4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80009f4:	4b01      	ldr	r3, [pc, #4]	; (80009fc <HAL_GetTick+0x8>)
 80009f6:	6818      	ldr	r0, [r3, #0]
}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200001e8 	.word	0x200001e8

08000a00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a00:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a02:	4604      	mov	r4, r0
 8000a04:	2800      	cmp	r0, #0
 8000a06:	d06e      	beq.n	8000ae6 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a08:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000a0c:	b90b      	cbnz	r3, 8000a12 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a0e:	f7ff fc1d 	bl	800024c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a12:	6822      	ldr	r2, [r4, #0]
 8000a14:	6813      	ldr	r3, [r2, #0]
 8000a16:	f023 0302 	bic.w	r3, r3, #2
 8000a1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a1c:	f7ff ffea 	bl	80009f4 <HAL_GetTick>
 8000a20:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	0791      	lsls	r1, r2, #30
 8000a28:	d451      	bmi.n	8000ace <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	f042 0201 	orr.w	r2, r2, #1
 8000a30:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a32:	f7ff ffdf 	bl	80009f4 <HAL_GetTick>
 8000a36:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a38:	6823      	ldr	r3, [r4, #0]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	07d2      	lsls	r2, r2, #31
 8000a3e:	d554      	bpl.n	8000aea <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a40:	7e22      	ldrb	r2, [r4, #24]
 8000a42:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	bf0c      	ite	eq
 8000a48:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a4c:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a52:	7e62      	ldrb	r2, [r4, #25]
 8000a54:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	bf0c      	ite	eq
 8000a5a:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a5e:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a64:	7ea2      	ldrb	r2, [r4, #26]
 8000a66:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	bf0c      	ite	eq
 8000a6c:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a70:	f022 0220 	bicne.w	r2, r2, #32
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a76:	7ee2      	ldrb	r2, [r4, #27]
 8000a78:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	bf0c      	ite	eq
 8000a7e:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a82:	f042 0210 	orrne.w	r2, r2, #16
 8000a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a88:	7f22      	ldrb	r2, [r4, #28]
 8000a8a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	bf0c      	ite	eq
 8000a90:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a94:	f022 0208 	bicne.w	r2, r2, #8
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a9a:	7f62      	ldrb	r2, [r4, #29]
 8000a9c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	bf0c      	ite	eq
 8000aa2:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000aa6:	f022 0204 	bicne.w	r2, r2, #4
 8000aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000aac:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	6921      	ldr	r1, [r4, #16]
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	6961      	ldr	r1, [r4, #20]
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	6861      	ldr	r1, [r4, #4]
 8000abc:	3901      	subs	r1, #1
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ac2:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ac4:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ac6:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000ac8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000acc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ace:	f7ff ff91 	bl	80009f4 <HAL_GetTick>
 8000ad2:	1b40      	subs	r0, r0, r5
 8000ad4:	280a      	cmp	r0, #10
 8000ad6:	d9a4      	bls.n	8000a22 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ade:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ae0:	2305      	movs	r3, #5
 8000ae2:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	e7f0      	b.n	8000acc <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aea:	f7ff ff83 	bl	80009f4 <HAL_GetTick>
 8000aee:	1b40      	subs	r0, r0, r5
 8000af0:	280a      	cmp	r0, #10
 8000af2:	d9a1      	bls.n	8000a38 <HAL_CAN_Init+0x38>
 8000af4:	e7f0      	b.n	8000ad8 <HAL_CAN_Init+0xd8>

08000af6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000af6:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000af8:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000afc:	3b01      	subs	r3, #1
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d862      	bhi.n	8000bc8 <HAL_CAN_ConfigFilter+0xd2>
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b02:	6803      	ldr	r3, [r0, #0]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b04:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b08:	f042 0201 	orr.w	r2, r2, #1
 8000b0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b10:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b12:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b16:	2401      	movs	r4, #1
 8000b18:	f002 001f 	and.w	r0, r2, #31
 8000b1c:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b20:	ea25 0500 	bic.w	r5, r5, r0
 8000b24:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b28:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b2a:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b2c:	bb85      	cbnz	r5, 8000b90 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b2e:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b32:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b34:	4025      	ands	r5, r4
 8000b36:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b3a:	888d      	ldrh	r5, [r1, #4]
 8000b3c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b40:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b44:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b48:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b4a:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b4c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b50:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b54:	698a      	ldr	r2, [r1, #24]
 8000b56:	bb6a      	cbnz	r2, 8000bb4 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b5c:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b62:	690a      	ldr	r2, [r1, #16]
 8000b64:	bb52      	cbnz	r2, 8000bbc <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b6a:	4014      	ands	r4, r2
 8000b6c:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b70:	6a0a      	ldr	r2, [r1, #32]
 8000b72:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b74:	bf02      	ittt	eq
 8000b76:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8000b7a:	4310      	orreq	r0, r2
 8000b7c:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b80:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000b84:	f022 0201 	bic.w	r2, r2, #1
 8000b88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000b8c:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b90:	2d01      	cmp	r5, #1
 8000b92:	d1df      	bne.n	8000b54 <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b94:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b98:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b9a:	4305      	orrs	r5, r0
 8000b9c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ba0:	888d      	ldrh	r5, [r1, #4]
 8000ba2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ba6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000baa:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bae:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bb0:	898d      	ldrh	r5, [r1, #12]
 8000bb2:	e7cb      	b.n	8000b4c <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000bb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bb8:	4302      	orrs	r2, r0
 8000bba:	e7d0      	b.n	8000b5e <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bbc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bc0:	4302      	orrs	r2, r0
 8000bc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000bc6:	e7d3      	b.n	8000b70 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bce:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	e7dc      	b.n	8000b8e <HAL_CAN_ConfigFilter+0x98>

08000bd4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bd4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bd6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000bda:	2b01      	cmp	r3, #1
{
 8000bdc:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000bde:	b2dd      	uxtb	r5, r3
 8000be0:	d120      	bne.n	8000c24 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000be2:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000be4:	2302      	movs	r3, #2
 8000be6:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bea:	6813      	ldr	r3, [r2, #0]
 8000bec:	f023 0301 	bic.w	r3, r3, #1
 8000bf0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000bf2:	f7ff feff 	bl	80009f4 <HAL_GetTick>
 8000bf6:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f013 0301 	ands.w	r3, r3, #1
 8000c00:	d102      	bne.n	8000c08 <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c02:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c04:	461d      	mov	r5, r3
 8000c06:	e00b      	b.n	8000c20 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c08:	f7ff fef4 	bl	80009f4 <HAL_GetTick>
 8000c0c:	1b80      	subs	r0, r0, r6
 8000c0e:	280a      	cmp	r0, #10
 8000c10:	d9f2      	bls.n	8000bf8 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000c20:	4628      	mov	r0, r5
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c2a:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000c2c:	2501      	movs	r5, #1
 8000c2e:	e7f7      	b.n	8000c20 <HAL_CAN_Start+0x4c>

08000c30 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c30:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c32:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c36:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c38:	3d01      	subs	r5, #1
 8000c3a:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c3c:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000c3e:	d843      	bhi.n	8000cc8 <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c40:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000c44:	d03c      	beq.n	8000cc0 <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c46:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000c4a:	2c03      	cmp	r4, #3
 8000c4c:	f04f 0501 	mov.w	r5, #1
 8000c50:	d105      	bne.n	8000c5e <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000c52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c58:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	e02a      	b.n	8000cb4 <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c5e:	40a5      	lsls	r5, r4
 8000c60:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000c62:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000c66:	f104 0318 	add.w	r3, r4, #24
 8000c6a:	bb20      	cbnz	r0, 8000cb6 <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c6c:	6808      	ldr	r0, [r1, #0]
 8000c6e:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c76:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8000c7a:	690d      	ldr	r5, [r1, #16]
 8000c7c:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c80:	7d09      	ldrb	r1, [r1, #20]
 8000c82:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c84:	bf08      	it	eq
 8000c86:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000c8a:	ea4f 1004 	mov.w	r0, r4, lsl #4
 8000c8e:	bf04      	itt	eq
 8000c90:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000c94:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c98:	4406      	add	r6, r0
 8000c9a:	6851      	ldr	r1, [r2, #4]
 8000c9c:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ca0:	6812      	ldr	r2, [r2, #0]
 8000ca2:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ca6:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000caa:	f042 0201 	orr.w	r2, r2, #1
 8000cae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8000cb2:	2000      	movs	r0, #0
  }
}
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cb6:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000cb8:	4338      	orrs	r0, r7
 8000cba:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000cbe:	e7d8      	b.n	8000c72 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000cc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc6:	e7c7      	b.n	8000c58 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cce:	e7c3      	b.n	8000c58 <HAL_CAN_AddTxMessage+0x28>

08000cd0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cd2:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cd6:	3c01      	subs	r4, #1
 8000cd8:	2c01      	cmp	r4, #1
 8000cda:	d86c      	bhi.n	8000db6 <HAL_CAN_GetRxMessage+0xe6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000cdc:	6806      	ldr	r6, [r0, #0]
 8000cde:	b941      	cbnz	r1, 8000cf2 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ce0:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ce2:	07a4      	lsls	r4, r4, #30
 8000ce4:	d107      	bne.n	8000cf6 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ce6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ce8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cec:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000cee:	2001      	movs	r0, #1
 8000cf0:	e056      	b.n	8000da0 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cf2:	6934      	ldr	r4, [r6, #16]
 8000cf4:	e7f5      	b.n	8000ce2 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000cf6:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8000cfa:	010c      	lsls	r4, r1, #4
 8000cfc:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000d00:	f007 0704 	and.w	r7, r7, #4
 8000d04:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d06:	2f00      	cmp	r7, #0
 8000d08:	d14b      	bne.n	8000da2 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d0a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000d0e:	0d7f      	lsrs	r7, r7, #21
 8000d10:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d12:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000d16:	f007 0702 	and.w	r7, r7, #2
 8000d1a:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d1c:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000d20:	f007 070f 	and.w	r7, r7, #15
 8000d24:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d26:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d2a:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000d2e:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d30:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d34:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d36:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d38:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000d3a:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000d3e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000d40:	6802      	ldr	r2, [r0, #0]
 8000d42:	4422      	add	r2, r4
 8000d44:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000d48:	0a12      	lsrs	r2, r2, #8
 8000d4a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000d4c:	6802      	ldr	r2, [r0, #0]
 8000d4e:	4422      	add	r2, r4
 8000d50:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000d54:	0c12      	lsrs	r2, r2, #16
 8000d56:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000d58:	6802      	ldr	r2, [r0, #0]
 8000d5a:	4422      	add	r2, r4
 8000d5c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000d60:	0e12      	lsrs	r2, r2, #24
 8000d62:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000d64:	6802      	ldr	r2, [r0, #0]
 8000d66:	4422      	add	r2, r4
 8000d68:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000d6c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000d6e:	6802      	ldr	r2, [r0, #0]
 8000d70:	4422      	add	r2, r4
 8000d72:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000d76:	0a12      	lsrs	r2, r2, #8
 8000d78:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d7a:	6802      	ldr	r2, [r0, #0]
 8000d7c:	4422      	add	r2, r4
 8000d7e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000d82:	0c12      	lsrs	r2, r2, #16
 8000d84:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000d86:	6802      	ldr	r2, [r0, #0]
 8000d88:	4414      	add	r4, r2
 8000d8a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000d8e:	0e12      	lsrs	r2, r2, #24
 8000d90:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d92:	6803      	ldr	r3, [r0, #0]
 8000d94:	b951      	cbnz	r1, 8000dac <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	f042 0220 	orr.w	r2, r2, #32
 8000d9c:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000d9e:	2000      	movs	r0, #0
  }
}
 8000da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000da2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000da6:	08ff      	lsrs	r7, r7, #3
 8000da8:	6057      	str	r7, [r2, #4]
 8000daa:	e7b2      	b.n	8000d12 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	f042 0220 	orr.w	r2, r2, #32
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	e7f3      	b.n	8000d9e <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000db6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	e796      	b.n	8000cec <HAL_CAN_GetRxMessage+0x1c>

08000dbe <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dbe:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d805      	bhi.n	8000dd4 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000dc8:	6802      	ldr	r2, [r0, #0]
 8000dca:	6953      	ldr	r3, [r2, #20]
 8000dcc:	4319      	orrs	r1, r3
 8000dce:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dda:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000ddc:	2001      	movs	r0, #1
  }
}
 8000dde:	4770      	bx	lr

08000de0 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000de0:	4770      	bx	lr

08000de2 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000de2:	4770      	bx	lr

08000de4 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000de4:	4770      	bx	lr

08000de6 <HAL_CAN_TxMailbox0AbortCallback>:
 8000de6:	4770      	bx	lr

08000de8 <HAL_CAN_TxMailbox1AbortCallback>:
 8000de8:	4770      	bx	lr

08000dea <HAL_CAN_TxMailbox2AbortCallback>:
 8000dea:	4770      	bx	lr

08000dec <HAL_CAN_RxFifo0FullCallback>:
 8000dec:	4770      	bx	lr

08000dee <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000dee:	4770      	bx	lr

08000df0 <HAL_CAN_RxFifo1FullCallback>:
 8000df0:	4770      	bx	lr

08000df2 <HAL_CAN_SleepCallback>:
 8000df2:	4770      	bx	lr

08000df4 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000df4:	4770      	bx	lr

08000df6 <HAL_CAN_ErrorCallback>:
 8000df6:	4770      	bx	lr

08000df8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000dfc:	6803      	ldr	r3, [r0, #0]
 8000dfe:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000e00:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000e04:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000e06:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000e0a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000e0e:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e12:	f016 0401 	ands.w	r4, r6, #1
{
 8000e16:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e18:	d022      	beq.n	8000e60 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e1a:	f017 0401 	ands.w	r4, r7, #1
 8000e1e:	d007      	beq.n	8000e30 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e20:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e22:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e24:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e26:	f140 80a5 	bpl.w	8000f74 <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e2a:	f7ff ffd9 	bl	8000de0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e2e:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e30:	05fb      	lsls	r3, r7, #23
 8000e32:	d509      	bpl.n	8000e48 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e3a:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e3c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e3e:	f140 80a7 	bpl.w	8000f90 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e42:	4628      	mov	r0, r5
 8000e44:	f7ff ffcd 	bl	8000de2 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e48:	03fb      	lsls	r3, r7, #15
 8000e4a:	d509      	bpl.n	8000e60 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e52:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e54:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e56:	f140 80a9 	bpl.w	8000fac <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e5a:	4628      	mov	r0, r5
 8000e5c:	f7ff ffc2 	bl	8000de4 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000e60:	0733      	lsls	r3, r6, #28
 8000e62:	d507      	bpl.n	8000e74 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000e64:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000e68:	bf1f      	itttt	ne
 8000e6a:	682b      	ldrne	r3, [r5, #0]
 8000e6c:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000e6e:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000e72:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000e74:	0777      	lsls	r7, r6, #29
 8000e76:	d508      	bpl.n	8000e8a <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000e78:	f01b 0f08 	tst.w	fp, #8
 8000e7c:	d005      	beq.n	8000e8a <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000e7e:	682b      	ldr	r3, [r5, #0]
 8000e80:	2208      	movs	r2, #8
 8000e82:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000e84:	4628      	mov	r0, r5
 8000e86:	f7ff ffb1 	bl	8000dec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000e8a:	07b0      	lsls	r0, r6, #30
 8000e8c:	d506      	bpl.n	8000e9c <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000e8e:	682b      	ldr	r3, [r5, #0]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	0799      	lsls	r1, r3, #30
 8000e94:	d002      	beq.n	8000e9c <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000e96:	4628      	mov	r0, r5
 8000e98:	f7ff fa16 	bl	80002c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000e9c:	0672      	lsls	r2, r6, #25
 8000e9e:	d507      	bpl.n	8000eb0 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000ea0:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000ea4:	bf1f      	itttt	ne
 8000ea6:	682b      	ldrne	r3, [r5, #0]
 8000ea8:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000eaa:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000eae:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000eb0:	06b3      	lsls	r3, r6, #26
 8000eb2:	d508      	bpl.n	8000ec6 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000eb4:	f01a 0f08 	tst.w	sl, #8
 8000eb8:	d005      	beq.n	8000ec6 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000eba:	682b      	ldr	r3, [r5, #0]
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	f7ff ff95 	bl	8000df0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000ec6:	06f7      	lsls	r7, r6, #27
 8000ec8:	d506      	bpl.n	8000ed8 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000eca:	682b      	ldr	r3, [r5, #0]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	0798      	lsls	r0, r3, #30
 8000ed0:	d002      	beq.n	8000ed8 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000ed2:	4628      	mov	r0, r5
 8000ed4:	f7ff ff8b 	bl	8000dee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000ed8:	03b1      	lsls	r1, r6, #14
 8000eda:	d508      	bpl.n	8000eee <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000edc:	f019 0f10 	tst.w	r9, #16
 8000ee0:	d005      	beq.n	8000eee <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000ee2:	682b      	ldr	r3, [r5, #0]
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000ee8:	4628      	mov	r0, r5
 8000eea:	f7ff ff82 	bl	8000df2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000eee:	03f2      	lsls	r2, r6, #15
 8000ef0:	d508      	bpl.n	8000f04 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ef2:	f019 0f08 	tst.w	r9, #8
 8000ef6:	d005      	beq.n	8000f04 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	2208      	movs	r2, #8
 8000efc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000efe:	4628      	mov	r0, r5
 8000f00:	f7ff ff78 	bl	8000df4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000f04:	0433      	lsls	r3, r6, #16
 8000f06:	d52c      	bpl.n	8000f62 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000f08:	f019 0f04 	tst.w	r9, #4
 8000f0c:	682a      	ldr	r2, [r5, #0]
 8000f0e:	d026      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f10:	05f7      	lsls	r7, r6, #23
 8000f12:	d504      	bpl.n	8000f1e <HAL_CAN_IRQHandler+0x126>
 8000f14:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000f18:	bf18      	it	ne
 8000f1a:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f1e:	05b0      	lsls	r0, r6, #22
 8000f20:	d504      	bpl.n	8000f2c <HAL_CAN_IRQHandler+0x134>
 8000f22:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000f26:	bf18      	it	ne
 8000f28:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000f2c:	0571      	lsls	r1, r6, #21
 8000f2e:	d504      	bpl.n	8000f3a <HAL_CAN_IRQHandler+0x142>
 8000f30:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000f34:	bf18      	it	ne
 8000f36:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f3a:	0533      	lsls	r3, r6, #20
 8000f3c:	d50f      	bpl.n	8000f5e <HAL_CAN_IRQHandler+0x166>
 8000f3e:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000f42:	d00c      	beq.n	8000f5e <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000f44:	2b40      	cmp	r3, #64	; 0x40
 8000f46:	d04f      	beq.n	8000fe8 <HAL_CAN_IRQHandler+0x1f0>
 8000f48:	d83e      	bhi.n	8000fc8 <HAL_CAN_IRQHandler+0x1d0>
 8000f4a:	2b20      	cmp	r3, #32
 8000f4c:	d046      	beq.n	8000fdc <HAL_CAN_IRQHandler+0x1e4>
 8000f4e:	2b30      	cmp	r3, #48	; 0x30
 8000f50:	d047      	beq.n	8000fe2 <HAL_CAN_IRQHandler+0x1ea>
 8000f52:	2b10      	cmp	r3, #16
 8000f54:	d03f      	beq.n	8000fd6 <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000f56:	6993      	ldr	r3, [r2, #24]
 8000f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f5c:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000f5e:	2304      	movs	r3, #4
 8000f60:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000f62:	b12c      	cbz	r4, 8000f70 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000f64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f66:	431c      	orrs	r4, r3
 8000f68:	626c      	str	r4, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	f7ff ff43 	bl	8000df6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f74:	077a      	lsls	r2, r7, #29
 8000f76:	d405      	bmi.n	8000f84 <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f78:	f017 0408 	ands.w	r4, r7, #8
 8000f7c:	d105      	bne.n	8000f8a <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f7e:	f7ff ff32 	bl	8000de6 <HAL_CAN_TxMailbox0AbortCallback>
 8000f82:	e755      	b.n	8000e30 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f84:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000f88:	e752      	b.n	8000e30 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f8a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000f8e:	e74f      	b.n	8000e30 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f90:	0579      	lsls	r1, r7, #21
 8000f92:	d502      	bpl.n	8000f9a <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f94:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000f98:	e756      	b.n	8000e48 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f9a:	053a      	lsls	r2, r7, #20
 8000f9c:	d502      	bpl.n	8000fa4 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f9e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000fa2:	e751      	b.n	8000e48 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000fa4:	4628      	mov	r0, r5
 8000fa6:	f7ff ff1f 	bl	8000de8 <HAL_CAN_TxMailbox1AbortCallback>
 8000faa:	e74d      	b.n	8000e48 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fac:	0379      	lsls	r1, r7, #13
 8000fae:	d502      	bpl.n	8000fb6 <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000fb0:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000fb4:	e754      	b.n	8000e60 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000fb6:	033a      	lsls	r2, r7, #12
 8000fb8:	d502      	bpl.n	8000fc0 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000fba:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000fbe:	e74f      	b.n	8000e60 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f7ff ff12 	bl	8000dea <HAL_CAN_TxMailbox2AbortCallback>
 8000fc6:	e74b      	b.n	8000e60 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000fc8:	2b50      	cmp	r3, #80	; 0x50
 8000fca:	d010      	beq.n	8000fee <HAL_CAN_IRQHandler+0x1f6>
 8000fcc:	2b60      	cmp	r3, #96	; 0x60
 8000fce:	d1c2      	bne.n	8000f56 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000fd0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000fd4:	e7bf      	b.n	8000f56 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8000fd6:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000fda:	e7bc      	b.n	8000f56 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000fdc:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000fe0:	e7b9      	b.n	8000f56 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000fe2:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000fe6:	e7b6      	b.n	8000f56 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8000fe8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000fec:	e7b3      	b.n	8000f56 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8000fee:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000ff2:	e7b0      	b.n	8000f56 <HAL_CAN_IRQHandler+0x15e>

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4907      	ldr	r1, [pc, #28]	; (8001014 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ff6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001004:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001010:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b530      	push	{r4, r5, lr}
 800101c:	68dc      	ldr	r4, [r3, #12]
 800101e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001022:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	2d04      	cmp	r5, #4
 800102a:	bf28      	it	cs
 800102c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001034:	bf8c      	ite	hi
 8001036:	3c03      	subhi	r4, #3
 8001038:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103a:	fa03 f505 	lsl.w	r5, r3, r5
 800103e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001042:	40a3      	lsls	r3, r4
 8001044:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800104a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	bfac      	ite	ge
 8001052:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	4a08      	ldrlt	r2, [pc, #32]	; (8001078 <HAL_NVIC_SetPriority+0x60>)
 8001058:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800105c:	bfb8      	it	lt
 800105e:	f000 000f 	andlt.w	r0, r0, #15
 8001062:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	bfaa      	itet	ge
 8001066:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001070:	bd30      	pop	{r4, r5, pc}
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	e000ed14 	.word	0xe000ed14

0800107c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800107c:	2800      	cmp	r0, #0
 800107e:	db08      	blt.n	8001092 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001080:	0942      	lsrs	r2, r0, #5
 8001082:	2301      	movs	r3, #1
 8001084:	f000 001f 	and.w	r0, r0, #31
 8001088:	fa03 f000 	lsl.w	r0, r3, r0
 800108c:	4b01      	ldr	r3, [pc, #4]	; (8001094 <HAL_NVIC_EnableIRQ+0x18>)
 800108e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100

08001098 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	3801      	subs	r0, #1
 800109a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800109e:	d20a      	bcs.n	80010b6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	21f0      	movs	r1, #240	; 0xf0
 80010a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80010c4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80010c6:	b320      	cbz	r0, 8001112 <HAL_DMA_Init+0x4e>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010c8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80010cc:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ce:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80010d0:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d2:	4323      	orrs	r3, r4
 80010d4:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 80010d6:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d8:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010da:	6944      	ldr	r4, [r0, #20]
 80010dc:	4323      	orrs	r3, r4
 80010de:	6984      	ldr	r4, [r0, #24]
 80010e0:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e2:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80010e4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80010e8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ec:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80010ee:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80010f0:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_DMA_Init+0x54>)
 80010f4:	2214      	movs	r2, #20
 80010f6:	440b      	add	r3, r1
 80010f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_DMA_Init+0x58>)
 8001102:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001104:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001108:	2300      	movs	r3, #0
 800110a:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 800110c:	8402      	strh	r2, [r0, #32]
  return HAL_OK;
 800110e:	4618      	mov	r0, r3
}  
 8001110:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001112:	2001      	movs	r0, #1
 8001114:	e7fc      	b.n	8001110 <HAL_DMA_Init+0x4c>
 8001116:	bf00      	nop
 8001118:	bffdfff8 	.word	0xbffdfff8
 800111c:	40020000 	.word	0x40020000

08001120 <HAL_DMA_Abort_IT>:
{  
 8001120:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001122:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001126:	2a02      	cmp	r2, #2
 8001128:	d003      	beq.n	8001132 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112a:	2204      	movs	r2, #4
 800112c:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800112e:	2001      	movs	r0, #1
}
 8001130:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001132:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8001134:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001136:	6811      	ldr	r1, [r2, #0]
 8001138:	f021 010e 	bic.w	r1, r1, #14
 800113c:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800113e:	6811      	ldr	r1, [r2, #0]
 8001140:	f021 0101 	bic.w	r1, r1, #1
 8001144:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001146:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
 800114a:	2201      	movs	r2, #1
 800114c:	40a2      	lsls	r2, r4
 800114e:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001154:	8402      	strh	r2, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001156:	b113      	cbz	r3, 800115e <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 8001158:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800115a:	2000      	movs	r0, #0
 800115c:	e7e8      	b.n	8001130 <HAL_DMA_Abort_IT+0x10>
 800115e:	4618      	mov	r0, r3
 8001160:	e7e6      	b.n	8001130 <HAL_DMA_Abort_IT+0x10>

08001162 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001162:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001164:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8001166:	6803      	ldr	r3, [r0, #0]
{
 8001168:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800116a:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800116c:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800116e:	2404      	movs	r4, #4
 8001170:	4094      	lsls	r4, r2
 8001172:	4234      	tst	r4, r6
 8001174:	d00e      	beq.n	8001194 <HAL_DMA_IRQHandler+0x32>
 8001176:	f015 0f04 	tst.w	r5, #4
 800117a:	d00b      	beq.n	8001194 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001180:	bf5e      	ittt	pl
 8001182:	681a      	ldrpl	r2, [r3, #0]
 8001184:	f022 0204 	bicpl.w	r2, r2, #4
 8001188:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800118a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800118c:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800118e:	b363      	cbz	r3, 80011ea <HAL_DMA_IRQHandler+0x88>
}  
 8001190:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8001192:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001194:	2402      	movs	r4, #2
 8001196:	4094      	lsls	r4, r2
 8001198:	4234      	tst	r4, r6
 800119a:	d012      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x60>
 800119c:	f015 0f02 	tst.w	r5, #2
 80011a0:	d00f      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	0695      	lsls	r5, r2, #26
 80011a6:	d406      	bmi.n	80011b6 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	f022 020a 	bic.w	r2, r2, #10
 80011ae:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 80011b6:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011b8:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 80011ba:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80011be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011c0:	e7e5      	b.n	800118e <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011c2:	2408      	movs	r4, #8
 80011c4:	4094      	lsls	r4, r2
 80011c6:	4234      	tst	r4, r6
 80011c8:	d00f      	beq.n	80011ea <HAL_DMA_IRQHandler+0x88>
 80011ca:	072c      	lsls	r4, r5, #28
 80011cc:	d50d      	bpl.n	80011ea <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	f024 040e 	bic.w	r4, r4, #14
 80011d4:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011d6:	2301      	movs	r3, #1
 80011d8:	fa03 f202 	lsl.w	r2, r3, r2
 80011dc:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011de:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 80011e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e4:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80011e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80011e8:	e7d1      	b.n	800118e <HAL_DMA_IRQHandler+0x2c>
}  
 80011ea:	bc70      	pop	{r4, r5, r6}
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8001360 <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f8:	4c57      	ldr	r4, [pc, #348]	; (8001358 <HAL_GPIO_Init+0x168>)
  uint32_t position = 0x00u;
 80011fa:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011fc:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001200:	680a      	ldr	r2, [r1, #0]
 8001202:	fa32 f503 	lsrs.w	r5, r2, r3
 8001206:	d102      	bne.n	800120e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001208:	b003      	add	sp, #12
 800120a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800120e:	2501      	movs	r5, #1
 8001210:	fa05 fa03 	lsl.w	sl, r5, r3
    if (iocurrent != 0x00u)
 8001214:	ea1a 0202 	ands.w	r2, sl, r2
 8001218:	f000 8095 	beq.w	8001346 <HAL_GPIO_Init+0x156>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121c:	684d      	ldr	r5, [r1, #4]
 800121e:	f025 0e10 	bic.w	lr, r5, #16
 8001222:	f1be 0f02 	cmp.w	lr, #2
 8001226:	d111      	bne.n	800124c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3u];
 8001228:	08df      	lsrs	r7, r3, #3
 800122a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800122e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001232:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001234:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001238:	fa09 fb0c 	lsl.w	fp, r9, ip
 800123c:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001240:	690e      	ldr	r6, [r1, #16]
 8001242:	fa06 f60c 	lsl.w	r6, r6, ip
 8001246:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3u] = temp;
 800124a:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 800124c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001250:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001254:	2603      	movs	r6, #3
 8001256:	fa06 f70c 	lsl.w	r7, r6, ip
 800125a:	ea2b 0b07 	bic.w	fp, fp, r7
 800125e:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001260:	f005 0703 	and.w	r7, r5, #3
 8001264:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001268:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126c:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001270:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8001274:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001276:	d811      	bhi.n	800129c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001278:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800127a:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800127e:	68cf      	ldr	r7, [r1, #12]
 8001280:	fa07 f70c 	lsl.w	r7, r7, ip
 8001284:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001288:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800128a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001290:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001294:	409f      	lsls	r7, r3
 8001296:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800129a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800129c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800129e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012a0:	688e      	ldr	r6, [r1, #8]
 80012a2:	fa06 f60c 	lsl.w	r6, r6, ip
 80012a6:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80012a8:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012aa:	00ee      	lsls	r6, r5, #3
 80012ac:	d54b      	bpl.n	8001346 <HAL_GPIO_Init+0x156>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80012b2:	f046 0601 	orr.w	r6, r6, #1
 80012b6:	f8c8 6018 	str.w	r6, [r8, #24]
 80012ba:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80012be:	f023 0703 	bic.w	r7, r3, #3
 80012c2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80012c6:	f006 0601 	and.w	r6, r6, #1
 80012ca:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80012ce:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80012d6:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80012dc:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e4:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e8:	d02f      	beq.n	800134a <HAL_GPIO_Init+0x15a>
 80012ea:	4e1c      	ldr	r6, [pc, #112]	; (800135c <HAL_GPIO_Init+0x16c>)
 80012ec:	42b0      	cmp	r0, r6
 80012ee:	d02e      	beq.n	800134e <HAL_GPIO_Init+0x15e>
 80012f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012f4:	42b0      	cmp	r0, r6
 80012f6:	d02c      	beq.n	8001352 <HAL_GPIO_Init+0x162>
 80012f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012fc:	42b0      	cmp	r0, r6
 80012fe:	bf0c      	ite	eq
 8001300:	2603      	moveq	r6, #3
 8001302:	2605      	movne	r6, #5
 8001304:	fa06 f60c 	lsl.w	r6, r6, ip
 8001308:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800130c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800130e:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8001310:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001312:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001316:	bf0c      	ite	eq
 8001318:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800131a:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 800131c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800131e:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001320:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001324:	bf0c      	ite	eq
 8001326:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001328:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 800132a:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800132c:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800132e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001332:	bf0c      	ite	eq
 8001334:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001336:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8001338:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800133a:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133c:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 800133e:	bf54      	ite	pl
 8001340:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001342:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8001344:	60e6      	str	r6, [r4, #12]
    position++;
 8001346:	3301      	adds	r3, #1
 8001348:	e75a      	b.n	8001200 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800134a:	2600      	movs	r6, #0
 800134c:	e7da      	b.n	8001304 <HAL_GPIO_Init+0x114>
 800134e:	2601      	movs	r6, #1
 8001350:	e7d8      	b.n	8001304 <HAL_GPIO_Init+0x114>
 8001352:	2602      	movs	r6, #2
 8001354:	e7d6      	b.n	8001304 <HAL_GPIO_Init+0x114>
 8001356:	bf00      	nop
 8001358:	40010400 	.word	0x40010400
 800135c:	48000400 	.word	0x48000400
 8001360:	40021000 	.word	0x40021000

08001364 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001364:	b10a      	cbz	r2, 800136a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001366:	6181      	str	r1, [r0, #24]
 8001368:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800136a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800136c:	4770      	bx	lr

0800136e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800136e:	6943      	ldr	r3, [r0, #20]
 8001370:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001372:	bf18      	it	ne
 8001374:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001376:	6181      	str	r1, [r0, #24]
  }
}
 8001378:	4770      	bx	lr
	...

0800137c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	4605      	mov	r5, r0
 8001382:	2800      	cmp	r0, #0
 8001384:	d035      	beq.n	80013f2 <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	6803      	ldr	r3, [r0, #0]
 8001388:	07da      	lsls	r2, r3, #31
 800138a:	d411      	bmi.n	80013b0 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	079b      	lsls	r3, r3, #30
 8001390:	f100 8088 	bmi.w	80014a4 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	071c      	lsls	r4, r3, #28
 8001398:	f100 80f8 	bmi.w	800158c <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	0758      	lsls	r0, r3, #29
 80013a0:	f100 8141 	bmi.w	8001626 <HAL_RCC_OscConfig+0x2aa>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a4:	69e8      	ldr	r0, [r5, #28]
 80013a6:	2800      	cmp	r0, #0
 80013a8:	f040 81d7 	bne.w	800175a <HAL_RCC_OscConfig+0x3de>
        }
      }
    }
  }

  return HAL_OK;
 80013ac:	2000      	movs	r0, #0
 80013ae:	e04b      	b.n	8001448 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013b0:	4cba      	ldr	r4, [pc, #744]	; (800169c <HAL_RCC_OscConfig+0x320>)
 80013b2:	6863      	ldr	r3, [r4, #4]
 80013b4:	f003 030c 	and.w	r3, r3, #12
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d007      	beq.n	80013cc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013bc:	6863      	ldr	r3, [r4, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d117      	bne.n	80013f6 <HAL_RCC_OscConfig+0x7a>
 80013c6:	6863      	ldr	r3, [r4, #4]
 80013c8:	03df      	lsls	r7, r3, #15
 80013ca:	d514      	bpl.n	80013f6 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	6821      	ldr	r1, [r4, #0]
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	f003 031f 	and.w	r3, r3, #31
 80013e2:	2201      	movs	r2, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	420b      	tst	r3, r1
 80013ea:	d0cf      	beq.n	800138c <HAL_RCC_OscConfig+0x10>
 80013ec:	686b      	ldr	r3, [r5, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1cc      	bne.n	800138c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 80013f2:	2001      	movs	r0, #1
 80013f4:	e028      	b.n	8001448 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f6:	686a      	ldr	r2, [r5, #4]
 80013f8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80013fc:	d127      	bne.n	800144e <HAL_RCC_OscConfig+0xd2>
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001406:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001408:	68a9      	ldr	r1, [r5, #8]
 800140a:	f023 030f 	bic.w	r3, r3, #15
 800140e:	430b      	orrs	r3, r1
 8001410:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001412:	b362      	cbz	r2, 800146e <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8001414:	f7ff faee 	bl	80009f4 <HAL_GetTick>
 8001418:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800141c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	f04f 0801 	mov.w	r8, #1
 8001422:	fa97 f3a7 	rbit	r3, r7
 8001426:	6822      	ldr	r2, [r4, #0]
 8001428:	fa97 f3a7 	rbit	r3, r7
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	fa08 f303 	lsl.w	r3, r8, r3
 8001438:	4213      	tst	r3, r2
 800143a:	d1a7      	bne.n	800138c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fada 	bl	80009f4 <HAL_GetTick>
 8001440:	1b83      	subs	r3, r0, r6
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d9ed      	bls.n	8001422 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 8001446:	2003      	movs	r0, #3
}
 8001448:	b002      	add	sp, #8
 800144a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	b932      	cbnz	r2, 8001460 <HAL_RCC_OscConfig+0xe4>
 8001452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001456:	6023      	str	r3, [r4, #0]
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145e:	e7d1      	b.n	8001404 <HAL_RCC_OscConfig+0x88>
 8001460:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001464:	d1f5      	bne.n	8001452 <HAL_RCC_OscConfig+0xd6>
 8001466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146a:	6023      	str	r3, [r4, #0]
 800146c:	e7c7      	b.n	80013fe <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800146e:	f7ff fac1 	bl	80009f4 <HAL_GetTick>
 8001472:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8001476:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001478:	f04f 0801 	mov.w	r8, #1
 800147c:	fa97 f3a7 	rbit	r3, r7
 8001480:	6822      	ldr	r2, [r4, #0]
 8001482:	fa97 f3a7 	rbit	r3, r7
 8001486:	fab3 f383 	clz	r3, r3
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	fa08 f303 	lsl.w	r3, r8, r3
 8001492:	4213      	tst	r3, r2
 8001494:	f43f af7a 	beq.w	800138c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff faac 	bl	80009f4 <HAL_GetTick>
 800149c:	1b83      	subs	r3, r0, r6
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d9ec      	bls.n	800147c <HAL_RCC_OscConfig+0x100>
 80014a2:	e7d0      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014a4:	4c7d      	ldr	r4, [pc, #500]	; (800169c <HAL_RCC_OscConfig+0x320>)
 80014a6:	6863      	ldr	r3, [r4, #4]
 80014a8:	f013 0f0c 	tst.w	r3, #12
 80014ac:	d007      	beq.n	80014be <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014ae:	6863      	ldr	r3, [r4, #4]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d121      	bne.n	80014fc <HAL_RCC_OscConfig+0x180>
 80014b8:	6863      	ldr	r3, [r4, #4]
 80014ba:	03de      	lsls	r6, r3, #15
 80014bc:	d41e      	bmi.n	80014fc <HAL_RCC_OscConfig+0x180>
 80014be:	2302      	movs	r3, #2
 80014c0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c4:	6821      	ldr	r1, [r4, #0]
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2201      	movs	r2, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	420b      	tst	r3, r1
 80014da:	d002      	beq.n	80014e2 <HAL_RCC_OscConfig+0x166>
 80014dc:	692b      	ldr	r3, [r5, #16]
 80014de:	4293      	cmp	r3, r2
 80014e0:	d187      	bne.n	80013f2 <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e2:	6821      	ldr	r1, [r4, #0]
 80014e4:	23f8      	movs	r3, #248	; 0xf8
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	fab3 f283 	clz	r2, r3
 80014ee:	696b      	ldr	r3, [r5, #20]
 80014f0:	4093      	lsls	r3, r2
 80014f2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80014f6:	4313      	orrs	r3, r2
 80014f8:	6023      	str	r3, [r4, #0]
 80014fa:	e74b      	b.n	8001394 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fc:	692a      	ldr	r2, [r5, #16]
 80014fe:	2601      	movs	r6, #1
 8001500:	b30a      	cbz	r2, 8001546 <HAL_RCC_OscConfig+0x1ca>
 8001502:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800150e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	f04f 0802 	mov.w	r8, #2
 8001518:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800151a:	f7ff fa6b 	bl	80009f4 <HAL_GetTick>
 800151e:	4607      	mov	r7, r0
 8001520:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	6822      	ldr	r2, [r4, #0]
 8001526:	fa98 f3a8 	rbit	r3, r8
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	fa06 f303 	lsl.w	r3, r6, r3
 8001536:	4213      	tst	r3, r2
 8001538:	d1d3      	bne.n	80014e2 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fa5b 	bl	80009f4 <HAL_GetTick>
 800153e:	1bc3      	subs	r3, r0, r7
 8001540:	2b02      	cmp	r3, #2
 8001542:	d9ed      	bls.n	8001520 <HAL_RCC_OscConfig+0x1a4>
 8001544:	e77f      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
 8001546:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001552:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	f04f 0802 	mov.w	r8, #2
 800155c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800155e:	f7ff fa49 	bl	80009f4 <HAL_GetTick>
 8001562:	4607      	mov	r7, r0
 8001564:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001568:	6822      	ldr	r2, [r4, #0]
 800156a:	fa98 f3a8 	rbit	r3, r8
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	fa06 f303 	lsl.w	r3, r6, r3
 800157a:	4213      	tst	r3, r2
 800157c:	f43f af0a 	beq.w	8001394 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fa38 	bl	80009f4 <HAL_GetTick>
 8001584:	1bc3      	subs	r3, r0, r7
 8001586:	2b02      	cmp	r3, #2
 8001588:	d9ec      	bls.n	8001564 <HAL_RCC_OscConfig+0x1e8>
 800158a:	e75c      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158c:	69aa      	ldr	r2, [r5, #24]
 800158e:	4e43      	ldr	r6, [pc, #268]	; (800169c <HAL_RCC_OscConfig+0x320>)
 8001590:	4943      	ldr	r1, [pc, #268]	; (80016a0 <HAL_RCC_OscConfig+0x324>)
 8001592:	2401      	movs	r4, #1
 8001594:	b31a      	cbz	r2, 80015de <HAL_RCC_OscConfig+0x262>
 8001596:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800159a:	fab3 f383 	clz	r3, r3
 800159e:	440b      	add	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	2702      	movs	r7, #2
 80015a4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80015a6:	f7ff fa25 	bl	80009f4 <HAL_GetTick>
 80015aa:	4680      	mov	r8, r0
 80015ac:	fa97 f3a7 	rbit	r3, r7
 80015b0:	fa97 f3a7 	rbit	r3, r7
 80015b4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80015ba:	fa97 f3a7 	rbit	r3, r7
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	fa04 f303 	lsl.w	r3, r4, r3
 80015ca:	4213      	tst	r3, r2
 80015cc:	f47f aee6 	bne.w	800139c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fa10 	bl	80009f4 <HAL_GetTick>
 80015d4:	eba0 0308 	sub.w	r3, r0, r8
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d9e7      	bls.n	80015ac <HAL_RCC_OscConfig+0x230>
 80015dc:	e733      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
 80015de:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	440b      	add	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	2702      	movs	r7, #2
 80015ec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015ee:	f7ff fa01 	bl	80009f4 <HAL_GetTick>
 80015f2:	4680      	mov	r8, r0
 80015f4:	fa97 f3a7 	rbit	r3, r7
 80015f8:	fa97 f3a7 	rbit	r3, r7
 80015fc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001602:	fa97 f3a7 	rbit	r3, r7
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	fa04 f303 	lsl.w	r3, r4, r3
 8001612:	4213      	tst	r3, r2
 8001614:	f43f aec2 	beq.w	800139c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff f9ec 	bl	80009f4 <HAL_GetTick>
 800161c:	eba0 0308 	sub.w	r3, r0, r8
 8001620:	2b02      	cmp	r3, #2
 8001622:	d9e7      	bls.n	80015f4 <HAL_RCC_OscConfig+0x278>
 8001624:	e70f      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001626:	4c1d      	ldr	r4, [pc, #116]	; (800169c <HAL_RCC_OscConfig+0x320>)
 8001628:	69e3      	ldr	r3, [r4, #28]
 800162a:	00d9      	lsls	r1, r3, #3
 800162c:	d434      	bmi.n	8001698 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	69e3      	ldr	r3, [r4, #28]
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	61e3      	str	r3, [r4, #28]
 8001636:	69e3      	ldr	r3, [r4, #28]
 8001638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163c:	9301      	str	r3, [sp, #4]
 800163e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001640:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4f18      	ldr	r7, [pc, #96]	; (80016a4 <HAL_RCC_OscConfig+0x328>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	05da      	lsls	r2, r3, #23
 8001648:	d52e      	bpl.n	80016a8 <HAL_RCC_OscConfig+0x32c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164a:	68eb      	ldr	r3, [r5, #12]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d13c      	bne.n	80016ca <HAL_RCC_OscConfig+0x34e>
 8001650:	6a23      	ldr	r3, [r4, #32]
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001658:	f7ff f9cc 	bl	80009f4 <HAL_GetTick>
 800165c:	2702      	movs	r7, #2
 800165e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001660:	46ba      	mov	sl, r7
 8001662:	f04f 0901 	mov.w	r9, #1
 8001666:	fa97 f3a7 	rbit	r3, r7
 800166a:	fa97 f3a7 	rbit	r3, r7
 800166e:	2b00      	cmp	r3, #0
 8001670:	d06b      	beq.n	800174a <HAL_RCC_OscConfig+0x3ce>
 8001672:	6a22      	ldr	r2, [r4, #32]
 8001674:	fa9a f3aa 	rbit	r3, sl
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	fa09 f303 	lsl.w	r3, r9, r3
 8001684:	4213      	tst	r3, r2
 8001686:	d057      	beq.n	8001738 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 8001688:	2e00      	cmp	r6, #0
 800168a:	f43f ae8b 	beq.w	80013a4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800168e:	69e3      	ldr	r3, [r4, #28]
 8001690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001694:	61e3      	str	r3, [r4, #28]
 8001696:	e685      	b.n	80013a4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2600      	movs	r6, #0
 800169a:	e7d2      	b.n	8001642 <HAL_RCC_OscConfig+0x2c6>
 800169c:	40021000 	.word	0x40021000
 80016a0:	10908120 	.word	0x10908120
 80016a4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ae:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80016b0:	f7ff f9a0 	bl	80009f4 <HAL_GetTick>
 80016b4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	05db      	lsls	r3, r3, #23
 80016ba:	d4c6      	bmi.n	800164a <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016bc:	f7ff f99a 	bl	80009f4 <HAL_GetTick>
 80016c0:	eba0 0008 	sub.w	r0, r0, r8
 80016c4:	2864      	cmp	r0, #100	; 0x64
 80016c6:	d9f6      	bls.n	80016b6 <HAL_RCC_OscConfig+0x33a>
 80016c8:	e6bd      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ca:	bb3b      	cbnz	r3, 800171c <HAL_RCC_OscConfig+0x3a0>
 80016cc:	6a23      	ldr	r3, [r4, #32]
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6223      	str	r3, [r4, #32]
 80016d4:	6a23      	ldr	r3, [r4, #32]
 80016d6:	f023 0304 	bic.w	r3, r3, #4
 80016da:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016dc:	f7ff f98a 	bl	80009f4 <HAL_GetTick>
 80016e0:	2702      	movs	r7, #2
 80016e2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	46ba      	mov	sl, r7
 80016e6:	f04f 0901 	mov.w	r9, #1
 80016ea:	fa97 f3a7 	rbit	r3, r7
 80016ee:	fa97 f3a7 	rbit	r3, r7
 80016f2:	b373      	cbz	r3, 8001752 <HAL_RCC_OscConfig+0x3d6>
 80016f4:	6a22      	ldr	r2, [r4, #32]
 80016f6:	fa9a f3aa 	rbit	r3, sl
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	fa09 f303 	lsl.w	r3, r9, r3
 8001706:	4213      	tst	r3, r2
 8001708:	d0be      	beq.n	8001688 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff f973 	bl	80009f4 <HAL_GetTick>
 800170e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001712:	eba0 0008 	sub.w	r0, r0, r8
 8001716:	4298      	cmp	r0, r3
 8001718:	d9e7      	bls.n	80016ea <HAL_RCC_OscConfig+0x36e>
 800171a:	e694      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171c:	2b05      	cmp	r3, #5
 800171e:	6a23      	ldr	r3, [r4, #32]
 8001720:	d103      	bne.n	800172a <HAL_RCC_OscConfig+0x3ae>
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6223      	str	r3, [r4, #32]
 8001728:	e792      	b.n	8001650 <HAL_RCC_OscConfig+0x2d4>
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6223      	str	r3, [r4, #32]
 8001730:	6a23      	ldr	r3, [r4, #32]
 8001732:	f023 0304 	bic.w	r3, r3, #4
 8001736:	e78e      	b.n	8001656 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff f95c 	bl	80009f4 <HAL_GetTick>
 800173c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001740:	eba0 0008 	sub.w	r0, r0, r8
 8001744:	4298      	cmp	r0, r3
 8001746:	d98e      	bls.n	8001666 <HAL_RCC_OscConfig+0x2ea>
 8001748:	e67d      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
 800174a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001750:	e790      	b.n	8001674 <HAL_RCC_OscConfig+0x2f8>
 8001752:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001756:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001758:	e7cd      	b.n	80016f6 <HAL_RCC_OscConfig+0x37a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175a:	4b49      	ldr	r3, [pc, #292]	; (8001880 <HAL_RCC_OscConfig+0x504>)
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	f002 020c 	and.w	r2, r2, #12
 8001762:	2a08      	cmp	r2, #8
 8001764:	461c      	mov	r4, r3
 8001766:	d07a      	beq.n	800185e <HAL_RCC_OscConfig+0x4e2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001768:	2802      	cmp	r0, #2
 800176a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800176e:	d151      	bne.n	8001814 <HAL_RCC_OscConfig+0x498>
 8001770:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800177c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001786:	f7ff f935 	bl	80009f4 <HAL_GetTick>
 800178a:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800178e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001790:	2601      	movs	r6, #1
 8001792:	fa98 f3a8 	rbit	r3, r8
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	fa98 f3a8 	rbit	r3, r8
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	fa06 f303 	lsl.w	r3, r6, r3
 80017a8:	4213      	tst	r3, r2
 80017aa:	d12d      	bne.n	8001808 <HAL_RCC_OscConfig+0x48c>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ac:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 80017b0:	6862      	ldr	r2, [r4, #4]
 80017b2:	430b      	orrs	r3, r1
 80017b4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80017b8:	4313      	orrs	r3, r2
 80017ba:	6063      	str	r3, [r4, #4]
 80017bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017d0:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d2:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 80017d4:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80017d6:	f7ff f90d 	bl	80009f4 <HAL_GetTick>
 80017da:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80017de:	4605      	mov	r5, r0
 80017e0:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e4:	6822      	ldr	r2, [r4, #0]
 80017e6:	fa96 f3a6 	rbit	r3, r6
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	fa07 f303 	lsl.w	r3, r7, r3
 80017f6:	4213      	tst	r3, r2
 80017f8:	f47f add8 	bne.w	80013ac <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f8fa 	bl	80009f4 <HAL_GetTick>
 8001800:	1b40      	subs	r0, r0, r5
 8001802:	2802      	cmp	r0, #2
 8001804:	d9ec      	bls.n	80017e0 <HAL_RCC_OscConfig+0x464>
 8001806:	e61e      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff f8f4 	bl	80009f4 <HAL_GetTick>
 800180c:	1bc3      	subs	r3, r0, r7
 800180e:	2b02      	cmp	r3, #2
 8001810:	d9bf      	bls.n	8001792 <HAL_RCC_OscConfig+0x416>
 8001812:	e618      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
 8001814:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001820:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800182a:	f7ff f8e3 	bl	80009f4 <HAL_GetTick>
 800182e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001832:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001834:	2701      	movs	r7, #1
 8001836:	fa96 f3a6 	rbit	r3, r6
 800183a:	6822      	ldr	r2, [r4, #0]
 800183c:	fa96 f3a6 	rbit	r3, r6
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	fa07 f303 	lsl.w	r3, r7, r3
 800184c:	4213      	tst	r3, r2
 800184e:	f43f adad 	beq.w	80013ac <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff f8cf 	bl	80009f4 <HAL_GetTick>
 8001856:	1b40      	subs	r0, r0, r5
 8001858:	2802      	cmp	r0, #2
 800185a:	d9ec      	bls.n	8001836 <HAL_RCC_OscConfig+0x4ba>
 800185c:	e5f3      	b.n	8001446 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185e:	2801      	cmp	r0, #1
 8001860:	f43f adf2 	beq.w	8001448 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 8001864:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001866:	6a2a      	ldr	r2, [r5, #32]
 8001868:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800186c:	4291      	cmp	r1, r2
 800186e:	f47f adc0 	bne.w	80013f2 <HAL_RCC_OscConfig+0x76>
 8001872:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001874:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001878:	4293      	cmp	r3, r2
 800187a:	f43f ad97 	beq.w	80013ac <HAL_RCC_OscConfig+0x30>
 800187e:	e5b8      	b.n	80013f2 <HAL_RCC_OscConfig+0x76>
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001884:	b530      	push	{r4, r5, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001886:	4d13      	ldr	r5, [pc, #76]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001888:	686c      	ldr	r4, [r5, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800188a:	f004 030c 	and.w	r3, r4, #12
 800188e:	2b08      	cmp	r3, #8
 8001890:	d11e      	bne.n	80018d0 <HAL_RCC_GetSysClockFreq+0x4c>
 8001892:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001896:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800189a:	f404 1370 	and.w	r3, r4, #3932160	; 0x3c0000
 800189e:	fab2 f282 	clz	r2, r2
 80018a2:	fa23 f202 	lsr.w	r2, r3, r2
 80018a6:	490c      	ldr	r1, [pc, #48]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018aa:	5c88      	ldrb	r0, [r1, r2]
 80018ac:	220f      	movs	r2, #15
 80018ae:	fa92 f2a2 	rbit	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018b2:	fab2 f282 	clz	r2, r2
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	40d3      	lsrs	r3, r2
 80018bc:	440b      	add	r3, r1
 80018be:	7c1a      	ldrb	r2, [r3, #16]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80018c0:	03e3      	lsls	r3, r4, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018c2:	bf4a      	itet	mi
 80018c4:	4b05      	ldrmi	r3, [pc, #20]	; (80018dc <HAL_RCC_GetSysClockFreq+0x58>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80018c6:	4b06      	ldrpl	r3, [pc, #24]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018c8:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80018cc:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018ce:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80018d2:	e7fc      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x4a>
 80018d4:	40021000 	.word	0x40021000
 80018d8:	08002248 	.word	0x08002248
 80018dc:	007a1200 	.word	0x007a1200
 80018e0:	003d0900 	.word	0x003d0900

080018e4 <HAL_RCC_ClockConfig>:
{
 80018e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80018ea:	4604      	mov	r4, r0
 80018ec:	b910      	cbnz	r0, 80018f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
}
 80018f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f4:	4a4c      	ldr	r2, [pc, #304]	; (8001a28 <HAL_RCC_ClockConfig+0x144>)
 80018f6:	6813      	ldr	r3, [r2, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	428b      	cmp	r3, r1
 80018fe:	d32e      	bcc.n	800195e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001900:	6822      	ldr	r2, [r4, #0]
 8001902:	0791      	lsls	r1, r2, #30
 8001904:	d436      	bmi.n	8001974 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001906:	07d2      	lsls	r2, r2, #31
 8001908:	d43c      	bmi.n	8001984 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800190a:	4a47      	ldr	r2, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x144>)
 800190c:	6813      	ldr	r3, [r2, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	42ab      	cmp	r3, r5
 8001914:	d874      	bhi.n	8001a00 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	4d44      	ldr	r5, [pc, #272]	; (8001a2c <HAL_RCC_ClockConfig+0x148>)
 800191a:	f012 0f04 	tst.w	r2, #4
 800191e:	d17b      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	0713      	lsls	r3, r2, #28
 8001922:	d506      	bpl.n	8001932 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001924:	686b      	ldr	r3, [r5, #4]
 8001926:	6922      	ldr	r2, [r4, #16]
 8001928:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800192c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001930:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001932:	f7ff ffa7 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001936:	686b      	ldr	r3, [r5, #4]
 8001938:	22f0      	movs	r2, #240	; 0xf0
 800193a:	fa92 f2a2 	rbit	r2, r2
 800193e:	fab2 f282 	clz	r2, r2
 8001942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001946:	40d3      	lsrs	r3, r2
 8001948:	4a39      	ldr	r2, [pc, #228]	; (8001a30 <HAL_RCC_ClockConfig+0x14c>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	40d8      	lsrs	r0, r3
 800194e:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <HAL_RCC_ClockConfig+0x150>)
 8001950:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_RCC_ClockConfig+0x154>)
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	f7ff f80d 	bl	8000974 <HAL_InitTick>
  return HAL_OK;
 800195a:	2000      	movs	r0, #0
 800195c:	e7c8      	b.n	80018f0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	6813      	ldr	r3, [r2, #0]
 8001960:	f023 0307 	bic.w	r3, r3, #7
 8001964:	430b      	orrs	r3, r1
 8001966:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001968:	6813      	ldr	r3, [r2, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	428b      	cmp	r3, r1
 8001970:	d1bd      	bne.n	80018ee <HAL_RCC_ClockConfig+0xa>
 8001972:	e7c5      	b.n	8001900 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	492d      	ldr	r1, [pc, #180]	; (8001a2c <HAL_RCC_ClockConfig+0x148>)
 8001976:	68a0      	ldr	r0, [r4, #8]
 8001978:	684b      	ldr	r3, [r1, #4]
 800197a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800197e:	4303      	orrs	r3, r0
 8001980:	604b      	str	r3, [r1, #4]
 8001982:	e7c0      	b.n	8001906 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001984:	6862      	ldr	r2, [r4, #4]
 8001986:	4e29      	ldr	r6, [pc, #164]	; (8001a2c <HAL_RCC_ClockConfig+0x148>)
 8001988:	2a01      	cmp	r2, #1
 800198a:	d126      	bne.n	80019da <HAL_RCC_ClockConfig+0xf6>
 800198c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001990:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001994:	6831      	ldr	r1, [r6, #0]
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	d0a1      	beq.n	80018ee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	6873      	ldr	r3, [r6, #4]
 80019ac:	f023 0303 	bic.w	r3, r3, #3
 80019b0:	431a      	orrs	r2, r3
 80019b2:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80019b4:	f7ff f81e 	bl	80009f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80019bc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	6873      	ldr	r3, [r6, #4]
 80019c0:	6862      	ldr	r2, [r4, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019ca:	d09e      	beq.n	800190a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7ff f812 	bl	80009f4 <HAL_GetTick>
 80019d0:	1bc0      	subs	r0, r0, r7
 80019d2:	4540      	cmp	r0, r8
 80019d4:	d9f3      	bls.n	80019be <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 80019d6:	2003      	movs	r0, #3
 80019d8:	e78a      	b.n	80018f0 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019da:	2a02      	cmp	r2, #2
 80019dc:	bf0c      	ite	eq
 80019de:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80019e2:	2302      	movne	r3, #2
 80019e4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	6830      	ldr	r0, [r6, #0]
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	4203      	tst	r3, r0
 80019fe:	e7d3      	b.n	80019a8 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a00:	6813      	ldr	r3, [r2, #0]
 8001a02:	f023 0307 	bic.w	r3, r3, #7
 8001a06:	432b      	orrs	r3, r5
 8001a08:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	42ab      	cmp	r3, r5
 8001a12:	f47f af6c 	bne.w	80018ee <HAL_RCC_ClockConfig+0xa>
 8001a16:	e77e      	b.n	8001916 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a18:	686b      	ldr	r3, [r5, #4]
 8001a1a:	68e1      	ldr	r1, [r4, #12]
 8001a1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a20:	430b      	orrs	r3, r1
 8001a22:	606b      	str	r3, [r5, #4]
 8001a24:	e77c      	b.n	8001920 <HAL_RCC_ClockConfig+0x3c>
 8001a26:	bf00      	nop
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	08002230 	.word	0x08002230
 8001a34:	20000004 	.word	0x20000004
 8001a38:	2000000c 	.word	0x2000000c

08001a3c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	fa92 f2a2 	rbit	r2, r2
 8001a48:	fab2 f282 	clz	r2, r2
 8001a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a50:	40d3      	lsrs	r3, r2
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a54:	5cd3      	ldrb	r3, [r2, r3]
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001a58:	6810      	ldr	r0, [r2, #0]
}    
 8001a5a:	40d8      	lsrs	r0, r3
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08002240 	.word	0x08002240
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	fa92 f2a2 	rbit	r2, r2
 8001a78:	fab2 f282 	clz	r2, r2
 8001a7c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001a80:	40d3      	lsrs	r3, r2
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a84:	5cd3      	ldrb	r3, [r2, r3]
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001a88:	6810      	ldr	r0, [r2, #0]
} 
 8001a8a:	40d8      	lsrs	r0, r3
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08002240 	.word	0x08002240
 8001a98:	20000004 	.word	0x20000004

08001a9c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a9c:	6803      	ldr	r3, [r0, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001aa4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001ab6:	4770      	bx	lr

08001ab8 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ab8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001aba:	2b21      	cmp	r3, #33	; 0x21
 8001abc:	d118      	bne.n	8001af0 <UART_TxISR_8BIT+0x38>
  {
    if (huart->TxXferCount == 0U)
 8001abe:	f8b0 2052 	ldrh.w	r2, [r0, #82]	; 0x52
 8001ac2:	6803      	ldr	r3, [r0, #0]
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	b942      	cbnz	r2, 8001ada <UART_TxISR_8BIT+0x22>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ace:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	4770      	bx	lr
    }
    else
    {
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001ada:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001adc:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001ae0:	8519      	strh	r1, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
 8001ae2:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
      huart->pTxBuffPtr++;
 8001ae6:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8001af0:	4770      	bx	lr

08001af2 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001af2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001af4:	2b21      	cmp	r3, #33	; 0x21
 8001af6:	d11a      	bne.n	8001b2e <UART_TxISR_16BIT+0x3c>
  {
    if (huart->TxXferCount == 0U)
 8001af8:	f8b0 2052 	ldrh.w	r2, [r0, #82]	; 0x52
 8001afc:	6803      	ldr	r3, [r0, #0]
 8001afe:	b292      	uxth	r2, r2
 8001b00:	b942      	cbnz	r2, 8001b14 <UART_TxISR_16BIT+0x22>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b08:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	4770      	bx	lr
    }
    else
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8001b14:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001b16:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001b1a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001b1e:	8519      	strh	r1, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
 8001b20:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
      huart->pTxBuffPtr += 2U;
 8001b24:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001b30:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d127      	bne.n	8001b86 <HAL_UART_Transmit_IT+0x56>
    if ((pData == NULL) || (Size == 0U))
 8001b36:	b321      	cbz	r1, 8001b82 <HAL_UART_Transmit_IT+0x52>
 8001b38:	b31a      	cbz	r2, 8001b82 <HAL_UART_Transmit_IT+0x52>
    __HAL_LOCK(huart);
 8001b3a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d021      	beq.n	8001b86 <HAL_UART_Transmit_IT+0x56>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b42:	2300      	movs	r3, #0
    huart->TxXferCount = Size;
 8001b44:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b48:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b4a:	2321      	movs	r3, #33	; 0x21
 8001b4c:	6743      	str	r3, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b4e:	6883      	ldr	r3, [r0, #8]
    huart->pTxBuffPtr  = pData;
 8001b50:	64c1      	str	r1, [r0, #76]	; 0x4c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8001b56:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b5a:	d110      	bne.n	8001b7e <HAL_UART_Transmit_IT+0x4e>
 8001b5c:	6901      	ldr	r1, [r0, #16]
      huart->TxISR = UART_TxISR_16BIT;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_UART_Transmit_IT+0x5c>)
 8001b60:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_UART_Transmit_IT+0x60>)
 8001b62:	2900      	cmp	r1, #0
 8001b64:	bf08      	it	eq
 8001b66:	4613      	moveq	r3, r2
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b68:	6801      	ldr	r1, [r0, #0]
 8001b6a:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b72:	680a      	ldr	r2, [r1, #0]
 8001b74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b78:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4770      	bx	lr
      huart->TxISR = UART_TxISR_8BIT;
 8001b7e:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_UART_Transmit_IT+0x5c>)
 8001b80:	e7f2      	b.n	8001b68 <HAL_UART_Transmit_IT+0x38>
      return HAL_ERROR;
 8001b82:	2001      	movs	r0, #1
 8001b84:	4770      	bx	lr
    return HAL_BUSY;
 8001b86:	2002      	movs	r0, #2
}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	08001ab9 	.word	0x08001ab9
 8001b90:	08001af3 	.word	0x08001af3

08001b94 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b94:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001b96:	2b20      	cmp	r3, #32
{
 8001b98:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b9a:	d14c      	bne.n	8001c36 <HAL_UART_Receive_IT+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8001b9c:	2900      	cmp	r1, #0
 8001b9e:	d048      	beq.n	8001c32 <HAL_UART_Receive_IT+0x9e>
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	d046      	beq.n	8001c32 <HAL_UART_Receive_IT+0x9e>
    __HAL_LOCK(huart);
 8001ba4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d044      	beq.n	8001c36 <HAL_UART_Receive_IT+0xa2>
 8001bac:	2301      	movs	r3, #1
 8001bae:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    UART_MASK_COMPUTATION(huart);
 8001bb2:	6883      	ldr	r3, [r0, #8]
    huart->RxXferSize  = Size;
 8001bb4:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8001bb8:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxISR       = NULL;
 8001bc0:	f04f 0200 	mov.w	r2, #0
    huart->pRxBuffPtr  = pData;
 8001bc4:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxISR       = NULL;
 8001bc6:	6602      	str	r2, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001bc8:	d123      	bne.n	8001c12 <HAL_UART_Receive_IT+0x7e>
 8001bca:	6902      	ldr	r2, [r0, #16]
 8001bcc:	b9fa      	cbnz	r2, 8001c0e <HAL_UART_Receive_IT+0x7a>
 8001bce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001bd2:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	67c2      	str	r2, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bda:	2222      	movs	r2, #34	; 0x22
 8001bdc:	6782      	str	r2, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bde:	6802      	ldr	r2, [r0, #0]
 8001be0:	6891      	ldr	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001be6:	f041 0101 	orr.w	r1, r1, #1
 8001bea:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bec:	d11f      	bne.n	8001c2e <HAL_UART_Receive_IT+0x9a>
 8001bee:	6904      	ldr	r4, [r0, #16]
      huart->RxISR = UART_RxISR_16BIT;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_UART_Receive_IT+0xa8>)
 8001bf2:	4913      	ldr	r1, [pc, #76]	; (8001c40 <HAL_UART_Receive_IT+0xac>)
 8001bf4:	2c00      	cmp	r4, #0
 8001bf6:	bf08      	it	eq
 8001bf8:	460b      	moveq	r3, r1
 8001bfa:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001c02:	6811      	ldr	r1, [r2, #0]
 8001c04:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8001c08:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8001c0a:	4618      	mov	r0, r3
}
 8001c0c:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8001c0e:	22ff      	movs	r2, #255	; 0xff
 8001c10:	e7df      	b.n	8001bd2 <HAL_UART_Receive_IT+0x3e>
 8001c12:	b923      	cbnz	r3, 8001c1e <HAL_UART_Receive_IT+0x8a>
 8001c14:	6902      	ldr	r2, [r0, #16]
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	d0f9      	beq.n	8001c0e <HAL_UART_Receive_IT+0x7a>
 8001c1a:	227f      	movs	r2, #127	; 0x7f
 8001c1c:	e7d9      	b.n	8001bd2 <HAL_UART_Receive_IT+0x3e>
 8001c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c22:	d1d6      	bne.n	8001bd2 <HAL_UART_Receive_IT+0x3e>
 8001c24:	6902      	ldr	r2, [r0, #16]
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	d0f7      	beq.n	8001c1a <HAL_UART_Receive_IT+0x86>
 8001c2a:	223f      	movs	r2, #63	; 0x3f
 8001c2c:	e7d1      	b.n	8001bd2 <HAL_UART_Receive_IT+0x3e>
      huart->RxISR = UART_RxISR_8BIT;
 8001c2e:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_UART_Receive_IT+0xa8>)
 8001c30:	e7e3      	b.n	8001bfa <HAL_UART_Receive_IT+0x66>
      return HAL_ERROR;
 8001c32:	2001      	movs	r0, #1
 8001c34:	e7ea      	b.n	8001c0c <HAL_UART_Receive_IT+0x78>
    return HAL_BUSY;
 8001c36:	2002      	movs	r0, #2
 8001c38:	e7e8      	b.n	8001c0c <HAL_UART_Receive_IT+0x78>
 8001c3a:	bf00      	nop
 8001c3c:	08001c45 	.word	0x08001c45
 8001c40:	08001c9d 	.word	0x08001c9d

08001c44 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c44:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8001c46:	6802      	ldr	r2, [r0, #0]
 8001c48:	2922      	cmp	r1, #34	; 0x22
{
 8001c4a:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c4c:	d121      	bne.n	8001c92 <UART_RxISR_8BIT+0x4e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001c4e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001c50:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8001c54:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001c56:	4022      	ands	r2, r4
 8001c58:	700a      	strb	r2, [r1, #0]
    huart->pRxBuffPtr++;
 8001c5a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001c5c:	3201      	adds	r2, #1
 8001c5e:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001c60:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8001c64:	3a01      	subs	r2, #1
 8001c66:	b292      	uxth	r2, r2
 8001c68:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8001c6c:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8001c70:	b292      	uxth	r2, r2
 8001c72:	b96a      	cbnz	r2, 8001c90 <UART_RxISR_8BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c74:	6801      	ldr	r1, [r0, #0]
 8001c76:	680c      	ldr	r4, [r1, #0]
 8001c78:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8001c7c:	600c      	str	r4, [r1, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c7e:	688c      	ldr	r4, [r1, #8]
 8001c80:	f024 0401 	bic.w	r4, r4, #1
 8001c84:	608c      	str	r4, [r1, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001c86:	2120      	movs	r1, #32
 8001c88:	6781      	str	r1, [r0, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001c8a:	6602      	str	r2, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001c8c:	f7fe fd20 	bl	80006d0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001c90:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001c92:	6993      	ldr	r3, [r2, #24]
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	6193      	str	r3, [r2, #24]
}
 8001c9a:	e7f9      	b.n	8001c90 <UART_RxISR_8BIT+0x4c>

08001c9c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c9c:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8001c9e:	6802      	ldr	r2, [r0, #0]
 8001ca0:	2922      	cmp	r1, #34	; 0x22
{
 8001ca2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ca4:	d11f      	bne.n	8001ce6 <UART_RxISR_16BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001ca6:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001ca8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8001cac:	400c      	ands	r4, r1
 8001cae:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001cb0:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr += 2U;
 8001cb4:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001cb6:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 8001cba:	3901      	subs	r1, #1
 8001cbc:	b289      	uxth	r1, r1
 8001cbe:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8001cc2:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 8001cc6:	b289      	uxth	r1, r1
 8001cc8:	b961      	cbnz	r1, 8001ce4 <UART_RxISR_16BIT+0x48>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cca:	6814      	ldr	r4, [r2, #0]
 8001ccc:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8001cd0:	6014      	str	r4, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd2:	6894      	ldr	r4, [r2, #8]
 8001cd4:	f024 0401 	bic.w	r4, r4, #1
 8001cd8:	6094      	str	r4, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001cda:	2220      	movs	r2, #32
 8001cdc:	6782      	str	r2, [r0, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001cde:	6601      	str	r1, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001ce0:	f7fe fcf6 	bl	80006d0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001ce4:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001ce6:	6993      	ldr	r3, [r2, #24]
 8001ce8:	f043 0308 	orr.w	r3, r3, #8
 8001cec:	6193      	str	r3, [r2, #24]
}
 8001cee:	e7f9      	b.n	8001ce4 <UART_RxISR_16BIT+0x48>

08001cf0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cf0:	6803      	ldr	r3, [r0, #0]
 8001cf2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cf4:	6819      	ldr	r1, [r3, #0]
{
 8001cf6:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8001cf8:	f640 060f 	movw	r6, #2063	; 0x80f
 8001cfc:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cfe:	689d      	ldr	r5, [r3, #8]
{
 8001d00:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8001d02:	d109      	bne.n	8001d18 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d04:	0696      	lsls	r6, r2, #26
 8001d06:	d570      	bpl.n	8001dea <HAL_UART_IRQHandler+0xfa>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d08:	068e      	lsls	r6, r1, #26
 8001d0a:	d56e      	bpl.n	8001dea <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 8001d0c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d066      	beq.n	8001de0 <HAL_UART_IRQHandler+0xf0>
}
 8001d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8001d16:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d18:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001d1c:	f401 7690 	and.w	r6, r1, #288	; 0x120
 8001d20:	4306      	orrs	r6, r0
 8001d22:	d062      	beq.n	8001dea <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d24:	07d5      	lsls	r5, r2, #31
 8001d26:	d507      	bpl.n	8001d38 <HAL_UART_IRQHandler+0x48>
 8001d28:	05ce      	lsls	r6, r1, #23
 8001d2a:	d505      	bpl.n	8001d38 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d2c:	2501      	movs	r5, #1
 8001d2e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d30:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001d32:	f045 0501 	orr.w	r5, r5, #1
 8001d36:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d38:	0795      	lsls	r5, r2, #30
 8001d3a:	d506      	bpl.n	8001d4a <HAL_UART_IRQHandler+0x5a>
 8001d3c:	b128      	cbz	r0, 8001d4a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d3e:	2502      	movs	r5, #2
 8001d40:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d42:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001d44:	f045 0504 	orr.w	r5, r5, #4
 8001d48:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d4a:	0756      	lsls	r6, r2, #29
 8001d4c:	d506      	bpl.n	8001d5c <HAL_UART_IRQHandler+0x6c>
 8001d4e:	b128      	cbz	r0, 8001d5c <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d50:	2504      	movs	r5, #4
 8001d52:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d54:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001d56:	f045 0502 	orr.w	r5, r5, #2
 8001d5a:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001d5c:	0715      	lsls	r5, r2, #28
 8001d5e:	d509      	bpl.n	8001d74 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001d60:	f001 0520 	and.w	r5, r1, #32
 8001d64:	4328      	orrs	r0, r5
 8001d66:	d005      	beq.n	8001d74 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d68:	2008      	movs	r0, #8
 8001d6a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d6c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001d6e:	f040 0008 	orr.w	r0, r0, #8
 8001d72:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001d74:	0516      	lsls	r6, r2, #20
 8001d76:	d508      	bpl.n	8001d8a <HAL_UART_IRQHandler+0x9a>
 8001d78:	014d      	lsls	r5, r1, #5
 8001d7a:	d506      	bpl.n	8001d8a <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d80:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001d82:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d84:	f043 0320 	orr.w	r3, r3, #32
 8001d88:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d8a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001d8c:	b343      	cbz	r3, 8001de0 <HAL_UART_IRQHandler+0xf0>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d8e:	0690      	lsls	r0, r2, #26
 8001d90:	d505      	bpl.n	8001d9e <HAL_UART_IRQHandler+0xae>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d92:	0689      	lsls	r1, r1, #26
 8001d94:	d503      	bpl.n	8001d9e <HAL_UART_IRQHandler+0xae>
        if (huart->RxISR != NULL)
 8001d96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d98:	b10b      	cbz	r3, 8001d9e <HAL_UART_IRQHandler+0xae>
          huart->RxISR(huart);
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001d9e:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001da0:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001da2:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001da4:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dac:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8001dae:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001db0:	d017      	beq.n	8001de2 <HAL_UART_IRQHandler+0xf2>
        UART_EndRxTransfer(huart);
 8001db2:	f7ff fe73 	bl	8001a9c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	0652      	lsls	r2, r2, #25
 8001dbc:	d50d      	bpl.n	8001dda <HAL_UART_IRQHandler+0xea>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dbe:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001dc0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dc6:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001dc8:	b138      	cbz	r0, 8001dda <HAL_UART_IRQHandler+0xea>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_UART_IRQHandler+0x144>)
 8001dcc:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dce:	f7ff f9a7 	bl	8001120 <HAL_DMA_Abort_IT>
 8001dd2:	b128      	cbz	r0, 8001de0 <HAL_UART_IRQHandler+0xf0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dd4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001dd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001dd8:	e79b      	b.n	8001d12 <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7fe fd3a 	bl	8000854 <HAL_UART_ErrorCallback>
}
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001de2:	f7fe fd37 	bl	8000854 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de6:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001de8:	e7fa      	b.n	8001de0 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001dea:	02d6      	lsls	r6, r2, #11
 8001dec:	d509      	bpl.n	8001e02 <HAL_UART_IRQHandler+0x112>
 8001dee:	0268      	lsls	r0, r5, #9
 8001df0:	d507      	bpl.n	8001e02 <HAL_UART_IRQHandler+0x112>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001df2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8001df6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001df8:	621a      	str	r2, [r3, #32]
}
 8001dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8001dfe:	f000 b9dd 	b.w	80021bc <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001e02:	0616      	lsls	r6, r2, #24
 8001e04:	d506      	bpl.n	8001e14 <HAL_UART_IRQHandler+0x124>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001e06:	060d      	lsls	r5, r1, #24
 8001e08:	d504      	bpl.n	8001e14 <HAL_UART_IRQHandler+0x124>
    if (huart->TxISR != NULL)
 8001e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0e7      	beq.n	8001de0 <HAL_UART_IRQHandler+0xf0>
      huart->TxISR(huart);
 8001e10:	4620      	mov	r0, r4
 8001e12:	e77e      	b.n	8001d12 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001e14:	0650      	lsls	r0, r2, #25
 8001e16:	d5e3      	bpl.n	8001de0 <HAL_UART_IRQHandler+0xf0>
 8001e18:	064a      	lsls	r2, r1, #25
 8001e1a:	d5e1      	bpl.n	8001de0 <HAL_UART_IRQHandler+0xf0>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e22:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001e24:	2320      	movs	r3, #32
 8001e26:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f7fe fc47 	bl	80006c0 <HAL_UART_TxCpltCallback>
}
 8001e32:	e7d5      	b.n	8001de0 <HAL_UART_IRQHandler+0xf0>
 8001e34:	08001e39 	.word	0x08001e39

08001e38 <UART_DMAAbortOnError>:
{
 8001e38:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001e3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8001e42:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001e46:	f7fe fd05 	bl	8000854 <HAL_UART_ErrorCallback>
}
 8001e4a:	bd08      	pop	{r3, pc}

08001e4c <UART_SetConfig>:
{
 8001e4c:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e4e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e50:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e52:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e54:	681d      	ldr	r5, [r3, #0]
{
 8001e56:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e58:	6900      	ldr	r0, [r0, #16]
 8001e5a:	4302      	orrs	r2, r0
 8001e5c:	6960      	ldr	r0, [r4, #20]
 8001e5e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e60:	4855      	ldr	r0, [pc, #340]	; (8001fb8 <UART_SetConfig+0x16c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e62:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e64:	4028      	ands	r0, r5
 8001e66:	4302      	orrs	r2, r0
 8001e68:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8001e6e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e70:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001e74:	4302      	orrs	r2, r0
 8001e76:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e78:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e7a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e7c:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8001e80:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e82:	4302      	orrs	r2, r0
 8001e84:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e86:	4a4d      	ldr	r2, [pc, #308]	; (8001fbc <UART_SetConfig+0x170>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d114      	bne.n	8001eb6 <UART_SetConfig+0x6a>
 8001e8c:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <UART_SetConfig+0x174>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d814      	bhi.n	8001ec4 <UART_SetConfig+0x78>
 8001e9a:	4a4a      	ldr	r2, [pc, #296]	; (8001fc4 <UART_SetConfig+0x178>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e9c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001ea0:	5cd3      	ldrb	r3, [r2, r3]
 8001ea2:	d158      	bne.n	8001f56 <UART_SetConfig+0x10a>
    switch (clocksource)
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d84b      	bhi.n	8001f40 <UART_SetConfig+0xf4>
 8001ea8:	e8df f003 	tbb	[pc, r3]
 8001eac:	4a393621 	.word	0x4a393621
 8001eb0:	4a4a4a42 	.word	0x4a4a4a42
 8001eb4:	45          	.byte	0x45
 8001eb5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001eb6:	4a44      	ldr	r2, [pc, #272]	; (8001fc8 <UART_SetConfig+0x17c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d003      	beq.n	8001ec4 <UART_SetConfig+0x78>
 8001ebc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d173      	bne.n	8001fac <UART_SetConfig+0x160>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ec4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001ec8:	d011      	beq.n	8001eee <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001eca:	f7ff fdb7 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ece:	6863      	ldr	r3, [r4, #4]
 8001ed0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eda:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001edc:	f1a3 0110 	sub.w	r1, r3, #16
 8001ee0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001ee4:	4291      	cmp	r1, r2
 8001ee6:	d812      	bhi.n	8001f0e <UART_SetConfig+0xc2>
      huart->Instance->BRR = usartdiv;
 8001ee8:	6822      	ldr	r2, [r4, #0]
 8001eea:	60d3      	str	r3, [r2, #12]
 8001eec:	e010      	b.n	8001f10 <UART_SetConfig+0xc4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001eee:	f7ff fda5 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ef2:	6863      	ldr	r3, [r4, #4]
 8001ef4:	085a      	lsrs	r2, r3, #1
 8001ef6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8001efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f00:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f02:	f1a3 0110 	sub.w	r1, r3, #16
 8001f06:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001f0a:	4291      	cmp	r1, r2
 8001f0c:	d91b      	bls.n	8001f46 <UART_SetConfig+0xfa>
      ret = HAL_ERROR;
 8001f0e:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8001f10:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001f12:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8001f16:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f18:	f7ff fda8 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 8001f1c:	e7e9      	b.n	8001ef2 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f1e:	6862      	ldr	r2, [r4, #4]
 8001f20:	0853      	lsrs	r3, r2, #1
 8001f22:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001f26:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f2e:	e7e6      	b.n	8001efe <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetSysClockFreq();
 8001f30:	f7ff fca8 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001f34:	e7dd      	b.n	8001ef2 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f36:	6862      	ldr	r2, [r4, #4]
 8001f38:	0853      	lsrs	r3, r2, #1
 8001f3a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001f3e:	e7f4      	b.n	8001f2a <UART_SetConfig+0xde>
        ret = HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e7dd      	b.n	8001f02 <UART_SetConfig+0xb6>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f46:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8001f4a:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f4c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
 8001f54:	e7dc      	b.n	8001f10 <UART_SetConfig+0xc4>
    switch (clocksource)
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d82b      	bhi.n	8001fb2 <UART_SetConfig+0x166>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <UART_SetConfig+0x114>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001ecb 	.word	0x08001ecb
 8001f64:	08001f85 	.word	0x08001f85
 8001f68:	08001f8b 	.word	0x08001f8b
 8001f6c:	08001fb3 	.word	0x08001fb3
 8001f70:	08001f9d 	.word	0x08001f9d
 8001f74:	08001fb3 	.word	0x08001fb3
 8001f78:	08001fb3 	.word	0x08001fb3
 8001f7c:	08001fb3 	.word	0x08001fb3
 8001f80:	08001fa3 	.word	0x08001fa3
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f84:	f7ff fd72 	bl	8001a6c <HAL_RCC_GetPCLK2Freq>
 8001f88:	e7a1      	b.n	8001ece <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001f8a:	6862      	ldr	r2, [r4, #4]
 8001f8c:	0853      	lsrs	r3, r2, #1
 8001f8e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001f92:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f9a:	e79d      	b.n	8001ed8 <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001f9c:	f7ff fc72 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001fa0:	e795      	b.n	8001ece <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fa2:	6862      	ldr	r2, [r4, #4]
 8001fa4:	0853      	lsrs	r3, r2, #1
 8001fa6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001faa:	e7f4      	b.n	8001f96 <UART_SetConfig+0x14a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001fb0:	d0c6      	beq.n	8001f40 <UART_SetConfig+0xf4>
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e791      	b.n	8001edc <UART_SetConfig+0x90>
 8001fb8:	efff69f3 	.word	0xefff69f3
 8001fbc:	40013800 	.word	0x40013800
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08002268 	.word	0x08002268
 8001fc8:	40004400 	.word	0x40004400

08001fcc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fce:	07da      	lsls	r2, r3, #31
{
 8001fd0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001fd2:	d506      	bpl.n	8001fe2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001fd4:	6801      	ldr	r1, [r0, #0]
 8001fd6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001fd8:	684a      	ldr	r2, [r1, #4]
 8001fda:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001fde:	4322      	orrs	r2, r4
 8001fe0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fe2:	079c      	lsls	r4, r3, #30
 8001fe4:	d506      	bpl.n	8001ff4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fe6:	6801      	ldr	r1, [r0, #0]
 8001fe8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001fea:	684a      	ldr	r2, [r1, #4]
 8001fec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ff0:	4322      	orrs	r2, r4
 8001ff2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ff4:	0759      	lsls	r1, r3, #29
 8001ff6:	d506      	bpl.n	8002006 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ff8:	6801      	ldr	r1, [r0, #0]
 8001ffa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001ffc:	684a      	ldr	r2, [r1, #4]
 8001ffe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002002:	4322      	orrs	r2, r4
 8002004:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002006:	071a      	lsls	r2, r3, #28
 8002008:	d506      	bpl.n	8002018 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800200a:	6801      	ldr	r1, [r0, #0]
 800200c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800200e:	684a      	ldr	r2, [r1, #4]
 8002010:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002014:	4322      	orrs	r2, r4
 8002016:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002018:	06dc      	lsls	r4, r3, #27
 800201a:	d506      	bpl.n	800202a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800201c:	6801      	ldr	r1, [r0, #0]
 800201e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002020:	688a      	ldr	r2, [r1, #8]
 8002022:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002026:	4322      	orrs	r2, r4
 8002028:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800202a:	0699      	lsls	r1, r3, #26
 800202c:	d506      	bpl.n	800203c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800202e:	6801      	ldr	r1, [r0, #0]
 8002030:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002032:	688a      	ldr	r2, [r1, #8]
 8002034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002038:	4322      	orrs	r2, r4
 800203a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800203c:	065a      	lsls	r2, r3, #25
 800203e:	d50f      	bpl.n	8002060 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002040:	6801      	ldr	r1, [r0, #0]
 8002042:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002044:	684a      	ldr	r2, [r1, #4]
 8002046:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800204a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800204c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002050:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002052:	d105      	bne.n	8002060 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002054:	684a      	ldr	r2, [r1, #4]
 8002056:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002058:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800205c:	4322      	orrs	r2, r4
 800205e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	d506      	bpl.n	8002072 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002064:	6802      	ldr	r2, [r0, #0]
 8002066:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002068:	6853      	ldr	r3, [r2, #4]
 800206a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800206e:	430b      	orrs	r3, r1
 8002070:	6053      	str	r3, [r2, #4]
}
 8002072:	bd10      	pop	{r4, pc}

08002074 <UART_WaitOnFlagUntilTimeout>:
{
 8002074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002078:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800207c:	4604      	mov	r4, r0
 800207e:	460e      	mov	r6, r1
 8002080:	4615      	mov	r5, r2
 8002082:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002084:	6822      	ldr	r2, [r4, #0]
 8002086:	69d3      	ldr	r3, [r2, #28]
 8002088:	ea36 0303 	bics.w	r3, r6, r3
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	42ab      	cmp	r3, r5
 8002094:	d001      	beq.n	800209a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002096:	2000      	movs	r0, #0
 8002098:	e01a      	b.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800209a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800209e:	d0f2      	beq.n	8002086 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a0:	f7fe fca8 	bl	80009f4 <HAL_GetTick>
 80020a4:	1bc0      	subs	r0, r0, r7
 80020a6:	4540      	cmp	r0, r8
 80020a8:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020aa:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ac:	d802      	bhi.n	80020b4 <UART_WaitOnFlagUntilTimeout+0x40>
 80020ae:	f1b8 0f00 	cmp.w	r8, #0
 80020b2:	d10f      	bne.n	80020d4 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020b8:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ba:	6883      	ldr	r3, [r0, #8]
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80020c2:	2320      	movs	r3, #32
 80020c4:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80020c6:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80020c8:	2300      	movs	r3, #0
 80020ca:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80020ce:	2003      	movs	r0, #3
}
 80020d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80020d4:	075a      	lsls	r2, r3, #29
 80020d6:	d5d5      	bpl.n	8002084 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80020d8:	69c3      	ldr	r3, [r0, #28]
 80020da:	051b      	lsls	r3, r3, #20
 80020dc:	d5d2      	bpl.n	8002084 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020e2:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020e4:	6803      	ldr	r3, [r0, #0]
 80020e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020ea:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ec:	6883      	ldr	r3, [r0, #8]
 80020ee:	f023 0301 	bic.w	r3, r3, #1
 80020f2:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80020f4:	2320      	movs	r3, #32
 80020f6:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80020f8:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80020fa:	67e3      	str	r3, [r4, #124]	; 0x7c
 80020fc:	e7e4      	b.n	80020c8 <UART_WaitOnFlagUntilTimeout+0x54>

080020fe <UART_CheckIdleState>:
{
 80020fe:	b530      	push	{r4, r5, lr}
 8002100:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002102:	2500      	movs	r5, #0
{
 8002104:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002106:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002108:	f7fe fc74 	bl	80009f4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800210c:	6822      	ldr	r2, [r4, #0]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8002112:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002114:	d414      	bmi.n	8002140 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002116:	6822      	ldr	r2, [r4, #0]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	0752      	lsls	r2, r2, #29
 800211c:	d509      	bpl.n	8002132 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800211e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002122:	9200      	str	r2, [sp, #0]
 8002124:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002128:	2200      	movs	r2, #0
 800212a:	4620      	mov	r0, r4
 800212c:	f7ff ffa2 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 8002130:	b998      	cbnz	r0, 800215a <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8002132:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002134:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002136:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002138:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800213c:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 800213e:	e00d      	b.n	800215c <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002140:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002144:	9200      	str	r2, [sp, #0]
 8002146:	9003      	str	r0, [sp, #12]
 8002148:	462a      	mov	r2, r5
 800214a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800214e:	4620      	mov	r0, r4
 8002150:	f7ff ff90 	bl	8002074 <UART_WaitOnFlagUntilTimeout>
 8002154:	9b03      	ldr	r3, [sp, #12]
 8002156:	2800      	cmp	r0, #0
 8002158:	d0dd      	beq.n	8002116 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800215a:	2003      	movs	r0, #3
}
 800215c:	b005      	add	sp, #20
 800215e:	bd30      	pop	{r4, r5, pc}

08002160 <HAL_UART_Init>:
{
 8002160:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002162:	4604      	mov	r4, r0
 8002164:	b340      	cbz	r0, 80021b8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002166:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002168:	b91b      	cbnz	r3, 8002172 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800216a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800216e:	f7fe fa23 	bl	80005b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002172:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002174:	2324      	movs	r3, #36	; 0x24
 8002176:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002178:	6813      	ldr	r3, [r2, #0]
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002180:	4620      	mov	r0, r4
 8002182:	f7ff fe63 	bl	8001e4c <UART_SetConfig>
 8002186:	2801      	cmp	r0, #1
 8002188:	d016      	beq.n	80021b8 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800218a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800218c:	b113      	cbz	r3, 8002194 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800218e:	4620      	mov	r0, r4
 8002190:	f7ff ff1c 	bl	8001fcc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800219c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80021ac:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80021b4:	f7ff bfa3 	b.w	80020fe <UART_CheckIdleState>
}
 80021b8:	2001      	movs	r0, #1
 80021ba:	bd10      	pop	{r4, pc}

080021bc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80021bc:	4770      	bx	lr
	...

080021c0 <__libc_init_array>:
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	4d0d      	ldr	r5, [pc, #52]	; (80021f8 <__libc_init_array+0x38>)
 80021c4:	4c0d      	ldr	r4, [pc, #52]	; (80021fc <__libc_init_array+0x3c>)
 80021c6:	1b64      	subs	r4, r4, r5
 80021c8:	10a4      	asrs	r4, r4, #2
 80021ca:	2600      	movs	r6, #0
 80021cc:	42a6      	cmp	r6, r4
 80021ce:	d109      	bne.n	80021e4 <__libc_init_array+0x24>
 80021d0:	4d0b      	ldr	r5, [pc, #44]	; (8002200 <__libc_init_array+0x40>)
 80021d2:	4c0c      	ldr	r4, [pc, #48]	; (8002204 <__libc_init_array+0x44>)
 80021d4:	f000 f820 	bl	8002218 <_init>
 80021d8:	1b64      	subs	r4, r4, r5
 80021da:	10a4      	asrs	r4, r4, #2
 80021dc:	2600      	movs	r6, #0
 80021de:	42a6      	cmp	r6, r4
 80021e0:	d105      	bne.n	80021ee <__libc_init_array+0x2e>
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021e8:	4798      	blx	r3
 80021ea:	3601      	adds	r6, #1
 80021ec:	e7ee      	b.n	80021cc <__libc_init_array+0xc>
 80021ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80021f2:	4798      	blx	r3
 80021f4:	3601      	adds	r6, #1
 80021f6:	e7f2      	b.n	80021de <__libc_init_array+0x1e>
 80021f8:	0800226c 	.word	0x0800226c
 80021fc:	0800226c 	.word	0x0800226c
 8002200:	0800226c 	.word	0x0800226c
 8002204:	08002270 	.word	0x08002270

08002208 <memset>:
 8002208:	4402      	add	r2, r0
 800220a:	4603      	mov	r3, r0
 800220c:	4293      	cmp	r3, r2
 800220e:	d100      	bne.n	8002212 <memset+0xa>
 8002210:	4770      	bx	lr
 8002212:	f803 1b01 	strb.w	r1, [r3], #1
 8002216:	e7f9      	b.n	800220c <memset+0x4>

08002218 <_init>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	bf00      	nop
 800221c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221e:	bc08      	pop	{r3}
 8002220:	469e      	mov	lr, r3
 8002222:	4770      	bx	lr

08002224 <_fini>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr
