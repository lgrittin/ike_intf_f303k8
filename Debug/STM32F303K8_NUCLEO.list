
STM32F303K8_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000232c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080024b4  080024b4  000124b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024f0  080024f0  000124f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000022c  20000000  080024f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002022c  2**0
                  CONTENTS
  7 .bss          000002b0  2000022c  2000022c  0002022c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200004dc  200004dc  0002022c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bcb1  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003598  00000000  00000000  0003bf0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00009961  00000000  00000000  0003f4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000b68  00000000  00000000  00048e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000e88  00000000  00000000  00049970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001901a  00000000  00000000  0004a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001223b  00000000  00000000  00063812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008c167  00000000  00000000  00075a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00101bb4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002120  00000000  00000000  00101c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000022c 	.word	0x2000022c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800249c 	.word	0x0800249c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000230 	.word	0x20000230
 80001c4:	0800249c 	.word	0x0800249c

080001c8 <MX_CAN1_Init>:

/* Private functions ---------------------------------------------------------*/

/* USART2 init function */
void MX_CAN1_Init(void)
{
 80001c8:	b510      	push	{r4, lr}
    CAN_FilterTypeDef  sFilterConfig;

    /* Configure the CAN peripheral */
    hcan.Instance = CANx;  
 80001ca:	481d      	ldr	r0, [pc, #116]	; (8000240 <MX_CAN1_Init+0x78>)
    hcan.Init.TransmitFifoPriority = DISABLE;
    hcan.Init.Mode = CAN_MODE_NORMAL;
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
    hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
    hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
    hcan.Init.Prescaler = 4;
 80001cc:	4a1d      	ldr	r2, [pc, #116]	; (8000244 <MX_CAN1_Init+0x7c>)
 80001ce:	2304      	movs	r3, #4
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80001d0:	2400      	movs	r4, #0
    hcan.Init.Prescaler = 4;
 80001d2:	e9c0 2300 	strd	r2, r3, [r0]
    hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80001d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80001da:	e9c0 4302 	strd	r4, r3, [r0, #8]
    hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80001de:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001e2:	e9c0 3404 	strd	r3, r4, [r0, #16]
    hcan.Init.TimeTriggeredMode = DISABLE;
 80001e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80001ea:	b08a      	sub	sp, #40	; 0x28
    hcan.Init.TimeTriggeredMode = DISABLE;
 80001ec:	6183      	str	r3, [r0, #24]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 80001ee:	8384      	strh	r4, [r0, #28]
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001f0:	f000 fc72 	bl	8000ad8 <HAL_CAN_Init>
 80001f4:	b108      	cbz	r0, 80001fa <MX_CAN1_Init+0x32>
    {
        Error_Handler();
 80001f6:	f000 f911 	bl	800041c <Error_Handler>
    }

    /* Configure the CAN Filter */
    sFilterConfig.FilterBank = 0;
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001fa:	2301      	movs	r3, #1
 80001fc:	9307      	str	r3, [sp, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
    sFilterConfig.FilterIdLow = 0x0000;
    sFilterConfig.FilterMaskIdHigh = 0x0000;
    sFilterConfig.FilterMaskIdLow = 0x0000;
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
 80001fe:	9308      	str	r3, [sp, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000200:	480f      	ldr	r0, [pc, #60]	; (8000240 <MX_CAN1_Init+0x78>)
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000202:	9404      	str	r4, [sp, #16]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000204:	230e      	movs	r3, #14
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000206:	4669      	mov	r1, sp
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000208:	e9cd 4405 	strd	r4, r4, [sp, #20]
    sFilterConfig.FilterIdLow = 0x0000;
 800020c:	e9cd 4400 	strd	r4, r4, [sp]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000210:	e9cd 4402 	strd	r4, r4, [sp, #8]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000214:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000216:	f000 fcda 	bl	8000bce <HAL_CAN_ConfigFilter>
 800021a:	b108      	cbz	r0, 8000220 <MX_CAN1_Init+0x58>
    {
        Error_Handler();
 800021c:	f000 f8fe 	bl	800041c <Error_Handler>
    }

    /* Start the CAN peripheral */
    if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000220:	4807      	ldr	r0, [pc, #28]	; (8000240 <MX_CAN1_Init+0x78>)
 8000222:	f000 fd43 	bl	8000cac <HAL_CAN_Start>
 8000226:	b108      	cbz	r0, 800022c <MX_CAN1_Init+0x64>
    {
        Error_Handler();
 8000228:	f000 f8f8 	bl	800041c <Error_Handler>
    }

    /* Activate CAN RX notification */
    if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK)
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <MX_CAN1_Init+0x78>)
 800022e:	2102      	movs	r1, #2
 8000230:	f000 fe31 	bl	8000e96 <HAL_CAN_ActivateNotification>
 8000234:	b108      	cbz	r0, 800023a <MX_CAN1_Init+0x72>
    {
        Error_Handler();
 8000236:	f000 f8f1 	bl	800041c <Error_Handler>
    }
}
 800023a:	b00a      	add	sp, #40	; 0x28
 800023c:	bd10      	pop	{r4, pc}
 800023e:	bf00      	nop
 8000240:	200002d4 	.word	0x200002d4
 8000244:	40006400 	.word	0x40006400

08000248 <HAL_CAN_MspInit>:
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
    GPIO_InitTypeDef   GPIO_InitStruct; 
    
    /* CAN1 Periph clock enable */
    CANx_CLK_ENABLE();
 8000248:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <HAL_CAN_MspInit+0x78>)
{
 800024a:	b5f0      	push	{r4, r5, r6, r7, lr}
    CANx_CLK_ENABLE();
 800024c:	69da      	ldr	r2, [r3, #28]
 800024e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000252:	61da      	str	r2, [r3, #28]
 8000254:	69da      	ldr	r2, [r3, #28]
{
 8000256:	b089      	sub	sp, #36	; 0x24
    CANx_CLK_ENABLE();
 8000258:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800025c:	9201      	str	r2, [sp, #4]
 800025e:	9a01      	ldr	r2, [sp, #4]
    
    /* Enable GPIO clock */
    CANx_GPIO_CLK_ENABLE(); 
 8000260:	695a      	ldr	r2, [r3, #20]
 8000262:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000266:	615a      	str	r2, [r3, #20]
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800026e:	9302      	str	r3, [sp, #8]
    
    /* CAN1 TX GPIO pin configuration */
    GPIO_InitStruct.Pin = CANx_TX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000270:	2401      	movs	r4, #1
    CANx_GPIO_CLK_ENABLE(); 
 8000272:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000274:	2702      	movs	r7, #2
 8000276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate =  CANx_TX_AF;    
 800027c:	2509      	movs	r5, #9
    HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct); 
 800027e:	a903      	add	r1, sp, #12
 8000280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000284:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000288:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Alternate =  CANx_TX_AF;    
 800028c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CANx_TX_GPIO_PORT, &GPIO_InitStruct); 
 800028e:	f001 f857 	bl	8001340 <HAL_GPIO_Init>
    
    /* CAN1 RX GPIO pin configuration */
    GPIO_InitStruct.Pin = CANx_RX_PIN;
 8000292:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Alternate =  CANx_RX_AF;    
    HAL_GPIO_Init(CANx_RX_GPIO_PORT, &GPIO_InitStruct); 
 8000296:	a903      	add	r1, sp, #12
 8000298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800029c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a0:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Alternate =  CANx_RX_AF;    
 80002a4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(CANx_RX_GPIO_PORT, &GPIO_InitStruct); 
 80002a6:	f001 f84b 	bl	8001340 <HAL_GPIO_Init>
    
    /* NVIC configuration for CAN1 Reception complete interrupt */
    HAL_NVIC_SetPriority(CANx_RX_IRQn, 1, 0);
 80002aa:	2200      	movs	r2, #0
 80002ac:	4621      	mov	r1, r4
 80002ae:	2014      	movs	r0, #20
 80002b0:	f000 ff1e 	bl	80010f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CANx_RX_IRQn);
 80002b4:	2014      	movs	r0, #20
 80002b6:	f000 ff4d 	bl	8001154 <HAL_NVIC_EnableIRQ>
}
 80002ba:	b009      	add	sp, #36	; 0x24
 80002bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000

080002c4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80002c4:	b570      	push	{r4, r5, r6, lr}
	uint16_t idx = 0;

	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx) != HAL_OK)
 80002c6:	4b29      	ldr	r3, [pc, #164]	; (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80002c8:	4a29      	ldr	r2, [pc, #164]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	f000 fd6c 	bl	8000da8 <HAL_CAN_GetRxMessage>
 80002d0:	b108      	cbz	r0, 80002d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
		Error_Handler();
 80002d2:	f000 f8a3 	bl	800041c <Error_Handler>
	can_rx_cnt++;
 80002d6:	4d27      	ldr	r5, [pc, #156]	; (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)

	if ((can_rx_header.DLC == CAN_DATA_LENGTH) && (en_can_rx))
 80002d8:	4e25      	ldr	r6, [pc, #148]	; (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
	can_rx_cnt++;
 80002da:	682b      	ldr	r3, [r5, #0]
 80002dc:	3301      	adds	r3, #1
 80002de:	602b      	str	r3, [r5, #0]
	if ((can_rx_header.DLC == CAN_DATA_LENGTH) && (en_can_rx))
 80002e0:	6933      	ldr	r3, [r6, #16]
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	d128      	bne.n	8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	b32b      	cbz	r3, 8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
	{
		/* Check ID of received can packet and take properly action */
		switch (can_rx_header.StdId & 0x0000FF00)
 80002ec:	6834      	ldr	r4, [r6, #0]
 80002ee:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80002f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002f6:	d006      	beq.n	8000306 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
 80002f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002fc:	d01d      	beq.n	800033a <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
				en_usart_tx_sdo = 1;

			break;
		/* Ignore */
		default:
			can_inv_rx_cnt++;
 80002fe:	68eb      	ldr	r3, [r5, #12]
 8000300:	3301      	adds	r3, #1
 8000302:	60eb      	str	r3, [r5, #12]
			//send_usart_code = 0;
			break;
 8000304:	e012      	b.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
			can_pdo_rx_cnt++;
 8000306:	686b      	ldr	r3, [r5, #4]
			memcpy(process_data[idx].val, &(can_rx[0]), process_data[idx].num_byte);
 8000308:	4a1c      	ldr	r2, [pc, #112]	; (800037c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800030a:	4918      	ldr	r1, [pc, #96]	; (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
			can_pdo_rx_cnt++;
 800030c:	3301      	adds	r3, #1
			idx = (uint16_t)can_rx_header.StdId - ID_PDO_00;
 800030e:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
 8000312:	b2a4      	uxth	r4, r4
			can_pdo_rx_cnt++;
 8000314:	606b      	str	r3, [r5, #4]
			memcpy(process_data[idx].val, &(can_rx[0]), process_data[idx].num_byte);
 8000316:	230c      	movs	r3, #12
 8000318:	fb03 2304 	mla	r3, r3, r4, r2
 800031c:	88da      	ldrh	r2, [r3, #6]
 800031e:	6898      	ldr	r0, [r3, #8]
 8000320:	f002 f8a6 	bl	8002470 <memcpy>
			if (idx == 0)
 8000324:	b914      	cbnz	r4, 800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
				BSP_LED_Toggle(LED3);
 8000326:	4620      	mov	r0, r4
 8000328:	f000 fb54 	bl	80009d4 <BSP_LED_Toggle>
		}

		if (can_pdo_rx_cnt > 2*PDO_LENGTH)
 800032c:	686b      	ldr	r3, [r5, #4]
 800032e:	2b1c      	cmp	r3, #28
		{
			en_usart_tx = 1;
 8000330:	bf82      	ittt	hi
 8000332:	4b13      	ldrhi	r3, [pc, #76]	; (8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000334:	2201      	movhi	r2, #1
 8000336:	701a      	strbhi	r2, [r3, #0]
			//en_can_rx = 0;
		}
	}
}
 8000338:	bd70      	pop	{r4, r5, r6, pc}
			can_sdo_rx_cnt++;
 800033a:	68ab      	ldr	r3, [r5, #8]
			memcpy(param_data[idx].val, &(can_rx[0]), param_data[idx].num_byte);
 800033c:	490b      	ldr	r1, [pc, #44]	; (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
			can_sdo_rx_cnt++;
 800033e:	3301      	adds	r3, #1
 8000340:	60ab      	str	r3, [r5, #8]
			idx = (uint16_t)can_rx_header.StdId - ID_SDO_00;
 8000342:	f5a4 7400 	sub.w	r4, r4, #512	; 0x200
			memcpy(param_data[idx].val, &(can_rx[0]), param_data[idx].num_byte);
 8000346:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000348:	220c      	movs	r2, #12
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fb02 3404 	mla	r4, r2, r4, r3
 8000350:	88e2      	ldrh	r2, [r4, #6]
 8000352:	68a0      	ldr	r0, [r4, #8]
 8000354:	f002 f88c 	bl	8002470 <memcpy>
			if (promise_sdo == (uint16_t)can_rx_header.StdId)
 8000358:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800035a:	881a      	ldrh	r2, [r3, #0]
 800035c:	8833      	ldrh	r3, [r6, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	d1e4      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
				en_usart_tx_sdo = 1;
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000364:	2201      	movs	r2, #1
 8000366:	701a      	strb	r2, [r3, #0]
 8000368:	e7e0      	b.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
 800036a:	bf00      	nop
 800036c:	2000036c 	.word	0x2000036c
 8000370:	200002b8 	.word	0x200002b8
 8000374:	20000248 	.word	0x20000248
 8000378:	20000000 	.word	0x20000000
 800037c:	20000174 	.word	0x20000174
 8000380:	200002b0 	.word	0x200002b0
 8000384:	2000003c 	.word	0x2000003c
 8000388:	20000296 	.word	0x20000296
 800038c:	20000295 	.word	0x20000295

08000390 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b510      	push	{r4, lr}
 8000392:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000394:	2218      	movs	r2, #24
 8000396:	2100      	movs	r1, #0
 8000398:	a807      	add	r0, sp, #28
 800039a:	f002 f877 	bl	800248c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039e:	2214      	movs	r2, #20
 80003a0:	2100      	movs	r1, #0
 80003a2:	a801      	add	r0, sp, #4
 80003a4:	f002 f872 	bl	800248c <memset>
  
	/* HSI Oscillator already ON after system reset, activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a8:	2310      	movs	r3, #16
 80003aa:	2201      	movs	r2, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ac:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003b2:	2100      	movs	r1, #0
 80003b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003ba:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003be:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c0:	940d      	str	r4, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c2:	f001 f883 	bl	80014cc <HAL_RCC_OscConfig>
 80003c6:	b100      	cbz	r0, 80003ca <SystemClock_Config+0x3a>
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
	while(1)
 80003c8:	e7fe      	b.n	80003c8 <SystemClock_Config+0x38>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80003ca:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d4:	e9cd 3004 	strd	r3, r0, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d8:	9003      	str	r0, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003da:	4621      	mov	r1, r4
 80003dc:	a801      	add	r0, sp, #4
 80003de:	f001 fb29 	bl	8001a34 <HAL_RCC_ClockConfig>
 80003e2:	b100      	cbz	r0, 80003e6 <SystemClock_Config+0x56>
	while(1)
 80003e4:	e7fe      	b.n	80003e4 <SystemClock_Config+0x54>
}
 80003e6:	b010      	add	sp, #64	; 0x40
 80003e8:	bd10      	pop	{r4, pc}
	...

080003ec <main>:
{
 80003ec:	b508      	push	{r3, lr}
	HAL_Init();
 80003ee:	f000 fb4f 	bl	8000a90 <HAL_Init>
	SystemClock_Config();
 80003f2:	f7ff ffcd 	bl	8000390 <SystemClock_Config>
	BSP_LED_Init(LED3);
 80003f6:	2000      	movs	r0, #0
 80003f8:	f000 fac4 	bl	8000984 <BSP_LED_Init>
	MX_USART2_UART_Init();
 80003fc:	f000 f86a 	bl	80004d4 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 8000400:	f7ff fee2 	bl	80001c8 <MX_CAN1_Init>
	if (HAL_UART_Receive_DMA(&huart2, usart_rx.all, USART_MSG_LENGTH)!= HAL_OK)
 8000404:	4903      	ldr	r1, [pc, #12]	; (8000414 <main+0x28>)
 8000406:	4804      	ldr	r0, [pc, #16]	; (8000418 <main+0x2c>)
 8000408:	220a      	movs	r2, #10
 800040a:	f001 fcfb 	bl	8001e04 <HAL_UART_Receive_DMA>
 800040e:	b100      	cbz	r0, 8000412 <main+0x26>
	while(1)
 8000410:	e7fe      	b.n	8000410 <main+0x24>
	while(1)
 8000412:	e7fe      	b.n	8000412 <main+0x26>
 8000414:	2000044e 	.word	0x2000044e
 8000418:	20000458 	.word	0x20000458

0800041c <Error_Handler>:
	while(1)
 800041c:	e7fe      	b.n	800041c <Error_Handler>
	...

08000420 <HAL_MspInit>:
  * @param None
  * @retval None
  */
void HAL_MspInit(void)
{
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <HAL_MspInit+0x2c>)
 8000422:	699a      	ldr	r2, [r3, #24]
 8000424:	f042 0201 	orr.w	r2, r2, #1
 8000428:	619a      	str	r2, [r3, #24]
 800042a:	699a      	ldr	r2, [r3, #24]
{
 800042c:	b082      	sub	sp, #8
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800042e:	f002 0201 	and.w	r2, r2, #1
 8000432:	9200      	str	r2, [sp, #0]
 8000434:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800043c:	61da      	str	r2, [r3, #28]
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	9b01      	ldr	r3, [sp, #4]
}
 8000448:	b002      	add	sp, #8
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000

08000450 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000450:	4770      	bx	lr

08000452 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000452:	e7fe      	b.n	8000452 <HardFault_Handler>

08000454 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000454:	e7fe      	b.n	8000454 <MemManage_Handler>

08000456 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000456:	e7fe      	b.n	8000456 <BusFault_Handler>

08000458 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000458:	e7fe      	b.n	8000458 <UsageFault_Handler>

0800045a <SVC_Handler>:
 800045a:	4770      	bx	lr

0800045c <DebugMon_Handler>:
 800045c:	4770      	bx	lr

0800045e <PendSV_Handler>:
 800045e:	4770      	bx	lr

08000460 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000460:	b510      	push	{r4, lr}
	HAL_IncTick();
	send_usart_cnt_ms++;
 8000462:	4c09      	ldr	r4, [pc, #36]	; (8000488 <SysTick_Handler+0x28>)
	HAL_IncTick();
 8000464:	f000 fb26 	bl	8000ab4 <HAL_IncTick>
	if ((send_usart_cnt_ms > send_usart_tim_ms) && (en_usart_tx))
 8000468:	4a08      	ldr	r2, [pc, #32]	; (800048c <SysTick_Handler+0x2c>)
	send_usart_cnt_ms++;
 800046a:	6823      	ldr	r3, [r4, #0]
	if ((send_usart_cnt_ms > send_usart_tim_ms) && (en_usart_tx))
 800046c:	6812      	ldr	r2, [r2, #0]
	send_usart_cnt_ms++;
 800046e:	3301      	adds	r3, #1
	if ((send_usart_cnt_ms > send_usart_tim_ms) && (en_usart_tx))
 8000470:	4293      	cmp	r3, r2
	send_usart_cnt_ms++;
 8000472:	6023      	str	r3, [r4, #0]
	if ((send_usart_cnt_ms > send_usart_tim_ms) && (en_usart_tx))
 8000474:	d906      	bls.n	8000484 <SysTick_Handler+0x24>
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <SysTick_Handler+0x30>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b11b      	cbz	r3, 8000484 <SysTick_Handler+0x24>
	{
		send_pdo_usart();
 800047c:	f000 f8f0 	bl	8000660 <send_pdo_usart>
		send_usart_cnt_ms = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	6023      	str	r3, [r4, #0]
	}
}
 8000484:	bd10      	pop	{r4, pc}
 8000486:	bf00      	nop
 8000488:	200002ac 	.word	0x200002ac
 800048c:	2000028c 	.word	0x2000028c
 8000490:	200002b0 	.word	0x200002b0

08000494 <DMA1_Channel6_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(huart2.hdmarx);
 8000494:	4b01      	ldr	r3, [pc, #4]	; (800049c <DMA1_Channel6_IRQHandler+0x8>)
 8000496:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000498:	f000 bf0b 	b.w	80012b2 <HAL_DMA_IRQHandler>
 800049c:	20000458 	.word	0x20000458

080004a0 <DMA1_Channel7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(huart2.hdmatx);
 80004a0:	4b01      	ldr	r3, [pc, #4]	; (80004a8 <DMA1_Channel7_IRQHandler+0x8>)
 80004a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80004a4:	f000 bf05 	b.w	80012b2 <HAL_DMA_IRQHandler>
 80004a8:	20000458 	.word	0x20000458

080004ac <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA  
  *         used for USART data transmission     
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&huart2);
 80004ac:	4801      	ldr	r0, [pc, #4]	; (80004b4 <USART2_IRQHandler+0x8>)
 80004ae:	f001 bd53 	b.w	8001f58 <HAL_UART_IRQHandler>
 80004b2:	bf00      	nop
 80004b4:	20000458 	.word	0x20000458

080004b8 <CAN_RX0_IRQHandler>:
  * @param  None
  * @retval None
  */
void CANx_RX_IRQHandler(void)
{
  HAL_CAN_IRQHandler(&hcan);
 80004b8:	4801      	ldr	r0, [pc, #4]	; (80004c0 <CAN_RX0_IRQHandler+0x8>)
 80004ba:	f000 bd09 	b.w	8000ed0 <HAL_CAN_IRQHandler>
 80004be:	bf00      	nop
 80004c0:	200002d4 	.word	0x200002d4

080004c4 <TIM1_BRK_TIM15_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim2);
 80004c4:	4801      	ldr	r0, [pc, #4]	; (80004cc <TIM1_BRK_TIM15_IRQHandler+0x8>)
 80004c6:	f001 bb95 	b.w	8001bf4 <HAL_TIM_IRQHandler>
 80004ca:	bf00      	nop
 80004cc:	20000370 	.word	0x20000370

080004d0 <HAL_TIM_PeriodElapsedCallback>:
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    //cnt++;	//BSP_LED_Toggle(LED3);
}
 80004d0:	4770      	bx	lr
	...

080004d4 <MX_USART2_UART_Init>:

/* Private functions ---------------------------------------------------------*/

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 80004d4:	b508      	push	{r3, lr}
	send_usart_tim_ms = 5;	// send usart msg every x [ms]
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <MX_USART2_UART_Init+0x38>)

	huart2.Instance = USART2;
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <MX_USART2_UART_Init+0x3c>)
	send_usart_tim_ms = 5;	// send usart msg every x [ms]
 80004da:	2205      	movs	r2, #5
 80004dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80004de:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <MX_USART2_UART_Init+0x40>)
 80004e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80004e4:	e9c0 2300 	strd	r2, r3, [r0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e8:	2300      	movs	r3, #0
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 80004ea:	220c      	movs	r2, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 80004ec:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f0:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f4:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart2.Init.Parity = UART_PARITY_NONE;
 80004f8:	6103      	str	r3, [r0, #16]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004fa:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fc:	f001 ff64 	bl	80023c8 <HAL_UART_Init>
 8000500:	b118      	cbz	r0, 800050a <MX_USART2_UART_Init+0x36>
	{
	  Error_Handler();
	}
}
 8000502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 8000506:	f7ff bf89 	b.w	800041c <Error_Handler>
}
 800050a:	bd08      	pop	{r3, pc}
 800050c:	2000028c 	.word	0x2000028c
 8000510:	20000458 	.word	0x20000458
 8000514:	40004400 	.word	0x40004400

08000518 <HAL_UART_MspInit>:
{

	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* Enable GPIO clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 8000518:	4b3c      	ldr	r3, [pc, #240]	; (800060c <HAL_UART_MspInit+0xf4>)
{
 800051a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	USARTx_TX_GPIO_CLK_ENABLE();
 800051e:	695a      	ldr	r2, [r3, #20]
	GPIO_InitStruct.Alternate = USARTx_TX_AF;

	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);

	/* Configure the DMA handler for Transmission process */
	hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8000520:	4d3b      	ldr	r5, [pc, #236]	; (8000610 <HAL_UART_MspInit+0xf8>)
	USARTx_TX_GPIO_CLK_ENABLE();
 8000522:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000526:	615a      	str	r2, [r3, #20]
 8000528:	695a      	ldr	r2, [r3, #20]
{
 800052a:	b08b      	sub	sp, #44	; 0x2c
	USARTx_TX_GPIO_CLK_ENABLE();
 800052c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000530:	9201      	str	r2, [sp, #4]
 8000532:	9a01      	ldr	r2, [sp, #4]
	USARTx_RX_GPIO_CLK_ENABLE();
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800053a:	615a      	str	r2, [r3, #20]
 800053c:	695a      	ldr	r2, [r3, #20]
 800053e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000542:	9202      	str	r2, [sp, #8]
 8000544:	9a02      	ldr	r2, [sp, #8]
	USARTx_CLK_ENABLE();
 8000546:	69da      	ldr	r2, [r3, #28]
 8000548:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800054c:	61da      	str	r2, [r3, #28]
 800054e:	69da      	ldr	r2, [r3, #28]
 8000550:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000554:	9203      	str	r2, [sp, #12]
 8000556:	9a03      	ldr	r2, [sp, #12]
	DMAx_CLK_ENABLE();
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	f042 0201 	orr.w	r2, r2, #1
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000568:	f248 0204 	movw	r2, #32772	; 0x8004
	DMAx_CLK_ENABLE();
 800056c:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056e:	2302      	movs	r3, #2
 8000570:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000574:	2701      	movs	r7, #1
 8000576:	2303      	movs	r3, #3
{
 8000578:	4606      	mov	r6, r0
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800057a:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057c:	e9cd 7307 	strd	r7, r3, [sp, #28]
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000584:	2307      	movs	r3, #7
 8000586:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000588:	f000 feda 	bl	8001340 <HAL_GPIO_Init>
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <HAL_UART_MspInit+0xfc>)
	hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800058e:	2400      	movs	r4, #0
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000590:	f04f 0810 	mov.w	r8, #16
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000594:	f04f 0980 	mov.w	r9, #128	; 0x80
	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_tx.Init.Mode                = DMA_NORMAL;
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

	HAL_DMA_Init(&hdma_tx);
 8000598:	4628      	mov	r0, r5
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800059a:	e9c5 3800 	strd	r3, r8, [r5]
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800059e:	e9c5 4902 	strd	r4, r9, [r5, #8]
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80005a2:	e9c5 4404 	strd	r4, r4, [r5, #16]
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80005a6:	e9c5 4406 	strd	r4, r4, [r5, #24]
	HAL_DMA_Init(&hdma_tx);
 80005aa:	f000 fdf7 	bl	800119c <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the UART handle */
	__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 80005ae:	66b5      	str	r5, [r6, #104]	; 0x68
 80005b0:	626e      	str	r6, [r5, #36]	; 0x24

	/* Configure the DMA handler for reception process */
	hdma_rx.Instance                 = USARTx_RX_DMA_CHANNEL;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <HAL_UART_MspInit+0x100>)
 80005b4:	4d19      	ldr	r5, [pc, #100]	; (800061c <HAL_UART_MspInit+0x104>)
	hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80005b6:	e9c5 3400 	strd	r3, r4, [r5]
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_rx.Init.Mode                = DMA_NORMAL;
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

	HAL_DMA_Init(&hdma_rx);
 80005ba:	4628      	mov	r0, r5
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80005bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c0:	61eb      	str	r3, [r5, #28]
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80005c2:	e9c5 4902 	strd	r4, r9, [r5, #8]
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80005c6:	e9c5 4404 	strd	r4, r4, [r5, #16]
	hdma_rx.Init.Mode                = DMA_NORMAL;
 80005ca:	61ac      	str	r4, [r5, #24]
	HAL_DMA_Init(&hdma_rx);
 80005cc:	f000 fde6 	bl	800119c <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the the UART handle */
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);

	/* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 80005d0:	463a      	mov	r2, r7
 80005d2:	4621      	mov	r1, r4
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);
 80005d4:	66f5      	str	r5, [r6, #108]	; 0x6c
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 80005d6:	2011      	movs	r0, #17
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);
 80005d8:	626e      	str	r6, [r5, #36]	; 0x24
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 80005da:	f000 fd89 	bl	80010f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80005de:	2011      	movs	r0, #17
 80005e0:	f000 fdb8 	bl	8001154 <HAL_NVIC_EnableIRQ>

	/* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
	HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 80005e4:	4622      	mov	r2, r4
 80005e6:	4621      	mov	r1, r4
 80005e8:	4640      	mov	r0, r8
 80005ea:	f000 fd81 	bl	80010f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 80005ee:	4640      	mov	r0, r8
 80005f0:	f000 fdb0 	bl	8001154 <HAL_NVIC_EnableIRQ>

	/* NVIC configuration for USART, to catch the TX complete */
	HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 80005f4:	463a      	mov	r2, r7
 80005f6:	4621      	mov	r1, r4
 80005f8:	2026      	movs	r0, #38	; 0x26
 80005fa:	f000 fd79 	bl	80010f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f000 fda8 	bl	8001154 <HAL_NVIC_EnableIRQ>

}
 8000604:	b00b      	add	sp, #44	; 0x2c
 8000606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	20000400 	.word	0x20000400
 8000614:	40020080 	.word	0x40020080
 8000618:	4002006c 	.word	0x4002006c
 800061c:	200003b0 	.word	0x200003b0

08000620 <HAL_UART_TxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	usart_tx_msg_cnt++;
 8000620:	4a02      	ldr	r2, [pc, #8]	; (800062c <HAL_UART_TxCpltCallback+0xc>)
 8000622:	6853      	ldr	r3, [r2, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	6053      	str	r3, [r2, #4]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	2000028c 	.word	0x2000028c

08000630 <calc_artifact>:
	calc_chksm(serial_tx, checksum);
}

void calc_artifact(uint8_t *en_artifact, uint8_t *serial_tx, uint8_t val, uint16_t pos)
{
	if (val == 0x0A)
 8000630:	2a0a      	cmp	r2, #10
 8000632:	d10a      	bne.n	800064a <calc_artifact+0x1a>
	{
		*serial_tx = 0x1A;
 8000634:	221a      	movs	r2, #26
 8000636:	700a      	strb	r2, [r1, #0]
		*en_artifact |= (uint8_t)(0x0001 << (7-pos));
 8000638:	f1c3 0307 	rsb	r3, r3, #7
 800063c:	2201      	movs	r2, #1
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	7802      	ldrb	r2, [r0, #0]
 8000644:	4313      	orrs	r3, r2
 8000646:	7003      	strb	r3, [r0, #0]
	}
	else
		*serial_tx = val;
}
 8000648:	4770      	bx	lr
		*serial_tx = val;
 800064a:	700a      	strb	r2, [r1, #0]
}
 800064c:	4770      	bx	lr

0800064e <fill_usart_tx>:
{
 800064e:	b538      	push	{r3, r4, r5, lr}
 8000650:	9d04      	ldr	r5, [sp, #16]
	calc_artifact(en_artifact, serial_tx, val, pos);
 8000652:	f7ff ffed 	bl	8000630 <calc_artifact>

void calc_chksm(uint8_t *serial_tx, uint8_t *checksum)
{
	*checksum ^= *serial_tx;
 8000656:	782b      	ldrb	r3, [r5, #0]
 8000658:	780a      	ldrb	r2, [r1, #0]
 800065a:	4053      	eors	r3, r2
 800065c:	702b      	strb	r3, [r5, #0]
}
 800065e:	bd38      	pop	{r3, r4, r5, pc}

08000660 <send_pdo_usart>:
{
 8000660:	b5f0      	push	{r4, r5, r6, r7, lr}
	data_cmd_sts.bit.chksm_rx_err_sts = (usart_rx_chksum_err & 0x7F);
 8000662:	4c4e      	ldr	r4, [pc, #312]	; (800079c <send_pdo_usart+0x13c>)
{
 8000664:	b085      	sub	sp, #20
	uint8_t en_artifact = 0;
 8000666:	2300      	movs	r3, #0
	data_cmd_sts.bit.read_cmd = 0;
 8000668:	7a27      	ldrb	r7, [r4, #8]
	uint8_t en_artifact = 0;
 800066a:	f88d 300a 	strb.w	r3, [sp, #10]
	uint8_t data_val[4] = {0, 0, 0, 0};
 800066e:	9303      	str	r3, [sp, #12]
	if (en_usart_tx_sdo)
 8000670:	7a63      	ldrb	r3, [r4, #9]
	uint8_t chksm = 0xA5;
 8000672:	22a5      	movs	r2, #165	; 0xa5
 8000674:	f88d 200b 	strb.w	r2, [sp, #11]
	data_cmd_sts.bit.read_cmd = 0;
 8000678:	007f      	lsls	r7, r7, #1
	if (en_usart_tx_sdo)
 800067a:	2b00      	cmp	r3, #0
 800067c:	d076      	beq.n	800076c <send_pdo_usart+0x10c>
		idx = promise_sdo - ID_SDO_00;
 800067e:	8963      	ldrh	r3, [r4, #10]
		memcpy(&(data_val[0]), param_data[idx].val, param_data[idx].num_byte);
 8000680:	4e47      	ldr	r6, [pc, #284]	; (80007a0 <send_pdo_usart+0x140>)
		idx = promise_sdo - ID_SDO_00;
 8000682:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		memcpy(&(data_val[0]), param_data[idx].val, param_data[idx].num_byte);
 8000686:	b29b      	uxth	r3, r3
 8000688:	250c      	movs	r5, #12
 800068a:	435d      	muls	r5, r3
 800068c:	1973      	adds	r3, r6, r5
 800068e:	a803      	add	r0, sp, #12
 8000690:	88da      	ldrh	r2, [r3, #6]
 8000692:	6899      	ldr	r1, [r3, #8]
 8000694:	f001 feec 	bl	8002470 <memcpy>
		usart_tx_read_param_cnt++;
 8000698:	7b23      	ldrb	r3, [r4, #12]
		data_id[0] = (uint8_t)((param_data[idx].id & 0x0000FF00) >> 8);
 800069a:	5976      	ldr	r6, [r6, r5]
		usart_tx_read_param_cnt++;
 800069c:	3301      	adds	r3, #1
		data_id[0] = (uint8_t)((param_data[idx].id & 0x0000FF00) >> 8);
 800069e:	f3c6 2207 	ubfx	r2, r6, #8, #8
		usart_tx_read_param_cnt++;
 80006a2:	7323      	strb	r3, [r4, #12]
		data_id[1] = (uint8_t)(param_data[idx].id & 0x000000FF);
 80006a4:	b2f6      	uxtb	r6, r6
	fill_usart_tx(&en_artifact, &usart_tx.data_id[0], data_id[0], 0, &chksm);
 80006a6:	f10d 050b 	add.w	r5, sp, #11
 80006aa:	493e      	ldr	r1, [pc, #248]	; (80007a4 <send_pdo_usart+0x144>)
 80006ac:	9500      	str	r5, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	f10d 000a 	add.w	r0, sp, #10
 80006b4:	f7ff ffcb 	bl	800064e <fill_usart_tx>
	fill_usart_tx(&en_artifact, &usart_tx.data_id[1], data_id[1], 1, &chksm);
 80006b8:	493b      	ldr	r1, [pc, #236]	; (80007a8 <send_pdo_usart+0x148>)
 80006ba:	9500      	str	r5, [sp, #0]
 80006bc:	2301      	movs	r3, #1
 80006be:	4632      	mov	r2, r6
 80006c0:	f10d 000a 	add.w	r0, sp, #10
 80006c4:	f7ff ffc3 	bl	800064e <fill_usart_tx>
	fill_usart_tx(&en_artifact, &usart_tx.data_val[0], data_val[0], 2, &chksm);
 80006c8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80006cc:	4937      	ldr	r1, [pc, #220]	; (80007ac <send_pdo_usart+0x14c>)
 80006ce:	9500      	str	r5, [sp, #0]
 80006d0:	2302      	movs	r3, #2
 80006d2:	f10d 000a 	add.w	r0, sp, #10
 80006d6:	f7ff ffba 	bl	800064e <fill_usart_tx>
	fill_usart_tx(&en_artifact, &usart_tx.data_val[1], data_val[1], 3, &chksm);
 80006da:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80006de:	4934      	ldr	r1, [pc, #208]	; (80007b0 <send_pdo_usart+0x150>)
 80006e0:	9500      	str	r5, [sp, #0]
 80006e2:	2303      	movs	r3, #3
 80006e4:	f10d 000a 	add.w	r0, sp, #10
 80006e8:	f7ff ffb1 	bl	800064e <fill_usart_tx>
	fill_usart_tx(&en_artifact, &usart_tx.data_val[2], data_val[2], 4, &chksm);
 80006ec:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80006f0:	4930      	ldr	r1, [pc, #192]	; (80007b4 <send_pdo_usart+0x154>)
 80006f2:	9500      	str	r5, [sp, #0]
 80006f4:	2304      	movs	r3, #4
 80006f6:	f10d 000a 	add.w	r0, sp, #10
 80006fa:	f7ff ffa8 	bl	800064e <fill_usart_tx>
	fill_usart_tx(&en_artifact, &usart_tx.data_val[3], data_val[3], 5, &chksm);
 80006fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000702:	492d      	ldr	r1, [pc, #180]	; (80007b8 <send_pdo_usart+0x158>)
 8000704:	9500      	str	r5, [sp, #0]
 8000706:	2305      	movs	r3, #5
 8000708:	f10d 000a 	add.w	r0, sp, #10
 800070c:	f7ff ff9f 	bl	800064e <fill_usart_tx>
	fill_usart_tx(&en_artifact, &usart_tx.cmd_sts.all, data_cmd_sts.all, 6, &chksm);
 8000710:	492a      	ldr	r1, [pc, #168]	; (80007bc <send_pdo_usart+0x15c>)
 8000712:	9500      	str	r5, [sp, #0]
 8000714:	2306      	movs	r3, #6
 8000716:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800071a:	f10d 000a 	add.w	r0, sp, #10
 800071e:	f7ff ff96 	bl	800064e <fill_usart_tx>
			((en_artifact == 0x0A) ? (0x01) : (en_artifact)), 7, &chksm);
 8000722:	f89d 200a 	ldrb.w	r2, [sp, #10]
	fill_usart_tx(&en_artifact, &usart_tx.artifact,
 8000726:	4926      	ldr	r1, [pc, #152]	; (80007c0 <send_pdo_usart+0x160>)
 8000728:	9500      	str	r5, [sp, #0]
 800072a:	2a0a      	cmp	r2, #10
 800072c:	bf08      	it	eq
 800072e:	2201      	moveq	r2, #1
 8000730:	2307      	movs	r3, #7
 8000732:	f10d 000a 	add.w	r0, sp, #10
 8000736:	f7ff ff8a 	bl	800064e <fill_usart_tx>
	fill_usart_tx(&en_artifact, &usart_tx.checksum, chksm, 8, &chksm);
 800073a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800073e:	4921      	ldr	r1, [pc, #132]	; (80007c4 <send_pdo_usart+0x164>)
 8000740:	9500      	str	r5, [sp, #0]
 8000742:	f10d 000a 	add.w	r0, sp, #10
 8000746:	2308      	movs	r3, #8
 8000748:	f7ff ff81 	bl	800064e <fill_usart_tx>
	usart_tx.lf = 0x0A;
 800074c:	4915      	ldr	r1, [pc, #84]	; (80007a4 <send_pdo_usart+0x144>)
	if(HAL_UART_Transmit_DMA(&huart2, &usart_tx.data_id[0], USART_MSG_LENGTH)!= HAL_OK)
 800074e:	481e      	ldr	r0, [pc, #120]	; (80007c8 <send_pdo_usart+0x168>)
	usart_tx.lf = 0x0A;
 8000750:	220a      	movs	r2, #10
 8000752:	724a      	strb	r2, [r1, #9]
	if(HAL_UART_Transmit_DMA(&huart2, &usart_tx.data_id[0], USART_MSG_LENGTH)!= HAL_OK)
 8000754:	f001 fb10 	bl	8001d78 <HAL_UART_Transmit_DMA>
 8000758:	b108      	cbz	r0, 800075e <send_pdo_usart+0xfe>
		Error_Handler();
 800075a:	f7ff fe5f 	bl	800041c <Error_Handler>
	if (en_usart_tx_sdo)
 800075e:	7a62      	ldrb	r2, [r4, #9]
 8000760:	b19a      	cbz	r2, 800078a <send_pdo_usart+0x12a>
		en_usart_tx_sdo = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	7263      	strb	r3, [r4, #9]
		promise_sdo = 0;
 8000766:	8163      	strh	r3, [r4, #10]
}
 8000768:	b005      	add	sp, #20
 800076a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&(data_val[0]), process_data[usart_tx_idx].val, process_data[usart_tx_idx].num_byte);
 800076c:	89e3      	ldrh	r3, [r4, #14]
 800076e:	4e17      	ldr	r6, [pc, #92]	; (80007cc <send_pdo_usart+0x16c>)
 8000770:	250c      	movs	r5, #12
 8000772:	435d      	muls	r5, r3
 8000774:	1973      	adds	r3, r6, r5
 8000776:	a803      	add	r0, sp, #12
 8000778:	88da      	ldrh	r2, [r3, #6]
 800077a:	6899      	ldr	r1, [r3, #8]
 800077c:	f001 fe78 	bl	8002470 <memcpy>
		data_id[0] = (uint8_t)((process_data[usart_tx_idx].id & 0x0000FF00) >> 8);
 8000780:	5976      	ldr	r6, [r6, r5]
 8000782:	f3c6 2207 	ubfx	r2, r6, #8, #8
		data_id[1] = (uint8_t)(process_data[usart_tx_idx].id & 0x000000FF);
 8000786:	b2f6      	uxtb	r6, r6
 8000788:	e78d      	b.n	80006a6 <send_pdo_usart+0x46>
		usart_tx_idx++;
 800078a:	89e3      	ldrh	r3, [r4, #14]
 800078c:	3301      	adds	r3, #1
 800078e:	b29b      	uxth	r3, r3
		if (usart_tx_idx >= PDO_LENGTH)
 8000790:	2b0d      	cmp	r3, #13
		usart_tx_idx++;
 8000792:	bf94      	ite	ls
 8000794:	81e3      	strhls	r3, [r4, #14]
			usart_tx_idx = 0;
 8000796:	81e2      	strhhi	r2, [r4, #14]
}
 8000798:	e7e6      	b.n	8000768 <send_pdo_usart+0x108>
 800079a:	bf00      	nop
 800079c:	2000028c 	.word	0x2000028c
 80007a0:	2000003c 	.word	0x2000003c
 80007a4:	200003f4 	.word	0x200003f4
 80007a8:	200003f5 	.word	0x200003f5
 80007ac:	200003f6 	.word	0x200003f6
 80007b0:	200003f7 	.word	0x200003f7
 80007b4:	200003f8 	.word	0x200003f8
 80007b8:	200003f9 	.word	0x200003f9
 80007bc:	200003fa 	.word	0x200003fa
 80007c0:	200003fb 	.word	0x200003fb
 80007c4:	200003fc 	.word	0x200003fc
 80007c8:	20000458 	.word	0x20000458
 80007cc:	20000174 	.word	0x20000174

080007d0 <decode_usart_rx>:
}

void decode_usart_rx(uint8_t *serial_rx, uint8_t artifact_bitwise)
{
	*serial_rx = (artifact_bitwise * 0x0A) + (*serial_rx * (1 - artifact_bitwise));
 80007d0:	7802      	ldrb	r2, [r0, #0]
 80007d2:	f1c1 0301 	rsb	r3, r1, #1
 80007d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	fb02 1103 	mla	r1, r2, r3, r1
 80007e0:	7001      	strb	r1, [r0, #0]
}
 80007e2:	4770      	bx	lr

080007e4 <HAL_UART_RxCpltCallback>:
{
 80007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (HAL_UART_Receive_DMA(&huart2, usart_rx.all, USART_MSG_LENGTH)!= HAL_OK)
 80007e6:	494a      	ldr	r1, [pc, #296]	; (8000910 <HAL_UART_RxCpltCallback+0x12c>)
{
 80007e8:	4604      	mov	r4, r0
	if (HAL_UART_Receive_DMA(&huart2, usart_rx.all, USART_MSG_LENGTH)!= HAL_OK)
 80007ea:	220a      	movs	r2, #10
 80007ec:	4849      	ldr	r0, [pc, #292]	; (8000914 <HAL_UART_RxCpltCallback+0x130>)
 80007ee:	f001 fb09 	bl	8001e04 <HAL_UART_Receive_DMA>
 80007f2:	b108      	cbz	r0, 80007f8 <HAL_UART_RxCpltCallback+0x14>
		Error_Handler();
 80007f4:	f7ff fe12 	bl	800041c <Error_Handler>
	usart_rx_msg_cnt++;
 80007f8:	4e47      	ldr	r6, [pc, #284]	; (8000918 <HAL_UART_RxCpltCallback+0x134>)
 80007fa:	6933      	ldr	r3, [r6, #16]
 80007fc:	3301      	adds	r3, #1
 80007fe:	6133      	str	r3, [r6, #16]
	if ((huart->RxXferSize == 10) && (usart_rx.byte.lf == 0x0A))
 8000800:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8000804:	4c42      	ldr	r4, [pc, #264]	; (8000910 <HAL_UART_RxCpltCallback+0x12c>)
 8000806:	2b0a      	cmp	r3, #10
 8000808:	4635      	mov	r5, r6
 800080a:	d178      	bne.n	80008fe <HAL_UART_RxCpltCallback+0x11a>
 800080c:	7a61      	ldrb	r1, [r4, #9]
 800080e:	290a      	cmp	r1, #10
 8000810:	d175      	bne.n	80008fe <HAL_UART_RxCpltCallback+0x11a>
	*checksum ^= *serial_tx;
 8000812:	79e2      	ldrb	r2, [r4, #7]
 8000814:	7823      	ldrb	r3, [r4, #0]
 8000816:	7860      	ldrb	r0, [r4, #1]
 8000818:	4053      	eors	r3, r2
 800081a:	4043      	eors	r3, r0
 800081c:	78a0      	ldrb	r0, [r4, #2]
 800081e:	4043      	eors	r3, r0
 8000820:	78e0      	ldrb	r0, [r4, #3]
 8000822:	4043      	eors	r3, r0
 8000824:	7920      	ldrb	r0, [r4, #4]
 8000826:	4043      	eors	r3, r0
 8000828:	7960      	ldrb	r0, [r4, #5]
 800082a:	4043      	eors	r3, r0
 800082c:	79a0      	ldrb	r0, [r4, #6]
 800082e:	4043      	eors	r3, r0
		usart_rx.byte.checksum = ((usart_rx.byte.checksum == 0x1A) ? (0x0A) : (usart_rx.byte.checksum));
 8000830:	7a20      	ldrb	r0, [r4, #8]
 8000832:	281a      	cmp	r0, #26
 8000834:	bf08      	it	eq
 8000836:	200a      	moveq	r0, #10
	*checksum ^= *serial_tx;
 8000838:	f083 03a5 	eor.w	r3, r3, #165	; 0xa5
		if (computed_chksm == usart_rx.byte.checksum)
 800083c:	4298      	cmp	r0, r3
		usart_rx.byte.checksum = ((usart_rx.byte.checksum == 0x1A) ? (0x0A) : (usart_rx.byte.checksum));
 800083e:	7220      	strb	r0, [r4, #8]
		if (computed_chksm == usart_rx.byte.checksum)
 8000840:	d14e      	bne.n	80008e0 <HAL_UART_RxCpltCallback+0xfc>
			en_send_can = 1;
 8000842:	2301      	movs	r3, #1
			usart_rx.byte.artifact = ((usart_rx.byte.artifact == 0x01) ? (0x0A) : (usart_rx.byte.artifact));
 8000844:	429a      	cmp	r2, r3
 8000846:	bf18      	it	ne
 8000848:	4611      	movne	r1, r2
 800084a:	71e1      	strb	r1, [r4, #7]
			decode_usart_rx(&usart_rx.byte.data_id[0], ((usart_rx.byte.artifact & 0x80) >> 7));
 800084c:	4620      	mov	r0, r4
 800084e:	09c9      	lsrs	r1, r1, #7
			en_send_can = 1;
 8000850:	7533      	strb	r3, [r6, #20]
			decode_usart_rx(&usart_rx.byte.data_id[0], ((usart_rx.byte.artifact & 0x80) >> 7));
 8000852:	f7ff ffbd 	bl	80007d0 <decode_usart_rx>
			decode_usart_rx(&usart_rx.byte.data_id[1], ((usart_rx.byte.artifact & 0x40) >> 6));
 8000856:	79e1      	ldrb	r1, [r4, #7]
 8000858:	1c60      	adds	r0, r4, #1
 800085a:	f3c1 1180 	ubfx	r1, r1, #6, #1
 800085e:	f7ff ffb7 	bl	80007d0 <decode_usart_rx>
			decode_usart_rx(&usart_rx.byte.data_val[0], ((usart_rx.byte.artifact & 0x20) >> 5));
 8000862:	79e1      	ldrb	r1, [r4, #7]
 8000864:	1ca0      	adds	r0, r4, #2
 8000866:	f3c1 1140 	ubfx	r1, r1, #5, #1
 800086a:	f7ff ffb1 	bl	80007d0 <decode_usart_rx>
			decode_usart_rx(&usart_rx.byte.data_val[1], ((usart_rx.byte.artifact & 0x10) >> 4));
 800086e:	79e1      	ldrb	r1, [r4, #7]
 8000870:	1ce0      	adds	r0, r4, #3
 8000872:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8000876:	f7ff ffab 	bl	80007d0 <decode_usart_rx>
			decode_usart_rx(&usart_rx.byte.data_val[2], ((usart_rx.byte.artifact & 0x08) >> 3));
 800087a:	79e1      	ldrb	r1, [r4, #7]
 800087c:	1d20      	adds	r0, r4, #4
 800087e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8000882:	f7ff ffa5 	bl	80007d0 <decode_usart_rx>
			decode_usart_rx(&usart_rx.byte.data_val[3], ((usart_rx.byte.artifact & 0x04) >> 2));
 8000886:	79e1      	ldrb	r1, [r4, #7]
 8000888:	1d60      	adds	r0, r4, #5
 800088a:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800088e:	f7ff ff9f 	bl	80007d0 <decode_usart_rx>
			decode_usart_rx(&usart_rx.byte.cmd_sts.all, ((usart_rx.byte.artifact & 0x02) >> 1));
 8000892:	79e1      	ldrb	r1, [r4, #7]
 8000894:	1da0      	adds	r0, r4, #6
 8000896:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800089a:	f7ff ff99 	bl	80007d0 <decode_usart_rx>
				(uint16_t)((usart_rx.byte.data_id[0] << 8) & 0xFF00));
 800089e:	7823      	ldrb	r3, [r4, #0]
		data_id = (uint32_t)((uint16_t)(usart_rx.byte.data_id[1] & 0x00FF) +
 80008a0:	7867      	ldrb	r7, [r4, #1]
 80008a2:	eb07 2703 	add.w	r7, r7, r3, lsl #8
		if (usart_rx.byte.cmd_sts.bit.read_cmd == 1)
 80008a6:	79a3      	ldrb	r3, [r4, #6]
 80008a8:	f013 0301 	ands.w	r3, r3, #1
 80008ac:	d12b      	bne.n	8000906 <HAL_UART_RxCpltCallback+0x122>
			can_tx_header.StdId = data_id;
 80008ae:	491b      	ldr	r1, [pc, #108]	; (800091c <HAL_UART_RxCpltCallback+0x138>)
		    if (HAL_CAN_AddTxMessage(&hcan, &can_tx_header, &can_tx[0], &can_tx_mailbox) != HAL_OK)
 80008b0:	481b      	ldr	r0, [pc, #108]	; (8000920 <HAL_UART_RxCpltCallback+0x13c>)
			can_tx_header.TransmitGlobalTime = DISABLE;
 80008b2:	750b      	strb	r3, [r1, #20]
			can_tx_header.DLC = CAN_DATA_LENGTH;
 80008b4:	2204      	movs	r2, #4
 80008b6:	610a      	str	r2, [r1, #16]
			can_tx[0] = usart_rx.byte.data_val[0];
 80008b8:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <HAL_UART_RxCpltCallback+0x140>)
			can_tx_header.StdId = data_id;
 80008ba:	600f      	str	r7, [r1, #0]
			can_tx_header.IDE = CAN_ID_STD;
 80008bc:	e9c1 3302 	strd	r3, r3, [r1, #8]
			can_tx[0] = usart_rx.byte.data_val[0];
 80008c0:	78a3      	ldrb	r3, [r4, #2]
 80008c2:	7013      	strb	r3, [r2, #0]
			can_tx[1] = usart_rx.byte.data_val[1];
 80008c4:	78e3      	ldrb	r3, [r4, #3]
 80008c6:	7053      	strb	r3, [r2, #1]
			can_tx[2] = usart_rx.byte.data_val[2];
 80008c8:	7923      	ldrb	r3, [r4, #4]
 80008ca:	7093      	strb	r3, [r2, #2]
			can_tx[3] = usart_rx.byte.data_val[3];
 80008cc:	7963      	ldrb	r3, [r4, #5]
 80008ce:	70d3      	strb	r3, [r2, #3]
		    if (HAL_CAN_AddTxMessage(&hcan, &can_tx_header, &can_tx[0], &can_tx_mailbox) != HAL_OK)
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_UART_RxCpltCallback+0x144>)
 80008d2:	f000 fa19 	bl	8000d08 <HAL_CAN_AddTxMessage>
 80008d6:	b108      	cbz	r0, 80008dc <HAL_UART_RxCpltCallback+0xf8>
		    	Error_Handler();
 80008d8:	f7ff fda0 	bl	800041c <Error_Handler>
		    promise_sdo = (uint16_t)data_id;
 80008dc:	816f      	strh	r7, [r5, #10]
 80008de:	e016      	b.n	800090e <HAL_UART_RxCpltCallback+0x12a>
			usart_rx_chksum_err++;
 80008e0:	7a33      	ldrb	r3, [r6, #8]
 80008e2:	3301      	adds	r3, #1
 80008e4:	7233      	strb	r3, [r6, #8]
		usart_rx.byte.data_id[0] = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	7023      	strb	r3, [r4, #0]
		usart_rx.byte.data_id[1] = 0;
 80008ea:	7063      	strb	r3, [r4, #1]
		usart_rx.byte.data_val[0] = 0;
 80008ec:	70a3      	strb	r3, [r4, #2]
		usart_rx.byte.data_val[1] = 0;
 80008ee:	70e3      	strb	r3, [r4, #3]
		usart_rx.byte.data_val[2] = 0;
 80008f0:	7123      	strb	r3, [r4, #4]
		usart_rx.byte.data_val[3] = 0;
 80008f2:	7163      	strb	r3, [r4, #5]
		usart_rx.byte.cmd_sts.all = 0;
 80008f4:	71a3      	strb	r3, [r4, #6]
		usart_rx.byte.artifact = 0;
 80008f6:	71e3      	strb	r3, [r4, #7]
		usart_rx.byte.checksum = 0;
 80008f8:	7223      	strb	r3, [r4, #8]
		usart_rx.byte.lf = 0;
 80008fa:	7263      	strb	r3, [r4, #9]
}
 80008fc:	e007      	b.n	800090e <HAL_UART_RxCpltCallback+0x12a>
		usart_rx_chksum_err++;
 80008fe:	7a2b      	ldrb	r3, [r5, #8]
 8000900:	3301      	adds	r3, #1
 8000902:	722b      	strb	r3, [r5, #8]
	if (!usart_rx_err)
 8000904:	e7ef      	b.n	80008e6 <HAL_UART_RxCpltCallback+0x102>
			usart_rx_read_param_cnt++;
 8000906:	7d73      	ldrb	r3, [r6, #21]
			promise_sdo = (uint16_t)data_id;
 8000908:	8177      	strh	r7, [r6, #10]
			usart_rx_read_param_cnt++;
 800090a:	3301      	adds	r3, #1
 800090c:	7573      	strb	r3, [r6, #21]
}
 800090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000910:	2000044e 	.word	0x2000044e
 8000914:	20000458 	.word	0x20000458
 8000918:	2000028c 	.word	0x2000028c
 800091c:	20000350 	.word	0x20000350
 8000920:	200002d4 	.word	0x200002d4
 8000924:	20000368 	.word	0x20000368
 8000928:	200002b4 	.word	0x200002b4

0800092c <HAL_UART_ErrorCallback>:
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
}
 800092c:	4770      	bx	lr
	...

08000930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000968 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000934:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000936:	e003      	b.n	8000940 <LoopCopyDataInit>

08000938 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800093a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800093c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800093e:	3104      	adds	r1, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000944:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000946:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000948:	d3f6      	bcc.n	8000938 <CopyDataInit>
	ldr	r2, =_sbss
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <LoopForever+0x12>)
	b	LoopFillZerobss
 800094c:	e002      	b.n	8000954 <LoopFillZerobss>

0800094e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800094e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000950:	f842 3b04 	str.w	r3, [r2], #4

08000954 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <LoopForever+0x16>)
	cmp	r2, r3
 8000956:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000958:	d3f9      	bcc.n	800094e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800095a:	f000 f843 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095e:	f001 fd63 	bl	8002428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000962:	f7ff fd43 	bl	80003ec <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000968:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800096c:	080024f8 	.word	0x080024f8
	ldr	r0, =_sdata
 8000970:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000974:	2000022c 	.word	0x2000022c
	ldr	r2, =_sbss
 8000978:	2000022c 	.word	0x2000022c
	ldr	r3, = _ebss
 800097c:	200004dc 	.word	0x200004dc

08000980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>
	...

08000984 <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <BSP_LED_Init+0x48>)
{
 8000986:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000988:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800098a:	4d11      	ldr	r5, [pc, #68]	; (80009d0 <BSP_LED_Init+0x4c>)
  LEDx_GPIO_CLK_ENABLE(Led);
 800098c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	695b      	ldr	r3, [r3, #20]
{
 8000994:	b087      	sub	sp, #28
  LEDx_GPIO_CLK_ENABLE(Led);
 8000996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	9b00      	ldr	r3, [sp, #0]
{
 800099e:	4604      	mov	r4, r0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2608      	movs	r6, #8
 80009a2:	2301      	movs	r3, #1
 80009a4:	e9cd 6301 	strd	r6, r3, [sp, #4]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80009a8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	2700      	movs	r7, #0
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80009b0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	e9cd 7303 	strd	r7, r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80009b6:	f000 fcc3 	bl	8001340 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80009ba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80009be:	463a      	mov	r2, r7
 80009c0:	4631      	mov	r1, r6
 80009c2:	f000 fd77 	bl	80014b4 <HAL_GPIO_WritePin>
}
 80009c6:	b007      	add	sp, #28
 80009c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000
 80009d0:	2000021c 	.word	0x2000021c

080009d4 <BSP_LED_Toggle>:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <BSP_LED_Toggle+0xc>)
 80009d6:	2108      	movs	r1, #8
 80009d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80009dc:	f000 bd6f 	b.w	80014be <HAL_GPIO_TogglePin>
 80009e0:	2000021c 	.word	0x2000021c

080009e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4915      	ldr	r1, [pc, #84]	; (8000a3c <SystemInit+0x58>)
 80009e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80009ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <SystemInit+0x5c>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	f042 0201 	orr.w	r2, r2, #1
 80009fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80009fc:	6858      	ldr	r0, [r3, #4]
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <SystemInit+0x60>)
 8000a00:	4002      	ands	r2, r0
 8000a02:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000a0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a0e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a16:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000a1e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a22:	f022 020f 	bic.w	r2, r2, #15
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000a28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a2a:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <SystemInit+0x64>)
 8000a2c:	4002      	ands	r2, r0
 8000a2e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a38:	608b      	str	r3, [r1, #8]
#endif
}
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00
 8000a40:	40021000 	.word	0x40021000
 8000a44:	f87fc00c 	.word	0xf87fc00c
 8000a48:	ff00fccc 	.word	0xff00fccc

08000a4c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_InitTick+0x3c>)
 8000a50:	4e0e      	ldr	r6, [pc, #56]	; (8000a8c <HAL_InitTick+0x40>)
{
 8000a52:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a58:	7830      	ldrb	r0, [r6, #0]
 8000a5a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a5e:	6810      	ldr	r0, [r2, #0]
 8000a60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a64:	f000 fb84 	bl	8001170 <HAL_SYSTICK_Config>
 8000a68:	4604      	mov	r4, r0
 8000a6a:	b950      	cbnz	r0, 8000a82 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	2d0f      	cmp	r5, #15
 8000a6e:	d808      	bhi.n	8000a82 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	4602      	mov	r2, r0
 8000a72:	4629      	mov	r1, r5
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 fb3a 	bl	80010f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	6075      	str	r5, [r6, #4]
 8000a7e:	4620      	mov	r0, r4
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000a82:	2001      	movs	r0, #1
 8000a84:	e7fc      	b.n	8000a80 <HAL_InitTick+0x34>
 8000a86:	bf00      	nop
 8000a88:	20000220 	.word	0x20000220
 8000a8c:	20000224 	.word	0x20000224

08000a90 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x20>)
{
 8000a92:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	6813      	ldr	r3, [r2, #0]
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 fb15 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f7ff ffd2 	bl	8000a4c <HAL_InitTick>
  HAL_MspInit();
 8000aa8:	f7ff fcba 	bl	8000420 <HAL_MspInit>
}
 8000aac:	2000      	movs	r0, #0
 8000aae:	bd08      	pop	{r3, pc}
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ab4:	4a03      	ldr	r2, [pc, #12]	; (8000ac4 <HAL_IncTick+0x10>)
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <HAL_IncTick+0x14>)
 8000ab8:	6811      	ldr	r1, [r2, #0]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	440b      	add	r3, r1
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200004d8 	.word	0x200004d8
 8000ac8:	20000224 	.word	0x20000224

08000acc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000acc:	4b01      	ldr	r3, [pc, #4]	; (8000ad4 <HAL_GetTick+0x8>)
 8000ace:	6818      	ldr	r0, [r3, #0]
}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200004d8 	.word	0x200004d8

08000ad8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ad8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ada:	4604      	mov	r4, r0
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d06e      	beq.n	8000bbe <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ae0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000ae4:	b90b      	cbnz	r3, 8000aea <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ae6:	f7ff fbaf 	bl	8000248 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000aea:	6822      	ldr	r2, [r4, #0]
 8000aec:	6813      	ldr	r3, [r2, #0]
 8000aee:	f023 0302 	bic.w	r3, r3, #2
 8000af2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000af4:	f7ff ffea 	bl	8000acc <HAL_GetTick>
 8000af8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	0791      	lsls	r1, r2, #30
 8000b00:	d451      	bmi.n	8000ba6 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	f042 0201 	orr.w	r2, r2, #1
 8000b08:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b0a:	f7ff ffdf 	bl	8000acc <HAL_GetTick>
 8000b0e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	07d2      	lsls	r2, r2, #31
 8000b16:	d554      	bpl.n	8000bc2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b18:	7e22      	ldrb	r2, [r4, #24]
 8000b1a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	bf0c      	ite	eq
 8000b20:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b24:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b2a:	7e62      	ldrb	r2, [r4, #25]
 8000b2c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	bf0c      	ite	eq
 8000b32:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b36:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b3c:	7ea2      	ldrb	r2, [r4, #26]
 8000b3e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	bf0c      	ite	eq
 8000b44:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b48:	f022 0220 	bicne.w	r2, r2, #32
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b4e:	7ee2      	ldrb	r2, [r4, #27]
 8000b50:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	bf0c      	ite	eq
 8000b56:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b5a:	f042 0210 	orrne.w	r2, r2, #16
 8000b5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b60:	7f22      	ldrb	r2, [r4, #28]
 8000b62:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	bf0c      	ite	eq
 8000b68:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b6c:	f022 0208 	bicne.w	r2, r2, #8
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b72:	7f62      	ldrb	r2, [r4, #29]
 8000b74:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	bf0c      	ite	eq
 8000b7a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b7e:	f022 0204 	bicne.w	r2, r2, #4
 8000b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b84:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	6921      	ldr	r1, [r4, #16]
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	6961      	ldr	r1, [r4, #20]
 8000b90:	430a      	orrs	r2, r1
 8000b92:	6861      	ldr	r1, [r4, #4]
 8000b94:	3901      	subs	r1, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b9a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b9c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b9e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000ba0:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000ba4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ba6:	f7ff ff91 	bl	8000acc <HAL_GetTick>
 8000baa:	1b40      	subs	r0, r0, r5
 8000bac:	280a      	cmp	r0, #10
 8000bae:	d9a4      	bls.n	8000afa <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb6:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bb8:	2305      	movs	r3, #5
 8000bba:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	e7f0      	b.n	8000ba4 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc2:	f7ff ff83 	bl	8000acc <HAL_GetTick>
 8000bc6:	1b40      	subs	r0, r0, r5
 8000bc8:	280a      	cmp	r0, #10
 8000bca:	d9a1      	bls.n	8000b10 <HAL_CAN_Init+0x38>
 8000bcc:	e7f0      	b.n	8000bb0 <HAL_CAN_Init+0xd8>

08000bce <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000bce:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bd0:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d862      	bhi.n	8000ca0 <HAL_CAN_ConfigFilter+0xd2>
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bda:	6803      	ldr	r3, [r0, #0]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bdc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000be0:	f042 0201 	orr.w	r2, r2, #1
 8000be4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000be8:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bea:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bee:	2401      	movs	r4, #1
 8000bf0:	f002 001f 	and.w	r0, r2, #31
 8000bf4:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bf8:	ea25 0500 	bic.w	r5, r5, r0
 8000bfc:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c00:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c02:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c04:	bb85      	cbnz	r5, 8000c68 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c06:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c0a:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c0c:	4025      	ands	r5, r4
 8000c0e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c12:	888d      	ldrh	r5, [r1, #4]
 8000c14:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c18:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c1c:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c20:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c22:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c24:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c28:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c2c:	698a      	ldr	r2, [r1, #24]
 8000c2e:	bb6a      	cbnz	r2, 8000c8c <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c34:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c3a:	690a      	ldr	r2, [r1, #16]
 8000c3c:	bb52      	cbnz	r2, 8000c94 <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c42:	4014      	ands	r4, r2
 8000c44:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c48:	6a0a      	ldr	r2, [r1, #32]
 8000c4a:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c4c:	bf02      	ittt	eq
 8000c4e:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8000c52:	4310      	orreq	r0, r2
 8000c54:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000c5c:	f022 0201 	bic.w	r2, r2, #1
 8000c60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c64:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c68:	2d01      	cmp	r5, #1
 8000c6a:	d1df      	bne.n	8000c2c <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c6c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c70:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c72:	4305      	orrs	r5, r0
 8000c74:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c78:	888d      	ldrh	r5, [r1, #4]
 8000c7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c7e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c82:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c86:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c88:	898d      	ldrh	r5, [r1, #12]
 8000c8a:	e7cb      	b.n	8000c24 <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c90:	4302      	orrs	r2, r0
 8000c92:	e7d0      	b.n	8000c36 <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c98:	4302      	orrs	r2, r0
 8000c9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c9e:	e7d3      	b.n	8000c48 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca6:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000ca8:	2001      	movs	r0, #1
 8000caa:	e7dc      	b.n	8000c66 <HAL_CAN_ConfigFilter+0x98>

08000cac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cac:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cae:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000cb2:	2b01      	cmp	r3, #1
{
 8000cb4:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000cb6:	b2dd      	uxtb	r5, r3
 8000cb8:	d120      	bne.n	8000cfc <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cba:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cc2:	6813      	ldr	r3, [r2, #0]
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cca:	f7ff feff 	bl	8000acc <HAL_GetTick>
 8000cce:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cd0:	6823      	ldr	r3, [r4, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f013 0301 	ands.w	r3, r3, #1
 8000cd8:	d102      	bne.n	8000ce0 <HAL_CAN_Start+0x34>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cda:	6263      	str	r3, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000cdc:	461d      	mov	r5, r3
 8000cde:	e00b      	b.n	8000cf8 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce0:	f7ff fef4 	bl	8000acc <HAL_GetTick>
 8000ce4:	1b80      	subs	r0, r0, r6
 8000ce6:	280a      	cmp	r0, #10
 8000ce8:	d9f2      	bls.n	8000cd0 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000cfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d02:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8000d04:	2501      	movs	r5, #1
 8000d06:	e7f7      	b.n	8000cf8 <HAL_CAN_Start+0x4c>

08000d08 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d0a:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d0e:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d10:	3d01      	subs	r5, #1
 8000d12:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d14:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000d16:	d843      	bhi.n	8000da0 <HAL_CAN_AddTxMessage+0x98>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d18:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000d1c:	d03c      	beq.n	8000d98 <HAL_CAN_AddTxMessage+0x90>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d1e:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000d22:	2c03      	cmp	r4, #3
 8000d24:	f04f 0501 	mov.w	r5, #1
 8000d28:	d105      	bne.n	8000d36 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000d2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d30:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000d32:	2001      	movs	r0, #1
 8000d34:	e02a      	b.n	8000d8c <HAL_CAN_AddTxMessage+0x84>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d36:	40a5      	lsls	r5, r4
 8000d38:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000d3a:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000d3e:	f104 0318 	add.w	r3, r4, #24
 8000d42:	bb20      	cbnz	r0, 8000d8e <HAL_CAN_AddTxMessage+0x86>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d44:	6808      	ldr	r0, [r1, #0]
 8000d46:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d4e:	eb06 1304 	add.w	r3, r6, r4, lsl #4
 8000d52:	690d      	ldr	r5, [r1, #16]
 8000d54:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d58:	7d09      	ldrb	r1, [r1, #20]
 8000d5a:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d5c:	bf08      	it	eq
 8000d5e:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000d62:	ea4f 1004 	mov.w	r0, r4, lsl #4
 8000d66:	bf04      	itt	eq
 8000d68:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000d6c:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d70:	4406      	add	r6, r0
 8000d72:	6851      	ldr	r1, [r2, #4]
 8000d74:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d7e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000d82:	f042 0201 	orr.w	r2, r2, #1
 8000d86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8000d8a:	2000      	movs	r0, #0
  }
}
 8000d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d8e:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000d90:	4338      	orrs	r0, r7
 8000d92:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000d96:	e7d8      	b.n	8000d4a <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9e:	e7c7      	b.n	8000d30 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000da0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da6:	e7c3      	b.n	8000d30 <HAL_CAN_AddTxMessage+0x28>

08000da8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000daa:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dae:	3c01      	subs	r4, #1
 8000db0:	2c01      	cmp	r4, #1
 8000db2:	d86c      	bhi.n	8000e8e <HAL_CAN_GetRxMessage+0xe6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000db4:	6806      	ldr	r6, [r0, #0]
 8000db6:	b941      	cbnz	r1, 8000dca <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000db8:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dba:	07a4      	lsls	r4, r4, #30
 8000dbc:	d107      	bne.n	8000dce <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dc4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	e056      	b.n	8000e78 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dca:	6934      	ldr	r4, [r6, #16]
 8000dcc:	e7f5      	b.n	8000dba <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000dce:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8000dd2:	010c      	lsls	r4, r1, #4
 8000dd4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000dd8:	f007 0704 	and.w	r7, r7, #4
 8000ddc:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000dde:	2f00      	cmp	r7, #0
 8000de0:	d14b      	bne.n	8000e7a <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000de2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000de6:	0d7f      	lsrs	r7, r7, #21
 8000de8:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000dea:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000dee:	f007 0702 	and.w	r7, r7, #2
 8000df2:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000df4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000df8:	f007 070f 	and.w	r7, r7, #15
 8000dfc:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000dfe:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e02:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e06:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e08:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e0c:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e0e:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e10:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e12:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000e16:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e18:	6802      	ldr	r2, [r0, #0]
 8000e1a:	4422      	add	r2, r4
 8000e1c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000e20:	0a12      	lsrs	r2, r2, #8
 8000e22:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e24:	6802      	ldr	r2, [r0, #0]
 8000e26:	4422      	add	r2, r4
 8000e28:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000e2c:	0c12      	lsrs	r2, r2, #16
 8000e2e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e30:	6802      	ldr	r2, [r0, #0]
 8000e32:	4422      	add	r2, r4
 8000e34:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000e38:	0e12      	lsrs	r2, r2, #24
 8000e3a:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e3c:	6802      	ldr	r2, [r0, #0]
 8000e3e:	4422      	add	r2, r4
 8000e40:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e44:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e46:	6802      	ldr	r2, [r0, #0]
 8000e48:	4422      	add	r2, r4
 8000e4a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e4e:	0a12      	lsrs	r2, r2, #8
 8000e50:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e52:	6802      	ldr	r2, [r0, #0]
 8000e54:	4422      	add	r2, r4
 8000e56:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000e5a:	0c12      	lsrs	r2, r2, #16
 8000e5c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e5e:	6802      	ldr	r2, [r0, #0]
 8000e60:	4414      	add	r4, r2
 8000e62:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000e66:	0e12      	lsrs	r2, r2, #24
 8000e68:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e6a:	6803      	ldr	r3, [r0, #0]
 8000e6c:	b951      	cbnz	r1, 8000e84 <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	f042 0220 	orr.w	r2, r2, #32
 8000e74:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000e76:	2000      	movs	r0, #0
  }
}
 8000e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e7a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000e7e:	08ff      	lsrs	r7, r7, #3
 8000e80:	6057      	str	r7, [r2, #4]
 8000e82:	e7b2      	b.n	8000dea <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	f042 0220 	orr.w	r2, r2, #32
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	e7f3      	b.n	8000e76 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e94:	e796      	b.n	8000dc4 <HAL_CAN_GetRxMessage+0x1c>

08000e96 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e96:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d805      	bhi.n	8000eac <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ea0:	6802      	ldr	r2, [r0, #0]
 8000ea2:	6953      	ldr	r3, [r2, #20]
 8000ea4:	4319      	orrs	r1, r3
 8000ea6:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000eac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb2:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000eb4:	2001      	movs	r0, #1
  }
}
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000eb8:	4770      	bx	lr

08000eba <HAL_CAN_TxMailbox1CompleteCallback>:
 8000eba:	4770      	bx	lr

08000ebc <HAL_CAN_TxMailbox2CompleteCallback>:
 8000ebc:	4770      	bx	lr

08000ebe <HAL_CAN_TxMailbox0AbortCallback>:
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_CAN_TxMailbox1AbortCallback>:
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_CAN_TxMailbox2AbortCallback>:
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_CAN_RxFifo0FullCallback>:
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_CAN_RxFifo1FullCallback>:
 8000ec8:	4770      	bx	lr

08000eca <HAL_CAN_SleepCallback>:
 8000eca:	4770      	bx	lr

08000ecc <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000ecc:	4770      	bx	lr

08000ece <HAL_CAN_ErrorCallback>:
 8000ece:	4770      	bx	lr

08000ed0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ed4:	6803      	ldr	r3, [r0, #0]
 8000ed6:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000ed8:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000edc:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ede:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ee2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ee6:	f8d3 8018 	ldr.w	r8, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000eea:	f016 0401 	ands.w	r4, r6, #1
{
 8000eee:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ef0:	d022      	beq.n	8000f38 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ef2:	f017 0401 	ands.w	r4, r7, #1
 8000ef6:	d007      	beq.n	8000f08 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ef8:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000efa:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000efc:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000efe:	f140 80a5 	bpl.w	800104c <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f02:	f7ff ffd9 	bl	8000eb8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f06:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f08:	05fb      	lsls	r3, r7, #23
 8000f0a:	d509      	bpl.n	8000f20 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f0c:	682b      	ldr	r3, [r5, #0]
 8000f0e:	f44f 7280 	mov.w	r2, #256	; 0x100

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f12:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f14:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f16:	f140 80a7 	bpl.w	8001068 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f1a:	4628      	mov	r0, r5
 8000f1c:	f7ff ffcd 	bl	8000eba <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f20:	03fb      	lsls	r3, r7, #15
 8000f22:	d509      	bpl.n	8000f38 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f2a:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f2c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f2e:	f140 80a9 	bpl.w	8001084 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f32:	4628      	mov	r0, r5
 8000f34:	f7ff ffc2 	bl	8000ebc <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f38:	0733      	lsls	r3, r6, #28
 8000f3a:	d507      	bpl.n	8000f4c <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f3c:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f40:	bf1f      	itttt	ne
 8000f42:	682b      	ldrne	r3, [r5, #0]
 8000f44:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f46:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f4a:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f4c:	0777      	lsls	r7, r6, #29
 8000f4e:	d508      	bpl.n	8000f62 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f50:	f01b 0f08 	tst.w	fp, #8
 8000f54:	d005      	beq.n	8000f62 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f56:	682b      	ldr	r3, [r5, #0]
 8000f58:	2208      	movs	r2, #8
 8000f5a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	f7ff ffb1 	bl	8000ec4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f62:	07b0      	lsls	r0, r6, #30
 8000f64:	d506      	bpl.n	8000f74 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f66:	682b      	ldr	r3, [r5, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	0799      	lsls	r1, r3, #30
 8000f6c:	d002      	beq.n	8000f74 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f6e:	4628      	mov	r0, r5
 8000f70:	f7ff f9a8 	bl	80002c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f74:	0672      	lsls	r2, r6, #25
 8000f76:	d507      	bpl.n	8000f88 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f78:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f7c:	bf1f      	itttt	ne
 8000f7e:	682b      	ldrne	r3, [r5, #0]
 8000f80:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f82:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f86:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f88:	06b3      	lsls	r3, r6, #26
 8000f8a:	d508      	bpl.n	8000f9e <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f8c:	f01a 0f08 	tst.w	sl, #8
 8000f90:	d005      	beq.n	8000f9e <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f92:	682b      	ldr	r3, [r5, #0]
 8000f94:	2208      	movs	r2, #8
 8000f96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f98:	4628      	mov	r0, r5
 8000f9a:	f7ff ff95 	bl	8000ec8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f9e:	06f7      	lsls	r7, r6, #27
 8000fa0:	d506      	bpl.n	8000fb0 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000fa2:	682b      	ldr	r3, [r5, #0]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	0798      	lsls	r0, r3, #30
 8000fa8:	d002      	beq.n	8000fb0 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000faa:	4628      	mov	r0, r5
 8000fac:	f7ff ff8b 	bl	8000ec6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000fb0:	03b1      	lsls	r1, r6, #14
 8000fb2:	d508      	bpl.n	8000fc6 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000fb4:	f019 0f10 	tst.w	r9, #16
 8000fb8:	d005      	beq.n	8000fc6 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fba:	682b      	ldr	r3, [r5, #0]
 8000fbc:	2210      	movs	r2, #16
 8000fbe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f7ff ff82 	bl	8000eca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fc6:	03f2      	lsls	r2, r6, #15
 8000fc8:	d508      	bpl.n	8000fdc <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fca:	f019 0f08 	tst.w	r9, #8
 8000fce:	d005      	beq.n	8000fdc <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	f7ff ff78 	bl	8000ecc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fdc:	0433      	lsls	r3, r6, #16
 8000fde:	d52c      	bpl.n	800103a <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fe0:	f019 0f04 	tst.w	r9, #4
 8000fe4:	682a      	ldr	r2, [r5, #0]
 8000fe6:	d026      	beq.n	8001036 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fe8:	05f7      	lsls	r7, r6, #23
 8000fea:	d504      	bpl.n	8000ff6 <HAL_CAN_IRQHandler+0x126>
 8000fec:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000ff0:	bf18      	it	ne
 8000ff2:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ff6:	05b0      	lsls	r0, r6, #22
 8000ff8:	d504      	bpl.n	8001004 <HAL_CAN_IRQHandler+0x134>
 8000ffa:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ffe:	bf18      	it	ne
 8001000:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001004:	0571      	lsls	r1, r6, #21
 8001006:	d504      	bpl.n	8001012 <HAL_CAN_IRQHandler+0x142>
 8001008:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800100c:	bf18      	it	ne
 800100e:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001012:	0533      	lsls	r3, r6, #20
 8001014:	d50f      	bpl.n	8001036 <HAL_CAN_IRQHandler+0x166>
 8001016:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 800101a:	d00c      	beq.n	8001036 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 800101c:	2b40      	cmp	r3, #64	; 0x40
 800101e:	d04f      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x1f0>
 8001020:	d83e      	bhi.n	80010a0 <HAL_CAN_IRQHandler+0x1d0>
 8001022:	2b20      	cmp	r3, #32
 8001024:	d046      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x1e4>
 8001026:	2b30      	cmp	r3, #48	; 0x30
 8001028:	d047      	beq.n	80010ba <HAL_CAN_IRQHandler+0x1ea>
 800102a:	2b10      	cmp	r3, #16
 800102c:	d03f      	beq.n	80010ae <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800102e:	6993      	ldr	r3, [r2, #24]
 8001030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001034:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001036:	2304      	movs	r3, #4
 8001038:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800103a:	b12c      	cbz	r4, 8001048 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800103c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800103e:	431c      	orrs	r4, r3
 8001040:	626c      	str	r4, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001042:	4628      	mov	r0, r5
 8001044:	f7ff ff43 	bl	8000ece <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800104c:	077a      	lsls	r2, r7, #29
 800104e:	d405      	bmi.n	800105c <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001050:	f017 0408 	ands.w	r4, r7, #8
 8001054:	d105      	bne.n	8001062 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001056:	f7ff ff32 	bl	8000ebe <HAL_CAN_TxMailbox0AbortCallback>
 800105a:	e755      	b.n	8000f08 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800105c:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001060:	e752      	b.n	8000f08 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001062:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001066:	e74f      	b.n	8000f08 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001068:	0579      	lsls	r1, r7, #21
 800106a:	d502      	bpl.n	8001072 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800106c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8001070:	e756      	b.n	8000f20 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001072:	053a      	lsls	r2, r7, #20
 8001074:	d502      	bpl.n	800107c <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001076:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800107a:	e751      	b.n	8000f20 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800107c:	4628      	mov	r0, r5
 800107e:	f7ff ff1f 	bl	8000ec0 <HAL_CAN_TxMailbox1AbortCallback>
 8001082:	e74d      	b.n	8000f20 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001084:	0379      	lsls	r1, r7, #13
 8001086:	d502      	bpl.n	800108e <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001088:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800108c:	e754      	b.n	8000f38 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800108e:	033a      	lsls	r2, r7, #12
 8001090:	d502      	bpl.n	8001098 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001092:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8001096:	e74f      	b.n	8000f38 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001098:	4628      	mov	r0, r5
 800109a:	f7ff ff12 	bl	8000ec2 <HAL_CAN_TxMailbox2AbortCallback>
 800109e:	e74b      	b.n	8000f38 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 80010a0:	2b50      	cmp	r3, #80	; 0x50
 80010a2:	d010      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x1f6>
 80010a4:	2b60      	cmp	r3, #96	; 0x60
 80010a6:	d1c2      	bne.n	800102e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010a8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80010ac:	e7bf      	b.n	800102e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 80010ae:	f044 0408 	orr.w	r4, r4, #8
            break;
 80010b2:	e7bc      	b.n	800102e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80010b4:	f044 0410 	orr.w	r4, r4, #16
            break;
 80010b8:	e7b9      	b.n	800102e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010ba:	f044 0420 	orr.w	r4, r4, #32
            break;
 80010be:	e7b6      	b.n	800102e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 80010c0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 80010c4:	e7b3      	b.n	800102e <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 80010c6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80010ca:	e7b0      	b.n	800102e <HAL_CAN_IRQHandler+0x15e>

080010cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80010ce:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010dc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80010e8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b530      	push	{r4, r5, lr}
 80010f4:	68dc      	ldr	r4, [r3, #12]
 80010f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fa:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	2d04      	cmp	r5, #4
 8001102:	bf28      	it	cs
 8001104:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110c:	bf8c      	ite	hi
 800110e:	3c03      	subhi	r4, #3
 8001110:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001112:	fa03 f505 	lsl.w	r5, r3, r5
 8001116:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111a:	40a3      	lsls	r3, r4
 800111c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001122:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	bfac      	ite	ge
 800112a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	4a08      	ldrlt	r2, [pc, #32]	; (8001150 <HAL_NVIC_SetPriority+0x60>)
 8001130:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001134:	bfb8      	it	lt
 8001136:	f000 000f 	andlt.w	r0, r0, #15
 800113a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	bfaa      	itet	ge
 800113e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001148:	bd30      	pop	{r4, r5, pc}
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00
 8001150:	e000ed14 	.word	0xe000ed14

08001154 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001154:	2800      	cmp	r0, #0
 8001156:	db08      	blt.n	800116a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001158:	0942      	lsrs	r2, r0, #5
 800115a:	2301      	movs	r3, #1
 800115c:	f000 001f 	and.w	r0, r0, #31
 8001160:	fa03 f000 	lsl.w	r0, r3, r0
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <HAL_NVIC_EnableIRQ+0x18>)
 8001166:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100

08001170 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	3801      	subs	r0, #1
 8001172:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001176:	d20a      	bcs.n	800118e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	21f0      	movs	r1, #240	; 0xf0
 8001180:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800119c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800119e:	b320      	cbz	r0, 80011ea <HAL_DMA_Init+0x4e>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011a0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80011a4:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a6:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80011a8:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011aa:	4323      	orrs	r3, r4
 80011ac:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 80011ae:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b2:	6944      	ldr	r4, [r0, #20]
 80011b4:	4323      	orrs	r3, r4
 80011b6:	6984      	ldr	r4, [r0, #24]
 80011b8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ba:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011bc:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80011c0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c4:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80011c6:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80011c8:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_DMA_Init+0x54>)
 80011cc:	2214      	movs	r2, #20
 80011ce:	440b      	add	r3, r1
 80011d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_DMA_Init+0x58>)
 80011da:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80011dc:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80011e4:	8402      	strh	r2, [r0, #32]
  return HAL_OK;
 80011e6:	4618      	mov	r0, r3
}  
 80011e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011ea:	2001      	movs	r0, #1
 80011ec:	e7fc      	b.n	80011e8 <HAL_DMA_Init+0x4c>
 80011ee:	bf00      	nop
 80011f0:	bffdfff8 	.word	0xbffdfff8
 80011f4:	40020000 	.word	0x40020000

080011f8 <HAL_DMA_Start_IT>:
{
 80011f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80011fa:	f890 4020 	ldrb.w	r4, [r0, #32]
 80011fe:	2c01      	cmp	r4, #1
 8001200:	d034      	beq.n	800126c <HAL_DMA_Start_IT+0x74>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001202:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001206:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001208:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800120a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800120e:	f04f 0600 	mov.w	r6, #0
 8001212:	f04f 0402 	mov.w	r4, #2
 8001216:	d127      	bne.n	8001268 <HAL_DMA_Start_IT+0x70>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001218:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800121c:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800121e:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001220:	6826      	ldr	r6, [r4, #0]
 8001222:	f026 0601 	bic.w	r6, r6, #1
 8001226:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001228:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 800122c:	40bd      	lsls	r5, r7
 800122e:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8001230:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001232:	6843      	ldr	r3, [r0, #4]
 8001234:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001236:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8001238:	bf0b      	itete	eq
 800123a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800123c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800123e:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001240:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001242:	b14b      	cbz	r3, 8001258 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800124a:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001254:	2000      	movs	r0, #0
} 
 8001256:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	f043 030a 	orr.w	r3, r3, #10
 800125e:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	f023 0304 	bic.w	r3, r3, #4
 8001266:	e7f0      	b.n	800124a <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8001268:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800126c:	2002      	movs	r0, #2
 800126e:	e7f2      	b.n	8001256 <HAL_DMA_Start_IT+0x5e>

08001270 <HAL_DMA_Abort_IT>:
{  
 8001270:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001272:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001276:	2a02      	cmp	r2, #2
 8001278:	d003      	beq.n	8001282 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127a:	2204      	movs	r2, #4
 800127c:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800127e:	2001      	movs	r0, #1
}
 8001280:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001282:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8001284:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001286:	6811      	ldr	r1, [r2, #0]
 8001288:	f021 010e 	bic.w	r1, r1, #14
 800128c:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800128e:	6811      	ldr	r1, [r2, #0]
 8001290:	f021 0101 	bic.w	r1, r1, #1
 8001294:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001296:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
 800129a:	2201      	movs	r2, #1
 800129c:	40a2      	lsls	r2, r4
 800129e:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 80012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a4:	8402      	strh	r2, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80012a6:	b113      	cbz	r3, 80012ae <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 80012a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80012aa:	2000      	movs	r0, #0
 80012ac:	e7e8      	b.n	8001280 <HAL_DMA_Abort_IT+0x10>
 80012ae:	4618      	mov	r0, r3
 80012b0:	e7e6      	b.n	8001280 <HAL_DMA_Abort_IT+0x10>

080012b2 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012b2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80012b6:	6803      	ldr	r3, [r0, #0]
{
 80012b8:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012ba:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80012bc:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012be:	2404      	movs	r4, #4
 80012c0:	4094      	lsls	r4, r2
 80012c2:	4234      	tst	r4, r6
 80012c4:	d00e      	beq.n	80012e4 <HAL_DMA_IRQHandler+0x32>
 80012c6:	f015 0f04 	tst.w	r5, #4
 80012ca:	d00b      	beq.n	80012e4 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80012d0:	bf5e      	ittt	pl
 80012d2:	681a      	ldrpl	r2, [r3, #0]
 80012d4:	f022 0204 	bicpl.w	r2, r2, #4
 80012d8:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80012da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80012dc:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 80012de:	b363      	cbz	r3, 800133a <HAL_DMA_IRQHandler+0x88>
}  
 80012e0:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80012e2:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80012e4:	2402      	movs	r4, #2
 80012e6:	4094      	lsls	r4, r2
 80012e8:	4234      	tst	r4, r6
 80012ea:	d012      	beq.n	8001312 <HAL_DMA_IRQHandler+0x60>
 80012ec:	f015 0f02 	tst.w	r5, #2
 80012f0:	d00f      	beq.n	8001312 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	0695      	lsls	r5, r2, #26
 80012f6:	d406      	bmi.n	8001306 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	f022 020a 	bic.w	r2, r2, #10
 80012fe:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001300:	2301      	movs	r3, #1
 8001302:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8001306:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001308:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 800130a:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800130e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001310:	e7e5      	b.n	80012de <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001312:	2408      	movs	r4, #8
 8001314:	4094      	lsls	r4, r2
 8001316:	4234      	tst	r4, r6
 8001318:	d00f      	beq.n	800133a <HAL_DMA_IRQHandler+0x88>
 800131a:	072c      	lsls	r4, r5, #28
 800131c:	d50d      	bpl.n	800133a <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800131e:	681c      	ldr	r4, [r3, #0]
 8001320:	f024 040e 	bic.w	r4, r4, #14
 8001324:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001326:	2301      	movs	r3, #1
 8001328:	fa03 f202 	lsl.w	r2, r3, r2
 800132c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800132e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 8001330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001334:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001336:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001338:	e7d1      	b.n	80012de <HAL_DMA_IRQHandler+0x2c>
}  
 800133a:	bc70      	pop	{r4, r5, r6}
 800133c:	4770      	bx	lr
	...

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001344:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80014b0 <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001348:	4c57      	ldr	r4, [pc, #348]	; (80014a8 <HAL_GPIO_Init+0x168>)
  uint32_t position = 0x00u;
 800134a:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800134c:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001350:	680a      	ldr	r2, [r1, #0]
 8001352:	fa32 f503 	lsrs.w	r5, r2, r3
 8001356:	d102      	bne.n	800135e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001358:	b003      	add	sp, #12
 800135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800135e:	2501      	movs	r5, #1
 8001360:	fa05 fa03 	lsl.w	sl, r5, r3
    if (iocurrent != 0x00u)
 8001364:	ea1a 0202 	ands.w	r2, sl, r2
 8001368:	f000 8095 	beq.w	8001496 <HAL_GPIO_Init+0x156>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136c:	684d      	ldr	r5, [r1, #4]
 800136e:	f025 0e10 	bic.w	lr, r5, #16
 8001372:	f1be 0f02 	cmp.w	lr, #2
 8001376:	d111      	bne.n	800139c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3u];
 8001378:	08df      	lsrs	r7, r3, #3
 800137a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800137e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001382:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001384:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001388:	fa09 fb0c 	lsl.w	fp, r9, ip
 800138c:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001390:	690e      	ldr	r6, [r1, #16]
 8001392:	fa06 f60c 	lsl.w	r6, r6, ip
 8001396:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3u] = temp;
 800139a:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 800139c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80013a4:	2603      	movs	r6, #3
 80013a6:	fa06 f70c 	lsl.w	r7, r6, ip
 80013aa:	ea2b 0b07 	bic.w	fp, fp, r7
 80013ae:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b0:	f005 0703 	and.w	r7, r5, #3
 80013b4:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b8:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013bc:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c0:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 80013c4:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c6:	d811      	bhi.n	80013ec <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80013c8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ca:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013ce:	68cf      	ldr	r7, [r1, #12]
 80013d0:	fa07 f70c 	lsl.w	r7, r7, ip
 80013d4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80013d8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80013da:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013dc:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013e0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80013e4:	409f      	lsls	r7, r3
 80013e6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80013ea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013ec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013ee:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013f0:	688e      	ldr	r6, [r1, #8]
 80013f2:	fa06 f60c 	lsl.w	r6, r6, ip
 80013f6:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80013f8:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fa:	00ee      	lsls	r6, r5, #3
 80013fc:	d54b      	bpl.n	8001496 <HAL_GPIO_Init+0x156>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001402:	f046 0601 	orr.w	r6, r6, #1
 8001406:	f8c8 6018 	str.w	r6, [r8, #24]
 800140a:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800140e:	f023 0703 	bic.w	r7, r3, #3
 8001412:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001416:	f006 0601 	and.w	r6, r6, #1
 800141a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800141e:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001420:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001424:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001426:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001428:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800142c:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001430:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001434:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001438:	d02f      	beq.n	800149a <HAL_GPIO_Init+0x15a>
 800143a:	4e1c      	ldr	r6, [pc, #112]	; (80014ac <HAL_GPIO_Init+0x16c>)
 800143c:	42b0      	cmp	r0, r6
 800143e:	d02e      	beq.n	800149e <HAL_GPIO_Init+0x15e>
 8001440:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001444:	42b0      	cmp	r0, r6
 8001446:	d02c      	beq.n	80014a2 <HAL_GPIO_Init+0x162>
 8001448:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800144c:	42b0      	cmp	r0, r6
 800144e:	bf0c      	ite	eq
 8001450:	2603      	moveq	r6, #3
 8001452:	2605      	movne	r6, #5
 8001454:	fa06 f60c 	lsl.w	r6, r6, ip
 8001458:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 800145c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800145e:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8001460:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001462:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001466:	bf0c      	ite	eq
 8001468:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800146a:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 800146c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800146e:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001470:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001474:	bf0c      	ite	eq
 8001476:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001478:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 800147a:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800147c:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001482:	bf0c      	ite	eq
 8001484:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001486:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8001488:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800148a:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800148c:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 800148e:	bf54      	ite	pl
 8001490:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001492:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8001494:	60e6      	str	r6, [r4, #12]
    position++;
 8001496:	3301      	adds	r3, #1
 8001498:	e75a      	b.n	8001350 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800149a:	2600      	movs	r6, #0
 800149c:	e7da      	b.n	8001454 <HAL_GPIO_Init+0x114>
 800149e:	2601      	movs	r6, #1
 80014a0:	e7d8      	b.n	8001454 <HAL_GPIO_Init+0x114>
 80014a2:	2602      	movs	r6, #2
 80014a4:	e7d6      	b.n	8001454 <HAL_GPIO_Init+0x114>
 80014a6:	bf00      	nop
 80014a8:	40010400 	.word	0x40010400
 80014ac:	48000400 	.word	0x48000400
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	b10a      	cbz	r2, 80014ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b6:	6181      	str	r1, [r0, #24]
 80014b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ba:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80014bc:	4770      	bx	lr

080014be <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80014be:	6943      	ldr	r3, [r0, #20]
 80014c0:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014c2:	bf18      	it	ne
 80014c4:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014c6:	6181      	str	r1, [r0, #24]
  }
}
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d0:	4605      	mov	r5, r0
 80014d2:	2800      	cmp	r0, #0
 80014d4:	d035      	beq.n	8001542 <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	6803      	ldr	r3, [r0, #0]
 80014d8:	07da      	lsls	r2, r3, #31
 80014da:	d411      	bmi.n	8001500 <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014dc:	682b      	ldr	r3, [r5, #0]
 80014de:	079b      	lsls	r3, r3, #30
 80014e0:	f100 8088 	bmi.w	80015f4 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	071c      	lsls	r4, r3, #28
 80014e8:	f100 80f8 	bmi.w	80016dc <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	0758      	lsls	r0, r3, #29
 80014f0:	f100 8141 	bmi.w	8001776 <HAL_RCC_OscConfig+0x2aa>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f4:	69e8      	ldr	r0, [r5, #28]
 80014f6:	2800      	cmp	r0, #0
 80014f8:	f040 81d7 	bne.w	80018aa <HAL_RCC_OscConfig+0x3de>
        }
      }
    }
  }

  return HAL_OK;
 80014fc:	2000      	movs	r0, #0
 80014fe:	e04b      	b.n	8001598 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001500:	4cba      	ldr	r4, [pc, #744]	; (80017ec <HAL_RCC_OscConfig+0x320>)
 8001502:	6863      	ldr	r3, [r4, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b04      	cmp	r3, #4
 800150a:	d007      	beq.n	800151c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800150c:	6863      	ldr	r3, [r4, #4]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b08      	cmp	r3, #8
 8001514:	d117      	bne.n	8001546 <HAL_RCC_OscConfig+0x7a>
 8001516:	6863      	ldr	r3, [r4, #4]
 8001518:	03df      	lsls	r7, r3, #15
 800151a:	d514      	bpl.n	8001546 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001520:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	6821      	ldr	r1, [r4, #0]
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	2201      	movs	r2, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	420b      	tst	r3, r1
 800153a:	d0cf      	beq.n	80014dc <HAL_RCC_OscConfig+0x10>
 800153c:	686b      	ldr	r3, [r5, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1cc      	bne.n	80014dc <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001542:	2001      	movs	r0, #1
 8001544:	e028      	b.n	8001598 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	686a      	ldr	r2, [r5, #4]
 8001548:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800154c:	d127      	bne.n	800159e <HAL_RCC_OscConfig+0xd2>
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001556:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001558:	68a9      	ldr	r1, [r5, #8]
 800155a:	f023 030f 	bic.w	r3, r3, #15
 800155e:	430b      	orrs	r3, r1
 8001560:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001562:	b362      	cbz	r2, 80015be <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8001564:	f7ff fab2 	bl	8000acc <HAL_GetTick>
 8001568:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800156c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	f04f 0801 	mov.w	r8, #1
 8001572:	fa97 f3a7 	rbit	r3, r7
 8001576:	6822      	ldr	r2, [r4, #0]
 8001578:	fa97 f3a7 	rbit	r3, r7
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	fa08 f303 	lsl.w	r3, r8, r3
 8001588:	4213      	tst	r3, r2
 800158a:	d1a7      	bne.n	80014dc <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fa9e 	bl	8000acc <HAL_GetTick>
 8001590:	1b83      	subs	r3, r0, r6
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d9ed      	bls.n	8001572 <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 8001596:	2003      	movs	r0, #3
}
 8001598:	b002      	add	sp, #8
 800159a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	b932      	cbnz	r2, 80015b0 <HAL_RCC_OscConfig+0xe4>
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6023      	str	r3, [r4, #0]
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ae:	e7d1      	b.n	8001554 <HAL_RCC_OscConfig+0x88>
 80015b0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80015b4:	d1f5      	bne.n	80015a2 <HAL_RCC_OscConfig+0xd6>
 80015b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ba:	6023      	str	r3, [r4, #0]
 80015bc:	e7c7      	b.n	800154e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80015be:	f7ff fa85 	bl	8000acc <HAL_GetTick>
 80015c2:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80015c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c8:	f04f 0801 	mov.w	r8, #1
 80015cc:	fa97 f3a7 	rbit	r3, r7
 80015d0:	6822      	ldr	r2, [r4, #0]
 80015d2:	fa97 f3a7 	rbit	r3, r7
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	fa08 f303 	lsl.w	r3, r8, r3
 80015e2:	4213      	tst	r3, r2
 80015e4:	f43f af7a 	beq.w	80014dc <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fa70 	bl	8000acc <HAL_GetTick>
 80015ec:	1b83      	subs	r3, r0, r6
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d9ec      	bls.n	80015cc <HAL_RCC_OscConfig+0x100>
 80015f2:	e7d0      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015f4:	4c7d      	ldr	r4, [pc, #500]	; (80017ec <HAL_RCC_OscConfig+0x320>)
 80015f6:	6863      	ldr	r3, [r4, #4]
 80015f8:	f013 0f0c 	tst.w	r3, #12
 80015fc:	d007      	beq.n	800160e <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015fe:	6863      	ldr	r3, [r4, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d121      	bne.n	800164c <HAL_RCC_OscConfig+0x180>
 8001608:	6863      	ldr	r3, [r4, #4]
 800160a:	03de      	lsls	r6, r3, #15
 800160c:	d41e      	bmi.n	800164c <HAL_RCC_OscConfig+0x180>
 800160e:	2302      	movs	r3, #2
 8001610:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001614:	6821      	ldr	r1, [r4, #0]
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	fab3 f383 	clz	r3, r3
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	2201      	movs	r2, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	420b      	tst	r3, r1
 800162a:	d002      	beq.n	8001632 <HAL_RCC_OscConfig+0x166>
 800162c:	692b      	ldr	r3, [r5, #16]
 800162e:	4293      	cmp	r3, r2
 8001630:	d187      	bne.n	8001542 <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001632:	6821      	ldr	r1, [r4, #0]
 8001634:	23f8      	movs	r3, #248	; 0xf8
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	fab3 f283 	clz	r2, r3
 800163e:	696b      	ldr	r3, [r5, #20]
 8001640:	4093      	lsls	r3, r2
 8001642:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001646:	4313      	orrs	r3, r2
 8001648:	6023      	str	r3, [r4, #0]
 800164a:	e74b      	b.n	80014e4 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164c:	692a      	ldr	r2, [r5, #16]
 800164e:	2601      	movs	r6, #1
 8001650:	b30a      	cbz	r2, 8001696 <HAL_RCC_OscConfig+0x1ca>
 8001652:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800165e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	f04f 0802 	mov.w	r8, #2
 8001668:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800166a:	f7ff fa2f 	bl	8000acc <HAL_GetTick>
 800166e:	4607      	mov	r7, r0
 8001670:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	6822      	ldr	r2, [r4, #0]
 8001676:	fa98 f3a8 	rbit	r3, r8
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	fa06 f303 	lsl.w	r3, r6, r3
 8001686:	4213      	tst	r3, r2
 8001688:	d1d3      	bne.n	8001632 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fa1f 	bl	8000acc <HAL_GetTick>
 800168e:	1bc3      	subs	r3, r0, r7
 8001690:	2b02      	cmp	r3, #2
 8001692:	d9ed      	bls.n	8001670 <HAL_RCC_OscConfig+0x1a4>
 8001694:	e77f      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
 8001696:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800169a:	fab3 f383 	clz	r3, r3
 800169e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	f04f 0802 	mov.w	r8, #2
 80016ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016ae:	f7ff fa0d 	bl	8000acc <HAL_GetTick>
 80016b2:	4607      	mov	r7, r0
 80016b4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b8:	6822      	ldr	r2, [r4, #0]
 80016ba:	fa98 f3a8 	rbit	r3, r8
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	fa06 f303 	lsl.w	r3, r6, r3
 80016ca:	4213      	tst	r3, r2
 80016cc:	f43f af0a 	beq.w	80014e4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d0:	f7ff f9fc 	bl	8000acc <HAL_GetTick>
 80016d4:	1bc3      	subs	r3, r0, r7
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d9ec      	bls.n	80016b4 <HAL_RCC_OscConfig+0x1e8>
 80016da:	e75c      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016dc:	69aa      	ldr	r2, [r5, #24]
 80016de:	4e43      	ldr	r6, [pc, #268]	; (80017ec <HAL_RCC_OscConfig+0x320>)
 80016e0:	4943      	ldr	r1, [pc, #268]	; (80017f0 <HAL_RCC_OscConfig+0x324>)
 80016e2:	2401      	movs	r4, #1
 80016e4:	b31a      	cbz	r2, 800172e <HAL_RCC_OscConfig+0x262>
 80016e6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	440b      	add	r3, r1
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	2702      	movs	r7, #2
 80016f4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80016f6:	f7ff f9e9 	bl	8000acc <HAL_GetTick>
 80016fa:	4680      	mov	r8, r0
 80016fc:	fa97 f3a7 	rbit	r3, r7
 8001700:	fa97 f3a7 	rbit	r3, r7
 8001704:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001708:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800170a:	fa97 f3a7 	rbit	r3, r7
 800170e:	fab3 f383 	clz	r3, r3
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	fa04 f303 	lsl.w	r3, r4, r3
 800171a:	4213      	tst	r3, r2
 800171c:	f47f aee6 	bne.w	80014ec <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff f9d4 	bl	8000acc <HAL_GetTick>
 8001724:	eba0 0308 	sub.w	r3, r0, r8
 8001728:	2b02      	cmp	r3, #2
 800172a:	d9e7      	bls.n	80016fc <HAL_RCC_OscConfig+0x230>
 800172c:	e733      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
 800172e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	440b      	add	r3, r1
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	2702      	movs	r7, #2
 800173c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800173e:	f7ff f9c5 	bl	8000acc <HAL_GetTick>
 8001742:	4680      	mov	r8, r0
 8001744:	fa97 f3a7 	rbit	r3, r7
 8001748:	fa97 f3a7 	rbit	r3, r7
 800174c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001752:	fa97 f3a7 	rbit	r3, r7
 8001756:	fab3 f383 	clz	r3, r3
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	fa04 f303 	lsl.w	r3, r4, r3
 8001762:	4213      	tst	r3, r2
 8001764:	f43f aec2 	beq.w	80014ec <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001768:	f7ff f9b0 	bl	8000acc <HAL_GetTick>
 800176c:	eba0 0308 	sub.w	r3, r0, r8
 8001770:	2b02      	cmp	r3, #2
 8001772:	d9e7      	bls.n	8001744 <HAL_RCC_OscConfig+0x278>
 8001774:	e70f      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4c1d      	ldr	r4, [pc, #116]	; (80017ec <HAL_RCC_OscConfig+0x320>)
 8001778:	69e3      	ldr	r3, [r4, #28]
 800177a:	00d9      	lsls	r1, r3, #3
 800177c:	d434      	bmi.n	80017e8 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	69e3      	ldr	r3, [r4, #28]
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	61e3      	str	r3, [r4, #28]
 8001786:	69e3      	ldr	r3, [r4, #28]
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001790:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4f18      	ldr	r7, [pc, #96]	; (80017f4 <HAL_RCC_OscConfig+0x328>)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	05da      	lsls	r2, r3, #23
 8001798:	d52e      	bpl.n	80017f8 <HAL_RCC_OscConfig+0x32c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179a:	68eb      	ldr	r3, [r5, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d13c      	bne.n	800181a <HAL_RCC_OscConfig+0x34e>
 80017a0:	6a23      	ldr	r3, [r4, #32]
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017a8:	f7ff f990 	bl	8000acc <HAL_GetTick>
 80017ac:	2702      	movs	r7, #2
 80017ae:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	46ba      	mov	sl, r7
 80017b2:	f04f 0901 	mov.w	r9, #1
 80017b6:	fa97 f3a7 	rbit	r3, r7
 80017ba:	fa97 f3a7 	rbit	r3, r7
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d06b      	beq.n	800189a <HAL_RCC_OscConfig+0x3ce>
 80017c2:	6a22      	ldr	r2, [r4, #32]
 80017c4:	fa9a f3aa 	rbit	r3, sl
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	fa09 f303 	lsl.w	r3, r9, r3
 80017d4:	4213      	tst	r3, r2
 80017d6:	d057      	beq.n	8001888 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 80017d8:	2e00      	cmp	r6, #0
 80017da:	f43f ae8b 	beq.w	80014f4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017de:	69e3      	ldr	r3, [r4, #28]
 80017e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e4:	61e3      	str	r3, [r4, #28]
 80017e6:	e685      	b.n	80014f4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80017e8:	2600      	movs	r6, #0
 80017ea:	e7d2      	b.n	8001792 <HAL_RCC_OscConfig+0x2c6>
 80017ec:	40021000 	.word	0x40021000
 80017f0:	10908120 	.word	0x10908120
 80017f4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001800:	f7ff f964 	bl	8000acc <HAL_GetTick>
 8001804:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	d4c6      	bmi.n	800179a <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180c:	f7ff f95e 	bl	8000acc <HAL_GetTick>
 8001810:	eba0 0008 	sub.w	r0, r0, r8
 8001814:	2864      	cmp	r0, #100	; 0x64
 8001816:	d9f6      	bls.n	8001806 <HAL_RCC_OscConfig+0x33a>
 8001818:	e6bd      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181a:	bb3b      	cbnz	r3, 800186c <HAL_RCC_OscConfig+0x3a0>
 800181c:	6a23      	ldr	r3, [r4, #32]
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	6223      	str	r3, [r4, #32]
 8001824:	6a23      	ldr	r3, [r4, #32]
 8001826:	f023 0304 	bic.w	r3, r3, #4
 800182a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800182c:	f7ff f94e 	bl	8000acc <HAL_GetTick>
 8001830:	2702      	movs	r7, #2
 8001832:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001834:	46ba      	mov	sl, r7
 8001836:	f04f 0901 	mov.w	r9, #1
 800183a:	fa97 f3a7 	rbit	r3, r7
 800183e:	fa97 f3a7 	rbit	r3, r7
 8001842:	b373      	cbz	r3, 80018a2 <HAL_RCC_OscConfig+0x3d6>
 8001844:	6a22      	ldr	r2, [r4, #32]
 8001846:	fa9a f3aa 	rbit	r3, sl
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	fa09 f303 	lsl.w	r3, r9, r3
 8001856:	4213      	tst	r3, r2
 8001858:	d0be      	beq.n	80017d8 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff f937 	bl	8000acc <HAL_GetTick>
 800185e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001862:	eba0 0008 	sub.w	r0, r0, r8
 8001866:	4298      	cmp	r0, r3
 8001868:	d9e7      	bls.n	800183a <HAL_RCC_OscConfig+0x36e>
 800186a:	e694      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186c:	2b05      	cmp	r3, #5
 800186e:	6a23      	ldr	r3, [r4, #32]
 8001870:	d103      	bne.n	800187a <HAL_RCC_OscConfig+0x3ae>
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6223      	str	r3, [r4, #32]
 8001878:	e792      	b.n	80017a0 <HAL_RCC_OscConfig+0x2d4>
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	6223      	str	r3, [r4, #32]
 8001880:	6a23      	ldr	r3, [r4, #32]
 8001882:	f023 0304 	bic.w	r3, r3, #4
 8001886:	e78e      	b.n	80017a6 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001888:	f7ff f920 	bl	8000acc <HAL_GetTick>
 800188c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001890:	eba0 0008 	sub.w	r0, r0, r8
 8001894:	4298      	cmp	r0, r3
 8001896:	d98e      	bls.n	80017b6 <HAL_RCC_OscConfig+0x2ea>
 8001898:	e67d      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
 800189a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018a0:	e790      	b.n	80017c4 <HAL_RCC_OscConfig+0x2f8>
 80018a2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018a8:	e7cd      	b.n	8001846 <HAL_RCC_OscConfig+0x37a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018aa:	4b49      	ldr	r3, [pc, #292]	; (80019d0 <HAL_RCC_OscConfig+0x504>)
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	f002 020c 	and.w	r2, r2, #12
 80018b2:	2a08      	cmp	r2, #8
 80018b4:	461c      	mov	r4, r3
 80018b6:	d07a      	beq.n	80019ae <HAL_RCC_OscConfig+0x4e2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b8:	2802      	cmp	r0, #2
 80018ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018be:	d151      	bne.n	8001964 <HAL_RCC_OscConfig+0x498>
 80018c0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018d6:	f7ff f8f9 	bl	8000acc <HAL_GetTick>
 80018da:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80018de:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e0:	2601      	movs	r6, #1
 80018e2:	fa98 f3a8 	rbit	r3, r8
 80018e6:	6822      	ldr	r2, [r4, #0]
 80018e8:	fa98 f3a8 	rbit	r3, r8
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	fa06 f303 	lsl.w	r3, r6, r3
 80018f8:	4213      	tst	r3, r2
 80018fa:	d12d      	bne.n	8001958 <HAL_RCC_OscConfig+0x48c>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fc:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8001900:	6862      	ldr	r2, [r4, #4]
 8001902:	430b      	orrs	r3, r1
 8001904:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001908:	4313      	orrs	r3, r2
 800190a:	6063      	str	r3, [r4, #4]
 800190c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001910:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800191c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001920:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001922:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8001924:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001926:	f7ff f8d1 	bl	8000acc <HAL_GetTick>
 800192a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800192e:	4605      	mov	r5, r0
 8001930:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	fa96 f3a6 	rbit	r3, r6
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	fa07 f303 	lsl.w	r3, r7, r3
 8001946:	4213      	tst	r3, r2
 8001948:	f47f add8 	bne.w	80014fc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f8be 	bl	8000acc <HAL_GetTick>
 8001950:	1b40      	subs	r0, r0, r5
 8001952:	2802      	cmp	r0, #2
 8001954:	d9ec      	bls.n	8001930 <HAL_RCC_OscConfig+0x464>
 8001956:	e61e      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f8b8 	bl	8000acc <HAL_GetTick>
 800195c:	1bc3      	subs	r3, r0, r7
 800195e:	2b02      	cmp	r3, #2
 8001960:	d9bf      	bls.n	80018e2 <HAL_RCC_OscConfig+0x416>
 8001962:	e618      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
 8001964:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001968:	fab3 f383 	clz	r3, r3
 800196c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001970:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800197a:	f7ff f8a7 	bl	8000acc <HAL_GetTick>
 800197e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001982:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001984:	2701      	movs	r7, #1
 8001986:	fa96 f3a6 	rbit	r3, r6
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	fa96 f3a6 	rbit	r3, r6
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	fa07 f303 	lsl.w	r3, r7, r3
 800199c:	4213      	tst	r3, r2
 800199e:	f43f adad 	beq.w	80014fc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff f893 	bl	8000acc <HAL_GetTick>
 80019a6:	1b40      	subs	r0, r0, r5
 80019a8:	2802      	cmp	r0, #2
 80019aa:	d9ec      	bls.n	8001986 <HAL_RCC_OscConfig+0x4ba>
 80019ac:	e5f3      	b.n	8001596 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ae:	2801      	cmp	r0, #1
 80019b0:	f43f adf2 	beq.w	8001598 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 80019b4:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019b6:	6a2a      	ldr	r2, [r5, #32]
 80019b8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80019bc:	4291      	cmp	r1, r2
 80019be:	f47f adc0 	bne.w	8001542 <HAL_RCC_OscConfig+0x76>
 80019c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80019c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019c8:	4293      	cmp	r3, r2
 80019ca:	f43f ad97 	beq.w	80014fc <HAL_RCC_OscConfig+0x30>
 80019ce:	e5b8      	b.n	8001542 <HAL_RCC_OscConfig+0x76>
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	b530      	push	{r4, r5, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80019d6:	4d13      	ldr	r5, [pc, #76]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x50>)
 80019d8:	686c      	ldr	r4, [r5, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019da:	f004 030c 	and.w	r3, r4, #12
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d11e      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0x4c>
 80019e2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80019e6:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019ea:	f404 1370 	and.w	r3, r4, #3932160	; 0x3c0000
 80019ee:	fab2 f282 	clz	r2, r2
 80019f2:	fa23 f202 	lsr.w	r2, r3, r2
 80019f6:	490c      	ldr	r1, [pc, #48]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019fa:	5c88      	ldrb	r0, [r1, r2]
 80019fc:	220f      	movs	r2, #15
 80019fe:	fa92 f2a2 	rbit	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a02:	fab2 f282 	clz	r2, r2
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	40d3      	lsrs	r3, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	7c1a      	ldrb	r2, [r3, #16]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001a10:	03e3      	lsls	r3, r4, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a12:	bf4a      	itet	mi
 8001a14:	4b05      	ldrmi	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x58>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a16:	4b06      	ldrpl	r3, [pc, #24]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a18:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a1c:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a1e:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001a22:	e7fc      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x4a>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	080024cc 	.word	0x080024cc
 8001a2c:	007a1200 	.word	0x007a1200
 8001a30:	003d0900 	.word	0x003d0900

08001a34 <HAL_RCC_ClockConfig>:
{
 8001a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a38:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	b910      	cbnz	r0, 8001a44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
}
 8001a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4a4c      	ldr	r2, [pc, #304]	; (8001b78 <HAL_RCC_ClockConfig+0x144>)
 8001a46:	6813      	ldr	r3, [r2, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	428b      	cmp	r3, r1
 8001a4e:	d32e      	bcc.n	8001aae <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	0791      	lsls	r1, r2, #30
 8001a54:	d436      	bmi.n	8001ac4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	07d2      	lsls	r2, r2, #31
 8001a58:	d43c      	bmi.n	8001ad4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5a:	4a47      	ldr	r2, [pc, #284]	; (8001b78 <HAL_RCC_ClockConfig+0x144>)
 8001a5c:	6813      	ldr	r3, [r2, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	42ab      	cmp	r3, r5
 8001a64:	d874      	bhi.n	8001b50 <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a66:	6822      	ldr	r2, [r4, #0]
 8001a68:	4d44      	ldr	r5, [pc, #272]	; (8001b7c <HAL_RCC_ClockConfig+0x148>)
 8001a6a:	f012 0f04 	tst.w	r2, #4
 8001a6e:	d17b      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	0713      	lsls	r3, r2, #28
 8001a72:	d506      	bpl.n	8001a82 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a74:	686b      	ldr	r3, [r5, #4]
 8001a76:	6922      	ldr	r2, [r4, #16]
 8001a78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a80:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a82:	f7ff ffa7 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001a86:	686b      	ldr	r3, [r5, #4]
 8001a88:	22f0      	movs	r2, #240	; 0xf0
 8001a8a:	fa92 f2a2 	rbit	r2, r2
 8001a8e:	fab2 f282 	clz	r2, r2
 8001a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a96:	40d3      	lsrs	r3, r2
 8001a98:	4a39      	ldr	r2, [pc, #228]	; (8001b80 <HAL_RCC_ClockConfig+0x14c>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	40d8      	lsrs	r0, r3
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_RCC_ClockConfig+0x150>)
 8001aa0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001aa2:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_ClockConfig+0x154>)
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	f7fe ffd1 	bl	8000a4c <HAL_InitTick>
  return HAL_OK;
 8001aaa:	2000      	movs	r0, #0
 8001aac:	e7c8      	b.n	8001a40 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	6813      	ldr	r3, [r2, #0]
 8001ab0:	f023 0307 	bic.w	r3, r3, #7
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	428b      	cmp	r3, r1
 8001ac0:	d1bd      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xa>
 8001ac2:	e7c5      	b.n	8001a50 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	492d      	ldr	r1, [pc, #180]	; (8001b7c <HAL_RCC_ClockConfig+0x148>)
 8001ac6:	68a0      	ldr	r0, [r4, #8]
 8001ac8:	684b      	ldr	r3, [r1, #4]
 8001aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ace:	4303      	orrs	r3, r0
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e7c0      	b.n	8001a56 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad4:	6862      	ldr	r2, [r4, #4]
 8001ad6:	4e29      	ldr	r6, [pc, #164]	; (8001b7c <HAL_RCC_ClockConfig+0x148>)
 8001ad8:	2a01      	cmp	r2, #1
 8001ada:	d126      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xf6>
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae4:	6831      	ldr	r1, [r6, #0]
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	d0a1      	beq.n	8001a3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afa:	6873      	ldr	r3, [r6, #4]
 8001afc:	f023 0303 	bic.w	r3, r3, #3
 8001b00:	431a      	orrs	r2, r3
 8001b02:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001b04:	f7fe ffe2 	bl	8000acc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b0c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	6873      	ldr	r3, [r6, #4]
 8001b10:	6862      	ldr	r2, [r4, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b1a:	d09e      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7fe ffd6 	bl	8000acc <HAL_GetTick>
 8001b20:	1bc0      	subs	r0, r0, r7
 8001b22:	4540      	cmp	r0, r8
 8001b24:	d9f3      	bls.n	8001b0e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001b26:	2003      	movs	r0, #3
 8001b28:	e78a      	b.n	8001a40 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2a:	2a02      	cmp	r2, #2
 8001b2c:	bf0c      	ite	eq
 8001b2e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001b32:	2302      	movne	r3, #2
 8001b34:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	6830      	ldr	r0, [r6, #0]
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	2101      	movs	r1, #1
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	4203      	tst	r3, r0
 8001b4e:	e7d3      	b.n	8001af8 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	f023 0307 	bic.w	r3, r3, #7
 8001b56:	432b      	orrs	r3, r5
 8001b58:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	6813      	ldr	r3, [r2, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	42ab      	cmp	r3, r5
 8001b62:	f47f af6c 	bne.w	8001a3e <HAL_RCC_ClockConfig+0xa>
 8001b66:	e77e      	b.n	8001a66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	686b      	ldr	r3, [r5, #4]
 8001b6a:	68e1      	ldr	r1, [r4, #12]
 8001b6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b70:	430b      	orrs	r3, r1
 8001b72:	606b      	str	r3, [r5, #4]
 8001b74:	e77c      	b.n	8001a70 <HAL_RCC_ClockConfig+0x3c>
 8001b76:	bf00      	nop
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	080024b4 	.word	0x080024b4
 8001b84:	20000220 	.word	0x20000220
 8001b88:	20000228 	.word	0x20000228

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	fab2 f282 	clz	r2, r2
 8001b9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ba0:	40d3      	lsrs	r3, r2
 8001ba2:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001ba8:	6810      	ldr	r0, [r2, #0]
}    
 8001baa:	40d8      	lsrs	r0, r3
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	080024c4 	.word	0x080024c4
 8001bb8:	20000220 	.word	0x20000220

08001bbc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bbe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	fa92 f2a2 	rbit	r2, r2
 8001bc8:	fab2 f282 	clz	r2, r2
 8001bcc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001bd0:	40d3      	lsrs	r3, r2
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001bd8:	6810      	ldr	r0, [r2, #0]
} 
 8001bda:	40d8      	lsrs	r0, r3
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	080024c4 	.word	0x080024c4
 8001be8:	20000220 	.word	0x20000220

08001bec <HAL_TIM_OC_DelayElapsedCallback>:
 8001bec:	4770      	bx	lr

08001bee <HAL_TIM_IC_CaptureCallback>:
 8001bee:	4770      	bx	lr

08001bf0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_TIM_TriggerCallback>:
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bf4:	6803      	ldr	r3, [r0, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	0791      	lsls	r1, r2, #30
{
 8001bfa:	b510      	push	{r4, lr}
 8001bfc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bfe:	d50f      	bpl.n	8001c20 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	0792      	lsls	r2, r2, #30
 8001c04:	d50c      	bpl.n	8001c20 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c06:	f06f 0202 	mvn.w	r2, #2
 8001c0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	0799      	lsls	r1, r3, #30
 8001c14:	f000 8085 	beq.w	8001d22 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c18:	f7ff ffe9 	bl	8001bee <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	0752      	lsls	r2, r2, #29
 8001c26:	d510      	bpl.n	8001c4a <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	0750      	lsls	r0, r2, #29
 8001c2c:	d50d      	bpl.n	8001c4a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c2e:	f06f 0204 	mvn.w	r2, #4
 8001c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c34:	2202      	movs	r2, #2
 8001c36:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c40:	d075      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	f7ff ffd4 	bl	8001bee <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	2300      	movs	r3, #0
 8001c48:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	0711      	lsls	r1, r2, #28
 8001c50:	d50f      	bpl.n	8001c72 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	0712      	lsls	r2, r2, #28
 8001c56:	d50c      	bpl.n	8001c72 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c58:	f06f 0208 	mvn.w	r2, #8
 8001c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c5e:	2204      	movs	r2, #4
 8001c60:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	079b      	lsls	r3, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c66:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c68:	d067      	beq.n	8001d3a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c6a:	f7ff ffc0 	bl	8001bee <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	06d0      	lsls	r0, r2, #27
 8001c78:	d510      	bpl.n	8001c9c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	06d1      	lsls	r1, r2, #27
 8001c7e:	d50d      	bpl.n	8001c9c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c80:	f06f 0210 	mvn.w	r2, #16
 8001c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c86:	2208      	movs	r2, #8
 8001c88:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c90:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c92:	d058      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c94:	f7ff ffab 	bl	8001bee <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	07d2      	lsls	r2, r2, #31
 8001ca2:	d508      	bpl.n	8001cb6 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	07d0      	lsls	r0, r2, #31
 8001ca8:	d505      	bpl.n	8001cb6 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001caa:	f06f 0201 	mvn.w	r2, #1
 8001cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f7fe fc0d 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	691a      	ldr	r2, [r3, #16]
 8001cba:	0611      	lsls	r1, r2, #24
 8001cbc:	d508      	bpl.n	8001cd0 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	0612      	lsls	r2, r2, #24
 8001cc2:	d505      	bpl.n	8001cd0 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f000 f843 	bl	8001d56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	05d0      	lsls	r0, r2, #23
 8001cd6:	d508      	bpl.n	8001cea <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	0611      	lsls	r1, r2, #24
 8001cdc:	d505      	bpl.n	8001cea <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001cde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f000 f837 	bl	8001d58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	0652      	lsls	r2, r2, #25
 8001cf0:	d508      	bpl.n	8001d04 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	0650      	lsls	r0, r2, #25
 8001cf6:	d505      	bpl.n	8001d04 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f7ff ff77 	bl	8001bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	0691      	lsls	r1, r2, #26
 8001d0a:	d522      	bpl.n	8001d52 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	0692      	lsls	r2, r2, #26
 8001d10:	d51f      	bpl.n	8001d52 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d12:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d18:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001d1e:	f000 b819 	b.w	8001d54 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	f7ff ff63 	bl	8001bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff ff62 	bl	8001bf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d2c:	e776      	b.n	8001c1c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	f7ff ff5d 	bl	8001bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff ff5c 	bl	8001bf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d38:	e785      	b.n	8001c46 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3a:	f7ff ff57 	bl	8001bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f7ff ff56 	bl	8001bf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d44:	e793      	b.n	8001c6e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	f7ff ff51 	bl	8001bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7ff ff50 	bl	8001bf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d50:	e7a2      	b.n	8001c98 <HAL_TIM_IRQHandler+0xa4>
}
 8001d52:	bd10      	pop	{r4, pc}

08001d54 <HAL_TIMEx_CommutCallback>:
 8001d54:	4770      	bx	lr

08001d56 <HAL_TIMEx_BreakCallback>:
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIMEx_Break2Callback>:
 8001d58:	4770      	bx	lr

08001d5a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d5a:	6803      	ldr	r3, [r0, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_UART_Transmit_DMA>:
{
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001d7e:	6f67      	ldr	r7, [r4, #116]	; 0x74
 8001d80:	2f20      	cmp	r7, #32
 8001d82:	d136      	bne.n	8001df2 <HAL_UART_Transmit_DMA+0x7a>
    if ((pData == NULL) || (Size == 0U))
 8001d84:	b341      	cbz	r1, 8001dd8 <HAL_UART_Transmit_DMA+0x60>
 8001d86:	b33a      	cbz	r2, 8001dd8 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8001d88:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8001d8c:	2a01      	cmp	r2, #1
 8001d8e:	d030      	beq.n	8001df2 <HAL_UART_Transmit_DMA+0x7a>
    if (huart->hdmatx != NULL)
 8001d90:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 8001d92:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 8001d96:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d98:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d9a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9c:	67e6      	str	r6, [r4, #124]	; 0x7c
    __HAL_LOCK(huart);
 8001d9e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8001da2:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001da4:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001da8:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8001daa:	b1b8      	cbz	r0, 8001ddc <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001dac:	f8df c048 	ldr.w	ip, [pc, #72]	; 8001df8 <HAL_UART_Transmit_DMA+0x80>
 8001db0:	6822      	ldr	r2, [r4, #0]
 8001db2:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001db6:	f8df c044 	ldr.w	ip, [pc, #68]	; 8001dfc <HAL_UART_Transmit_DMA+0x84>
 8001dba:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001dbe:	f8df c040 	ldr.w	ip, [pc, #64]	; 8001e00 <HAL_UART_Transmit_DMA+0x88>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001dc2:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8001dc4:	e9c0 c60c 	strd	ip, r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001dc8:	f7ff fa16 	bl	80011f8 <HAL_DMA_Start_IT>
 8001dcc:	b130      	cbz	r0, 8001ddc <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001dce:	2310      	movs	r3, #16
 8001dd0:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001dd2:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8001dd6:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
 8001dda:	e009      	b.n	8001df0 <HAL_UART_Transmit_DMA+0x78>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8001de0:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001de2:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8001de4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dee:	609a      	str	r2, [r3, #8]
}
 8001df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001df2:	2002      	movs	r0, #2
 8001df4:	e7fc      	b.n	8001df0 <HAL_UART_Transmit_DMA+0x78>
 8001df6:	bf00      	nop
 8001df8:	08001e95 	.word	0x08001e95
 8001dfc:	08001ec3 	.word	0x08001ec3
 8001e00:	08001f0f 	.word	0x08001f0f

08001e04 <HAL_UART_Receive_DMA>:
{
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e06:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8001e08:	2f20      	cmp	r7, #32
{
 8001e0a:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e0c:	d139      	bne.n	8001e82 <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8001e0e:	b329      	cbz	r1, 8001e5c <HAL_UART_Receive_DMA+0x58>
 8001e10:	b322      	cbz	r2, 8001e5c <HAL_UART_Receive_DMA+0x58>
    __HAL_LOCK(huart);
 8001e12:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d033      	beq.n	8001e82 <HAL_UART_Receive_DMA+0x7e>
 8001e1a:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1c:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e1e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e20:	67c6      	str	r6, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 8001e22:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    huart->pRxBuffPtr = pData;
 8001e26:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8001e28:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e2c:	6783      	str	r3, [r0, #120]	; 0x78
    if (huart->hdmarx != NULL)
 8001e2e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001e30:	b1b0      	cbz	r0, 8001e60 <HAL_UART_Receive_DMA+0x5c>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_UART_Receive_DMA+0x84>)
 8001e34:	f8d4 c000 	ldr.w	ip, [r4]
 8001e38:	6283      	str	r3, [r0, #40]	; 0x28
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_UART_Receive_DMA+0x88>)
 8001e3c:	62c3      	str	r3, [r0, #44]	; 0x2c
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_UART_Receive_DMA+0x8c>)
      huart->hdmarx->XferAbortCallback = NULL;
 8001e40:	e9c0 360c 	strd	r3, r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001e44:	4613      	mov	r3, r2
 8001e46:	460a      	mov	r2, r1
 8001e48:	f10c 0124 	add.w	r1, ip, #36	; 0x24
 8001e4c:	f7ff f9d4 	bl	80011f8 <HAL_DMA_Start_IT>
 8001e50:	b130      	cbz	r0, 8001e60 <HAL_UART_Receive_DMA+0x5c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001e52:	2310      	movs	r3, #16
 8001e54:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8001e56:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 8001e5a:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	e00f      	b.n	8001e80 <HAL_UART_Receive_DMA+0x7c>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e60:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e6e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e7e:	609a      	str	r2, [r3, #8]
}
 8001e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001e82:	2002      	movs	r0, #2
 8001e84:	e7fc      	b.n	8001e80 <HAL_UART_Receive_DMA+0x7c>
 8001e86:	bf00      	nop
 8001e88:	08001ecd 	.word	0x08001ecd
 8001e8c:	08001f05 	.word	0x08001f05
 8001e90:	08001f0f 	.word	0x08001f0f

08001e94 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001e94:	6982      	ldr	r2, [r0, #24]
 8001e96:	2a20      	cmp	r2, #32
{
 8001e98:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001e9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001e9c:	d00c      	beq.n	8001eb8 <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eac:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001eb6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fbb1 	bl	8000620 <HAL_UART_TxCpltCallback>
}
 8001ebe:	e7fa      	b.n	8001eb6 <UART_DMATransmitCplt+0x22>

08001ec0 <HAL_UART_TxHalfCpltCallback>:
 8001ec0:	4770      	bx	lr

08001ec2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001ec2:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001ec4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001ec6:	f7ff fffb 	bl	8001ec0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001eca:	bd08      	pop	{r3, pc}

08001ecc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b508      	push	{r3, lr}
 8001ece:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001ed0:	6a40      	ldr	r0, [r0, #36]	; 0x24

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d011      	beq.n	8001efc <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ede:	6803      	ldr	r3, [r0, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ee6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ef6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8001efc:	f7fe fc72 	bl	80007e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f00:	bd08      	pop	{r3, pc}

08001f02 <HAL_UART_RxHalfCpltCallback>:
 8001f02:	4770      	bx	lr

08001f04 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f04:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8001f06:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001f08:	f7ff fffb 	bl	8001f02 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f0c:	bd08      	pop	{r3, pc}

08001f0e <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001f0e:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001f10:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8001f12:	6f42      	ldr	r2, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8001f14:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8001f16:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001f18:	689c      	ldr	r4, [r3, #8]
 8001f1a:	0624      	lsls	r4, r4, #24
 8001f1c:	d50a      	bpl.n	8001f34 <UART_DMAError+0x26>
 8001f1e:	2a21      	cmp	r2, #33	; 0x21
 8001f20:	d108      	bne.n	8001f34 <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8001f22:	2200      	movs	r2, #0
 8001f24:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001f2e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001f30:	2220      	movs	r2, #32
 8001f32:	6742      	str	r2, [r0, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	065b      	lsls	r3, r3, #25
 8001f38:	d506      	bpl.n	8001f48 <UART_DMAError+0x3a>
 8001f3a:	2922      	cmp	r1, #34	; 0x22
 8001f3c:	d104      	bne.n	8001f48 <UART_DMAError+0x3a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8001f44:	f7ff ff09 	bl	8001d5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001f48:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001f4a:	f043 0310 	orr.w	r3, r3, #16
 8001f4e:	67c3      	str	r3, [r0, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f50:	f7fe fcec 	bl	800092c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f54:	bd10      	pop	{r4, pc}
	...

08001f58 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f58:	6803      	ldr	r3, [r0, #0]
 8001f5a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f5c:	6819      	ldr	r1, [r3, #0]
{
 8001f5e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8001f60:	f640 060f 	movw	r6, #2063	; 0x80f
 8001f64:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f66:	689d      	ldr	r5, [r3, #8]
{
 8001f68:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8001f6a:	d109      	bne.n	8001f80 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001f6c:	0696      	lsls	r6, r2, #26
 8001f6e:	d570      	bpl.n	8002052 <HAL_UART_IRQHandler+0xfa>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001f70:	068e      	lsls	r6, r1, #26
 8001f72:	d56e      	bpl.n	8002052 <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 8001f74:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d066      	beq.n	8002048 <HAL_UART_IRQHandler+0xf0>
}
 8001f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8001f7e:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001f80:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001f84:	f401 7690 	and.w	r6, r1, #288	; 0x120
 8001f88:	4306      	orrs	r6, r0
 8001f8a:	d062      	beq.n	8002052 <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001f8c:	07d5      	lsls	r5, r2, #31
 8001f8e:	d507      	bpl.n	8001fa0 <HAL_UART_IRQHandler+0x48>
 8001f90:	05ce      	lsls	r6, r1, #23
 8001f92:	d505      	bpl.n	8001fa0 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f94:	2501      	movs	r5, #1
 8001f96:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f98:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001f9a:	f045 0501 	orr.w	r5, r5, #1
 8001f9e:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001fa0:	0795      	lsls	r5, r2, #30
 8001fa2:	d506      	bpl.n	8001fb2 <HAL_UART_IRQHandler+0x5a>
 8001fa4:	b128      	cbz	r0, 8001fb2 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001fa6:	2502      	movs	r5, #2
 8001fa8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001faa:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001fac:	f045 0504 	orr.w	r5, r5, #4
 8001fb0:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001fb2:	0756      	lsls	r6, r2, #29
 8001fb4:	d506      	bpl.n	8001fc4 <HAL_UART_IRQHandler+0x6c>
 8001fb6:	b128      	cbz	r0, 8001fc4 <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001fb8:	2504      	movs	r5, #4
 8001fba:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fbc:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001fbe:	f045 0502 	orr.w	r5, r5, #2
 8001fc2:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001fc4:	0715      	lsls	r5, r2, #28
 8001fc6:	d509      	bpl.n	8001fdc <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001fc8:	f001 0520 	and.w	r5, r1, #32
 8001fcc:	4328      	orrs	r0, r5
 8001fce:	d005      	beq.n	8001fdc <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001fd0:	2008      	movs	r0, #8
 8001fd2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fd4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001fd6:	f040 0008 	orr.w	r0, r0, #8
 8001fda:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001fdc:	0516      	lsls	r6, r2, #20
 8001fde:	d508      	bpl.n	8001ff2 <HAL_UART_IRQHandler+0x9a>
 8001fe0:	014d      	lsls	r5, r1, #5
 8001fe2:	d506      	bpl.n	8001ff2 <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fe4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fe8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001fea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001fec:	f043 0320 	orr.w	r3, r3, #32
 8001ff0:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ff2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001ff4:	b343      	cbz	r3, 8002048 <HAL_UART_IRQHandler+0xf0>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ff6:	0690      	lsls	r0, r2, #26
 8001ff8:	d505      	bpl.n	8002006 <HAL_UART_IRQHandler+0xae>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ffa:	0689      	lsls	r1, r1, #26
 8001ffc:	d503      	bpl.n	8002006 <HAL_UART_IRQHandler+0xae>
        if (huart->RxISR != NULL)
 8001ffe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002000:	b10b      	cbz	r3, 8002006 <HAL_UART_IRQHandler+0xae>
          huart->RxISR(huart);
 8002002:	4620      	mov	r0, r4
 8002004:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002006:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8002008:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800200a:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800200c:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002014:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8002016:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002018:	d017      	beq.n	800204a <HAL_UART_IRQHandler+0xf2>
        UART_EndRxTransfer(huart);
 800201a:	f7ff fe9e 	bl	8001d5a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	0652      	lsls	r2, r2, #25
 8002024:	d50d      	bpl.n	8002042 <HAL_UART_IRQHandler+0xea>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002026:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002028:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800202a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800202e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002030:	b138      	cbz	r0, 8002042 <HAL_UART_IRQHandler+0xea>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_UART_IRQHandler+0x144>)
 8002034:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002036:	f7ff f91b 	bl	8001270 <HAL_DMA_Abort_IT>
 800203a:	b128      	cbz	r0, 8002048 <HAL_UART_IRQHandler+0xf0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800203c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800203e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002040:	e79b      	b.n	8001f7a <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 8002042:	4620      	mov	r0, r4
 8002044:	f7fe fc72 	bl	800092c <HAL_UART_ErrorCallback>
}
 8002048:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800204a:	f7fe fc6f 	bl	800092c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800204e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8002050:	e7fa      	b.n	8002048 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002052:	02d6      	lsls	r6, r2, #11
 8002054:	d509      	bpl.n	800206a <HAL_UART_IRQHandler+0x112>
 8002056:	0268      	lsls	r0, r5, #9
 8002058:	d507      	bpl.n	800206a <HAL_UART_IRQHandler+0x112>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800205a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800205e:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002060:	621a      	str	r2, [r3, #32]
}
 8002062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002066:	f000 b9dd 	b.w	8002424 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800206a:	0616      	lsls	r6, r2, #24
 800206c:	d506      	bpl.n	800207c <HAL_UART_IRQHandler+0x124>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800206e:	060d      	lsls	r5, r1, #24
 8002070:	d504      	bpl.n	800207c <HAL_UART_IRQHandler+0x124>
    if (huart->TxISR != NULL)
 8002072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0e7      	beq.n	8002048 <HAL_UART_IRQHandler+0xf0>
      huart->TxISR(huart);
 8002078:	4620      	mov	r0, r4
 800207a:	e77e      	b.n	8001f7a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800207c:	0650      	lsls	r0, r2, #25
 800207e:	d5e3      	bpl.n	8002048 <HAL_UART_IRQHandler+0xf0>
 8002080:	064a      	lsls	r2, r1, #25
 8002082:	d5e1      	bpl.n	8002048 <HAL_UART_IRQHandler+0xf0>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800208a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800208c:	2320      	movs	r3, #32
 800208e:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002090:	2300      	movs	r3, #0
 8002092:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002094:	4620      	mov	r0, r4
 8002096:	f7fe fac3 	bl	8000620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800209a:	e7d5      	b.n	8002048 <HAL_UART_IRQHandler+0xf0>
 800209c:	080020a1 	.word	0x080020a1

080020a0 <UART_DMAAbortOnError>:
{
 80020a0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80020a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80020aa:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80020ae:	f7fe fc3d 	bl	800092c <HAL_UART_ErrorCallback>
}
 80020b2:	bd08      	pop	{r3, pc}

080020b4 <UART_SetConfig>:
{
 80020b4:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020b6:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020b8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020ba:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020bc:	681d      	ldr	r5, [r3, #0]
{
 80020be:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020c0:	6900      	ldr	r0, [r0, #16]
 80020c2:	4302      	orrs	r2, r0
 80020c4:	6960      	ldr	r0, [r4, #20]
 80020c6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020c8:	4855      	ldr	r0, [pc, #340]	; (8002220 <UART_SetConfig+0x16c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020ca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020cc:	4028      	ands	r0, r5
 80020ce:	4302      	orrs	r2, r0
 80020d0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80020d6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020dc:	4302      	orrs	r2, r0
 80020de:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020e0:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020e2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020e4:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80020e8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020ea:	4302      	orrs	r2, r0
 80020ec:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020ee:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <UART_SetConfig+0x170>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d114      	bne.n	800211e <UART_SetConfig+0x6a>
 80020f4:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <UART_SetConfig+0x174>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d814      	bhi.n	800212c <UART_SetConfig+0x78>
 8002102:	4a4a      	ldr	r2, [pc, #296]	; (800222c <UART_SetConfig+0x178>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002104:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	d158      	bne.n	80021be <UART_SetConfig+0x10a>
    switch (clocksource)
 800210c:	2b08      	cmp	r3, #8
 800210e:	d84b      	bhi.n	80021a8 <UART_SetConfig+0xf4>
 8002110:	e8df f003 	tbb	[pc, r3]
 8002114:	4a393621 	.word	0x4a393621
 8002118:	4a4a4a42 	.word	0x4a4a4a42
 800211c:	45          	.byte	0x45
 800211d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800211e:	4a44      	ldr	r2, [pc, #272]	; (8002230 <UART_SetConfig+0x17c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d003      	beq.n	800212c <UART_SetConfig+0x78>
 8002124:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002128:	4293      	cmp	r3, r2
 800212a:	d173      	bne.n	8002214 <UART_SetConfig+0x160>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800212c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002130:	d011      	beq.n	8002156 <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002132:	f7ff fd2b 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002136:	6863      	ldr	r3, [r4, #4]
 8002138:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800213c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002140:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002142:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002144:	f1a3 0110 	sub.w	r1, r3, #16
 8002148:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800214c:	4291      	cmp	r1, r2
 800214e:	d812      	bhi.n	8002176 <UART_SetConfig+0xc2>
      huart->Instance->BRR = usartdiv;
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	60d3      	str	r3, [r2, #12]
 8002154:	e010      	b.n	8002178 <UART_SetConfig+0xc4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002156:	f7ff fd19 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800215a:	6863      	ldr	r3, [r4, #4]
 800215c:	085a      	lsrs	r2, r3, #1
 800215e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002168:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800216a:	f1a3 0110 	sub.w	r1, r3, #16
 800216e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002172:	4291      	cmp	r1, r2
 8002174:	d91b      	bls.n	80021ae <UART_SetConfig+0xfa>
      ret = HAL_ERROR;
 8002176:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8002178:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800217a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800217e:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8002180:	f7ff fd1c 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 8002184:	e7e9      	b.n	800215a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002186:	6862      	ldr	r2, [r4, #4]
 8002188:	0853      	lsrs	r3, r2, #1
 800218a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800218e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002192:	fbb3 f3f2 	udiv	r3, r3, r2
 8002196:	e7e6      	b.n	8002166 <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetSysClockFreq();
 8002198:	f7ff fc1c 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 800219c:	e7dd      	b.n	800215a <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800219e:	6862      	ldr	r2, [r4, #4]
 80021a0:	0853      	lsrs	r3, r2, #1
 80021a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80021a6:	e7f4      	b.n	8002192 <UART_SetConfig+0xde>
        ret = HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e7dd      	b.n	800216a <UART_SetConfig+0xb6>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021ae:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 80021b2:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021b4:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
 80021bc:	e7dc      	b.n	8002178 <UART_SetConfig+0xc4>
    switch (clocksource)
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d82b      	bhi.n	800221a <UART_SetConfig+0x166>
 80021c2:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <UART_SetConfig+0x114>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	08002133 	.word	0x08002133
 80021cc:	080021ed 	.word	0x080021ed
 80021d0:	080021f3 	.word	0x080021f3
 80021d4:	0800221b 	.word	0x0800221b
 80021d8:	08002205 	.word	0x08002205
 80021dc:	0800221b 	.word	0x0800221b
 80021e0:	0800221b 	.word	0x0800221b
 80021e4:	0800221b 	.word	0x0800221b
 80021e8:	0800220b 	.word	0x0800220b
        pclk = HAL_RCC_GetPCLK2Freq();
 80021ec:	f7ff fce6 	bl	8001bbc <HAL_RCC_GetPCLK2Freq>
 80021f0:	e7a1      	b.n	8002136 <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80021f2:	6862      	ldr	r2, [r4, #4]
 80021f4:	0853      	lsrs	r3, r2, #1
 80021f6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80021fa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80021fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002202:	e79d      	b.n	8002140 <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002204:	f7ff fbe6 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8002208:	e795      	b.n	8002136 <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800220a:	6862      	ldr	r2, [r4, #4]
 800220c:	0853      	lsrs	r3, r2, #1
 800220e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002212:	e7f4      	b.n	80021fe <UART_SetConfig+0x14a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002214:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002218:	d0c6      	beq.n	80021a8 <UART_SetConfig+0xf4>
 800221a:	2001      	movs	r0, #1
 800221c:	2300      	movs	r3, #0
 800221e:	e791      	b.n	8002144 <UART_SetConfig+0x90>
 8002220:	efff69f3 	.word	0xefff69f3
 8002224:	40013800 	.word	0x40013800
 8002228:	40021000 	.word	0x40021000
 800222c:	080024ec 	.word	0x080024ec
 8002230:	40004400 	.word	0x40004400

08002234 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002234:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002236:	07da      	lsls	r2, r3, #31
{
 8002238:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800223a:	d506      	bpl.n	800224a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800223c:	6801      	ldr	r1, [r0, #0]
 800223e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002240:	684a      	ldr	r2, [r1, #4]
 8002242:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002246:	4322      	orrs	r2, r4
 8002248:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800224a:	079c      	lsls	r4, r3, #30
 800224c:	d506      	bpl.n	800225c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800224e:	6801      	ldr	r1, [r0, #0]
 8002250:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002252:	684a      	ldr	r2, [r1, #4]
 8002254:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002258:	4322      	orrs	r2, r4
 800225a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800225c:	0759      	lsls	r1, r3, #29
 800225e:	d506      	bpl.n	800226e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002260:	6801      	ldr	r1, [r0, #0]
 8002262:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002264:	684a      	ldr	r2, [r1, #4]
 8002266:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800226a:	4322      	orrs	r2, r4
 800226c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800226e:	071a      	lsls	r2, r3, #28
 8002270:	d506      	bpl.n	8002280 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002272:	6801      	ldr	r1, [r0, #0]
 8002274:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002276:	684a      	ldr	r2, [r1, #4]
 8002278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227c:	4322      	orrs	r2, r4
 800227e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002280:	06dc      	lsls	r4, r3, #27
 8002282:	d506      	bpl.n	8002292 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002284:	6801      	ldr	r1, [r0, #0]
 8002286:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002288:	688a      	ldr	r2, [r1, #8]
 800228a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800228e:	4322      	orrs	r2, r4
 8002290:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002292:	0699      	lsls	r1, r3, #26
 8002294:	d506      	bpl.n	80022a4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002296:	6801      	ldr	r1, [r0, #0]
 8002298:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800229a:	688a      	ldr	r2, [r1, #8]
 800229c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a0:	4322      	orrs	r2, r4
 80022a2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80022a4:	065a      	lsls	r2, r3, #25
 80022a6:	d50f      	bpl.n	80022c8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022a8:	6801      	ldr	r1, [r0, #0]
 80022aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80022ac:	684a      	ldr	r2, [r1, #4]
 80022ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80022b2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022b8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022ba:	d105      	bne.n	80022c8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022bc:	684a      	ldr	r2, [r1, #4]
 80022be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80022c0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80022c4:	4322      	orrs	r2, r4
 80022c6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	d506      	bpl.n	80022da <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022cc:	6802      	ldr	r2, [r0, #0]
 80022ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80022d0:	6853      	ldr	r3, [r2, #4]
 80022d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80022d6:	430b      	orrs	r3, r1
 80022d8:	6053      	str	r3, [r2, #4]
}
 80022da:	bd10      	pop	{r4, pc}

080022dc <UART_WaitOnFlagUntilTimeout>:
{
 80022dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80022e4:	4604      	mov	r4, r0
 80022e6:	460e      	mov	r6, r1
 80022e8:	4615      	mov	r5, r2
 80022ea:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ec:	6822      	ldr	r2, [r4, #0]
 80022ee:	69d3      	ldr	r3, [r2, #28]
 80022f0:	ea36 0303 	bics.w	r3, r6, r3
 80022f4:	bf0c      	ite	eq
 80022f6:	2301      	moveq	r3, #1
 80022f8:	2300      	movne	r3, #0
 80022fa:	42ab      	cmp	r3, r5
 80022fc:	d001      	beq.n	8002302 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80022fe:	2000      	movs	r0, #0
 8002300:	e01a      	b.n	8002338 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002302:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002306:	d0f2      	beq.n	80022ee <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002308:	f7fe fbe0 	bl	8000acc <HAL_GetTick>
 800230c:	1bc0      	subs	r0, r0, r7
 800230e:	4540      	cmp	r0, r8
 8002310:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002312:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002314:	d802      	bhi.n	800231c <UART_WaitOnFlagUntilTimeout+0x40>
 8002316:	f1b8 0f00 	cmp.w	r8, #0
 800231a:	d10f      	bne.n	800233c <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800231c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002320:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002322:	6883      	ldr	r3, [r0, #8]
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800232a:	2320      	movs	r3, #32
 800232c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800232e:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8002330:	2300      	movs	r3, #0
 8002332:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8002336:	2003      	movs	r0, #3
}
 8002338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800233c:	075a      	lsls	r2, r3, #29
 800233e:	d5d5      	bpl.n	80022ec <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002340:	69c3      	ldr	r3, [r0, #28]
 8002342:	051b      	lsls	r3, r3, #20
 8002344:	d5d2      	bpl.n	80022ec <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800234a:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800234c:	6803      	ldr	r3, [r0, #0]
 800234e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002352:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002354:	6883      	ldr	r3, [r0, #8]
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800235c:	2320      	movs	r3, #32
 800235e:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002360:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002362:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002364:	e7e4      	b.n	8002330 <UART_WaitOnFlagUntilTimeout+0x54>

08002366 <UART_CheckIdleState>:
{
 8002366:	b530      	push	{r4, r5, lr}
 8002368:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236a:	2500      	movs	r5, #0
{
 800236c:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236e:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002370:	f7fe fbac 	bl	8000acc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002374:	6822      	ldr	r2, [r4, #0]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800237a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800237c:	d414      	bmi.n	80023a8 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800237e:	6822      	ldr	r2, [r4, #0]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	0752      	lsls	r2, r2, #29
 8002384:	d509      	bpl.n	800239a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002386:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800238a:	9200      	str	r2, [sp, #0]
 800238c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002390:	2200      	movs	r2, #0
 8002392:	4620      	mov	r0, r4
 8002394:	f7ff ffa2 	bl	80022dc <UART_WaitOnFlagUntilTimeout>
 8002398:	b998      	cbnz	r0, 80023c2 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800239a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800239c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800239e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80023a0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80023a4:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 80023a6:	e00d      	b.n	80023c4 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023a8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80023ac:	9200      	str	r2, [sp, #0]
 80023ae:	9003      	str	r0, [sp, #12]
 80023b0:	462a      	mov	r2, r5
 80023b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7ff ff90 	bl	80022dc <UART_WaitOnFlagUntilTimeout>
 80023bc:	9b03      	ldr	r3, [sp, #12]
 80023be:	2800      	cmp	r0, #0
 80023c0:	d0dd      	beq.n	800237e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80023c2:	2003      	movs	r0, #3
}
 80023c4:	b005      	add	sp, #20
 80023c6:	bd30      	pop	{r4, r5, pc}

080023c8 <HAL_UART_Init>:
{
 80023c8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80023ca:	4604      	mov	r4, r0
 80023cc:	b340      	cbz	r0, 8002420 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023ce:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80023d0:	b91b      	cbnz	r3, 80023da <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80023d2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80023d6:	f7fe f89f 	bl	8000518 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80023da:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023dc:	2324      	movs	r3, #36	; 0x24
 80023de:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80023e0:	6813      	ldr	r3, [r2, #0]
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023e8:	4620      	mov	r0, r4
 80023ea:	f7ff fe63 	bl	80020b4 <UART_SetConfig>
 80023ee:	2801      	cmp	r0, #1
 80023f0:	d016      	beq.n	8002420 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023f4:	b113      	cbz	r3, 80023fc <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80023f6:	4620      	mov	r0, r4
 80023f8:	f7ff ff1c 	bl	8002234 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002404:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800240c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002414:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800241c:	f7ff bfa3 	b.w	8002366 <UART_CheckIdleState>
}
 8002420:	2001      	movs	r0, #1
 8002422:	bd10      	pop	{r4, pc}

08002424 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002424:	4770      	bx	lr
	...

08002428 <__libc_init_array>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	4d0d      	ldr	r5, [pc, #52]	; (8002460 <__libc_init_array+0x38>)
 800242c:	4c0d      	ldr	r4, [pc, #52]	; (8002464 <__libc_init_array+0x3c>)
 800242e:	1b64      	subs	r4, r4, r5
 8002430:	10a4      	asrs	r4, r4, #2
 8002432:	2600      	movs	r6, #0
 8002434:	42a6      	cmp	r6, r4
 8002436:	d109      	bne.n	800244c <__libc_init_array+0x24>
 8002438:	4d0b      	ldr	r5, [pc, #44]	; (8002468 <__libc_init_array+0x40>)
 800243a:	4c0c      	ldr	r4, [pc, #48]	; (800246c <__libc_init_array+0x44>)
 800243c:	f000 f82e 	bl	800249c <_init>
 8002440:	1b64      	subs	r4, r4, r5
 8002442:	10a4      	asrs	r4, r4, #2
 8002444:	2600      	movs	r6, #0
 8002446:	42a6      	cmp	r6, r4
 8002448:	d105      	bne.n	8002456 <__libc_init_array+0x2e>
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002450:	4798      	blx	r3
 8002452:	3601      	adds	r6, #1
 8002454:	e7ee      	b.n	8002434 <__libc_init_array+0xc>
 8002456:	f855 3b04 	ldr.w	r3, [r5], #4
 800245a:	4798      	blx	r3
 800245c:	3601      	adds	r6, #1
 800245e:	e7f2      	b.n	8002446 <__libc_init_array+0x1e>
 8002460:	080024f0 	.word	0x080024f0
 8002464:	080024f0 	.word	0x080024f0
 8002468:	080024f0 	.word	0x080024f0
 800246c:	080024f4 	.word	0x080024f4

08002470 <memcpy>:
 8002470:	440a      	add	r2, r1
 8002472:	4291      	cmp	r1, r2
 8002474:	f100 33ff 	add.w	r3, r0, #4294967295
 8002478:	d100      	bne.n	800247c <memcpy+0xc>
 800247a:	4770      	bx	lr
 800247c:	b510      	push	{r4, lr}
 800247e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002486:	4291      	cmp	r1, r2
 8002488:	d1f9      	bne.n	800247e <memcpy+0xe>
 800248a:	bd10      	pop	{r4, pc}

0800248c <memset>:
 800248c:	4402      	add	r2, r0
 800248e:	4603      	mov	r3, r0
 8002490:	4293      	cmp	r3, r2
 8002492:	d100      	bne.n	8002496 <memset+0xa>
 8002494:	4770      	bx	lr
 8002496:	f803 1b01 	strb.w	r1, [r3], #1
 800249a:	e7f9      	b.n	8002490 <memset+0x4>

0800249c <_init>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	bf00      	nop
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr

080024a8 <_fini>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	bf00      	nop
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr
