
STM32F303K8_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001608  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001790  08001790  00011790  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080017cc  080017cc  000117cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  080017d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          00000134  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000154  20000154  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a476  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ee1  00000000  00000000  0002a4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000648  00000000  00000000  0002c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000008a0  00000000  00000000  0002c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000018fb  00000000  00000000  0002d290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00009d56  00000000  00000000  0002eb8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007f454  00000000  00000000  000388e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000b7d35  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000f68  00000000  00000000  000b7d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00003c6c  00000000  00000000  000b8cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001778 	.word	0x08001778

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08001778 	.word	0x08001778

080001c8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80001c8:	b508      	push	{r3, lr}
	while(1)
	{
		HAL_Delay(1000);
 80001ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ce:	f000 fa07 	bl	80005e0 <HAL_Delay>
		BSP_LED_Toggle(LED3);
 80001d2:	2000      	movs	r0, #0
 80001d4:	f000 f982 	bl	80004dc <BSP_LED_Toggle>
	while(1)
 80001d8:	e7f7      	b.n	80001ca <Error_Handler+0x2>

080001da <SystemClock_Config>:
{
 80001da:	b530      	push	{r4, r5, lr}
 80001dc:	b091      	sub	sp, #68	; 0x44
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	2218      	movs	r2, #24
 80001e0:	2100      	movs	r1, #0
 80001e2:	a807      	add	r0, sp, #28
 80001e4:	f001 fac0 	bl	8001768 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	2214      	movs	r2, #20
 80001ea:	2100      	movs	r1, #0
 80001ec:	a801      	add	r0, sp, #4
 80001ee:	f001 fabb 	bl	8001768 <memset>
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f2:	2501      	movs	r5, #1
 80001f4:	2310      	movs	r3, #16
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f6:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f8:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000202:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000204:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000208:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020a:	940d      	str	r4, [sp, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020c:	f000 fbfc 	bl	8000a08 <HAL_RCC_OscConfig>
 8000210:	b108      	cbz	r0, 8000216 <SystemClock_Config+0x3c>
	  Error_Handler();
 8000212:	f7ff ffd9 	bl	80001c8 <Error_Handler>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000216:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021c:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800021e:	4629      	mov	r1, r5
 8000220:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000222:	e9cd 3401 	strd	r3, r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000226:	f000 fea3 	bl	8000f70 <HAL_RCC_ClockConfig>
 800022a:	2800      	cmp	r0, #0
 800022c:	d1f1      	bne.n	8000212 <SystemClock_Config+0x38>
}
 800022e:	b011      	add	sp, #68	; 0x44
 8000230:	bd30      	pop	{r4, r5, pc}
	...

08000234 <main>:
{
 8000234:	b508      	push	{r3, lr}
	HAL_Init();
 8000236:	f000 f9af 	bl	8000598 <HAL_Init>
	SystemClock_Config();
 800023a:	f7ff ffce 	bl	80001da <SystemClock_Config>
	BSP_LED_Init(LED3);
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f91a 	bl	8000478 <BSP_LED_Init>
	MX_USART2_UART_Init();
 8000244:	f000 f848 	bl	80002d8 <MX_USART2_UART_Init>
		if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)aTxStartMessage, TXSTARTMESSAGESIZE)!= HAL_OK)
 8000248:	4c07      	ldr	r4, [pc, #28]	; (8000268 <main+0x34>)
 800024a:	4d08      	ldr	r5, [pc, #32]	; (800026c <main+0x38>)
		HAL_Delay(100);
 800024c:	2064      	movs	r0, #100	; 0x64
 800024e:	f000 f9c7 	bl	80005e0 <HAL_Delay>
		if(HAL_UART_Transmit_DMA(&huart2, (uint8_t*)aTxStartMessage, TXSTARTMESSAGESIZE)!= HAL_OK)
 8000252:	2207      	movs	r2, #7
 8000254:	4621      	mov	r1, r4
 8000256:	4628      	mov	r0, r5
 8000258:	f000 ff74 	bl	8001144 <HAL_UART_Transmit_DMA>
 800025c:	b108      	cbz	r0, 8000262 <main+0x2e>
			Error_Handler();
 800025e:	f7ff ffb3 	bl	80001c8 <Error_Handler>
		BSP_LED_Toggle(LED3);
 8000262:	f000 f93b 	bl	80004dc <BSP_LED_Toggle>
		HAL_Delay(100);
 8000266:	e7f1      	b.n	800024c <main+0x18>
 8000268:	20000008 	.word	0x20000008
 800026c:	200000d0 	.word	0x200000d0

08000270 <HAL_MspInit>:
  * @param None
  * @retval None
  */
void HAL_MspInit(void)
{
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <HAL_MspInit+0x2c>)
 8000272:	699a      	ldr	r2, [r3, #24]
 8000274:	f042 0201 	orr.w	r2, r2, #1
 8000278:	619a      	str	r2, [r3, #24]
 800027a:	699a      	ldr	r2, [r3, #24]
{
 800027c:	b082      	sub	sp, #8
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800027e:	f002 0201 	and.w	r2, r2, #1
 8000282:	9200      	str	r2, [sp, #0]
 8000284:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000286:	69da      	ldr	r2, [r3, #28]
 8000288:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800028c:	61da      	str	r2, [r3, #28]
 800028e:	69db      	ldr	r3, [r3, #28]
 8000290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000294:	9301      	str	r3, [sp, #4]
 8000296:	9b01      	ldr	r3, [sp, #4]
}
 8000298:	b002      	add	sp, #8
 800029a:	4770      	bx	lr
 800029c:	40021000 	.word	0x40021000

080002a0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80002a0:	4770      	bx	lr

080002a2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <HardFault_Handler>

080002a4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <MemManage_Handler>

080002a6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <BusFault_Handler>

080002a8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <UsageFault_Handler>

080002aa <SVC_Handler>:
 80002aa:	4770      	bx	lr

080002ac <DebugMon_Handler>:
 80002ac:	4770      	bx	lr

080002ae <PendSV_Handler>:
 80002ae:	4770      	bx	lr

080002b0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80002b0:	f000 b984 	b.w	80005bc <HAL_IncTick>

080002b4 <DMA1_Channel6_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(huart2.hdmarx);
 80002b4:	4b01      	ldr	r3, [pc, #4]	; (80002bc <DMA1_Channel6_IRQHandler+0x8>)
 80002b6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80002b8:	f000 ba99 	b.w	80007ee <HAL_DMA_IRQHandler>
 80002bc:	200000d0 	.word	0x200000d0

080002c0 <DMA1_Channel7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(huart2.hdmatx);
 80002c0:	4b01      	ldr	r3, [pc, #4]	; (80002c8 <DMA1_Channel7_IRQHandler+0x8>)
 80002c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80002c4:	f000 ba93 	b.w	80007ee <HAL_DMA_IRQHandler>
 80002c8:	200000d0 	.word	0x200000d0

080002cc <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA  
  *         used for USART data transmission     
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&huart2);
 80002cc:	4801      	ldr	r0, [pc, #4]	; (80002d4 <USART2_IRQHandler+0x8>)
 80002ce:	f000 bfbf 	b.w	8001250 <HAL_UART_IRQHandler>
 80002d2:	bf00      	nop
 80002d4:	200000d0 	.word	0x200000d0

080002d8 <MX_USART2_UART_Init>:
/* Private functions ---------------------------------------------------------*/

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
	huart2.Instance = USART2;
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <MX_USART2_UART_Init+0x34>)
	huart2.Init.BaudRate = 38400;
 80002da:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <MX_USART2_UART_Init+0x38>)
{
 80002dc:	b508      	push	{r3, lr}
	huart2.Init.BaudRate = 38400;
 80002de:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80002e2:	e9c0 2300 	strd	r2, r3, [r0]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002e6:	2300      	movs	r3, #0
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
 80002e8:	220c      	movs	r2, #12
	huart2.Init.StopBits = UART_STOPBITS_1;
 80002ea:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ee:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002f2:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart2.Init.Parity = UART_PARITY_NONE;
 80002f6:	6103      	str	r3, [r0, #16]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002f8:	6243      	str	r3, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80002fa:	f001 f9e1 	bl	80016c0 <HAL_UART_Init>
 80002fe:	b118      	cbz	r0, 8000308 <MX_USART2_UART_Init+0x30>
	{
	  Error_Handler();
	}
}
 8000300:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  Error_Handler();
 8000304:	f7ff bf60 	b.w	80001c8 <Error_Handler>
}
 8000308:	bd08      	pop	{r3, pc}
 800030a:	bf00      	nop
 800030c:	200000d0 	.word	0x200000d0
 8000310:	40004400 	.word	0x40004400

08000314 <HAL_UART_MspInit>:
{

	GPIO_InitTypeDef GPIO_InitStruct = {0};

	/* Enable GPIO clock */
	USARTx_TX_GPIO_CLK_ENABLE();
 8000314:	4b3c      	ldr	r3, [pc, #240]	; (8000408 <HAL_UART_MspInit+0xf4>)
{
 8000316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	USARTx_TX_GPIO_CLK_ENABLE();
 800031a:	695a      	ldr	r2, [r3, #20]
	GPIO_InitStruct.Alternate = USARTx_TX_AF;

	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);

	/* Configure the DMA handler for Transmission process */
	hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800031c:	4d3b      	ldr	r5, [pc, #236]	; (800040c <HAL_UART_MspInit+0xf8>)
	USARTx_TX_GPIO_CLK_ENABLE();
 800031e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000322:	615a      	str	r2, [r3, #20]
 8000324:	695a      	ldr	r2, [r3, #20]
{
 8000326:	b08b      	sub	sp, #44	; 0x2c
	USARTx_TX_GPIO_CLK_ENABLE();
 8000328:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800032c:	9201      	str	r2, [sp, #4]
 800032e:	9a01      	ldr	r2, [sp, #4]
	USARTx_RX_GPIO_CLK_ENABLE();
 8000330:	695a      	ldr	r2, [r3, #20]
 8000332:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000336:	615a      	str	r2, [r3, #20]
 8000338:	695a      	ldr	r2, [r3, #20]
 800033a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800033e:	9202      	str	r2, [sp, #8]
 8000340:	9a02      	ldr	r2, [sp, #8]
	USARTx_CLK_ENABLE();
 8000342:	69da      	ldr	r2, [r3, #28]
 8000344:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000348:	61da      	str	r2, [r3, #28]
 800034a:	69da      	ldr	r2, [r3, #28]
 800034c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000350:	9203      	str	r2, [sp, #12]
 8000352:	9a03      	ldr	r2, [sp, #12]
	DMAx_CLK_ENABLE();
 8000354:	695a      	ldr	r2, [r3, #20]
 8000356:	f042 0201 	orr.w	r2, r2, #1
 800035a:	615a      	str	r2, [r3, #20]
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000364:	f248 0204 	movw	r2, #32772	; 0x8004
	DMAx_CLK_ENABLE();
 8000368:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036a:	2302      	movs	r3, #2
 800036c:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000370:	2701      	movs	r7, #1
 8000372:	2303      	movs	r3, #3
{
 8000374:	4606      	mov	r6, r0
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000376:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	e9cd 7307 	strd	r7, r3, [sp, #28]
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800037c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000380:	2307      	movs	r3, #7
 8000382:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000384:	f000 fa7a 	bl	800087c <HAL_GPIO_Init>
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000388:	4b21      	ldr	r3, [pc, #132]	; (8000410 <HAL_UART_MspInit+0xfc>)
	hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800038a:	2400      	movs	r4, #0
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800038c:	f04f 0810 	mov.w	r8, #16
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000390:	f04f 0980 	mov.w	r9, #128	; 0x80
	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_tx.Init.Mode                = DMA_NORMAL;
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

	HAL_DMA_Init(&hdma_tx);
 8000394:	4628      	mov	r0, r5
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000396:	e9c5 3800 	strd	r3, r8, [r5]
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800039a:	e9c5 4902 	strd	r4, r9, [r5, #8]
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800039e:	e9c5 4404 	strd	r4, r4, [r5, #16]
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80003a2:	e9c5 4406 	strd	r4, r4, [r5, #24]
	HAL_DMA_Init(&hdma_tx);
 80003a6:	f000 f997 	bl	80006d8 <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the UART handle */
	__HAL_LINKDMA(huart, hdmatx, hdma_tx);
 80003aa:	66b5      	str	r5, [r6, #104]	; 0x68
 80003ac:	626e      	str	r6, [r5, #36]	; 0x24

	/* Configure the DMA handler for reception process */
	hdma_rx.Instance                 = USARTx_RX_DMA_CHANNEL;
 80003ae:	4b19      	ldr	r3, [pc, #100]	; (8000414 <HAL_UART_MspInit+0x100>)
 80003b0:	4d19      	ldr	r5, [pc, #100]	; (8000418 <HAL_UART_MspInit+0x104>)
	hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80003b2:	e9c5 3400 	strd	r3, r4, [r5]
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_rx.Init.Mode                = DMA_NORMAL;
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

	HAL_DMA_Init(&hdma_rx);
 80003b6:	4628      	mov	r0, r5
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80003b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003bc:	61eb      	str	r3, [r5, #28]
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80003be:	e9c5 4902 	strd	r4, r9, [r5, #8]
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80003c2:	e9c5 4404 	strd	r4, r4, [r5, #16]
	hdma_rx.Init.Mode                = DMA_NORMAL;
 80003c6:	61ac      	str	r4, [r5, #24]
	HAL_DMA_Init(&hdma_rx);
 80003c8:	f000 f986 	bl	80006d8 <HAL_DMA_Init>

	/* Associate the initialized DMA handle to the the UART handle */
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);

	/* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 80003cc:	463a      	mov	r2, r7
 80003ce:	4621      	mov	r1, r4
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);
 80003d0:	66f5      	str	r5, [r6, #108]	; 0x6c
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 80003d2:	2011      	movs	r0, #17
	__HAL_LINKDMA(huart, hdmarx, hdma_rx);
 80003d4:	626e      	str	r6, [r5, #36]	; 0x24
	HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 80003d6:	f000 f929 	bl	800062c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80003da:	2011      	movs	r0, #17
 80003dc:	f000 f958 	bl	8000690 <HAL_NVIC_EnableIRQ>

	/* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
	HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 80003e0:	4622      	mov	r2, r4
 80003e2:	4621      	mov	r1, r4
 80003e4:	4640      	mov	r0, r8
 80003e6:	f000 f921 	bl	800062c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 80003ea:	4640      	mov	r0, r8
 80003ec:	f000 f950 	bl	8000690 <HAL_NVIC_EnableIRQ>

	/* NVIC configuration for USART, to catch the TX complete */
	HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 80003f0:	463a      	mov	r2, r7
 80003f2:	4621      	mov	r1, r4
 80003f4:	2026      	movs	r0, #38	; 0x26
 80003f6:	f000 f919 	bl	800062c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80003fa:	2026      	movs	r0, #38	; 0x26
 80003fc:	f000 f948 	bl	8000690 <HAL_NVIC_EnableIRQ>

}
 8000400:	b00b      	add	sp, #44	; 0x2c
 8000402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	20000080 	.word	0x20000080
 8000410:	40020080 	.word	0x40020080
 8000414:	4002006c 	.word	0x4002006c
 8000418:	2000003c 	.word	0x2000003c

0800041c <HAL_UART_TxCpltCallback>:
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	/* Toogle LED3 : Transfer in transmission process is correct */
	//BSP_LED_On(LED3);
}
 800041c:	4770      	bx	lr

0800041e <HAL_UART_ErrorCallback>:
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	/* Turn LED3 off: Transfer error in reception/transmission process */
	BSP_LED_Off(LED3);
 800041e:	2000      	movs	r0, #0
 8000420:	f000 b852 	b.w	80004c8 <BSP_LED_Off>

08000424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800045c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000428:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800042a:	e003      	b.n	8000434 <LoopCopyDataInit>

0800042c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800042e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000430:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000432:	3104      	adds	r1, #4

08000434 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000438:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800043a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800043c:	d3f6      	bcc.n	800042c <CopyDataInit>
	ldr	r2, =_sbss
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000440:	e002      	b.n	8000448 <LoopFillZerobss>

08000442 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000442:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000444:	f842 3b04 	str.w	r3, [r2], #4

08000448 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <LoopForever+0x16>)
	cmp	r2, r3
 800044a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800044c:	d3f9      	bcc.n	8000442 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800044e:	f000 f84d 	bl	80004ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f001 f965 	bl	8001720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000456:	f7ff feed 	bl	8000234 <main>

0800045a <LoopForever>:

LoopForever:
    b LoopForever
 800045a:	e7fe      	b.n	800045a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800045c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000460:	080017d4 	.word	0x080017d4
	ldr	r0, =_sdata
 8000464:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000468:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 800046c:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8000470:	20000154 	.word	0x20000154

08000474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC1_2_IRQHandler>
	...

08000478 <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <BSP_LED_Init+0x48>)
{
 800047a:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800047c:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800047e:	4d11      	ldr	r5, [pc, #68]	; (80004c4 <BSP_LED_Init+0x4c>)
  LEDx_GPIO_CLK_ENABLE(Led);
 8000480:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000484:	615a      	str	r2, [r3, #20]
 8000486:	695b      	ldr	r3, [r3, #20]
{
 8000488:	b087      	sub	sp, #28
  LEDx_GPIO_CLK_ENABLE(Led);
 800048a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	9b00      	ldr	r3, [sp, #0]
{
 8000492:	4604      	mov	r4, r0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	2608      	movs	r6, #8
 8000496:	2301      	movs	r3, #1
 8000498:	e9cd 6301 	strd	r6, r3, [sp, #4]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800049c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a0:	2303      	movs	r3, #3
 80004a2:	2700      	movs	r7, #0
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80004a4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a6:	e9cd 7303 	strd	r7, r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80004aa:	f000 f9e7 	bl	800087c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80004ae:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80004b2:	463a      	mov	r2, r7
 80004b4:	4631      	mov	r1, r6
 80004b6:	f000 fa9b 	bl	80009f0 <HAL_GPIO_WritePin>
}
 80004ba:	b007      	add	sp, #28
 80004bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	20000010 	.word	0x20000010

080004c8 <BSP_LED_Off>:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <BSP_LED_Off+0x10>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80004d0:	2108      	movs	r1, #8
 80004d2:	f000 ba8d 	b.w	80009f0 <HAL_GPIO_WritePin>
 80004d6:	bf00      	nop
 80004d8:	20000010 	.word	0x20000010

080004dc <BSP_LED_Toggle>:
  *            @arg  LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <BSP_LED_Toggle+0xc>)
 80004de:	2108      	movs	r1, #8
 80004e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80004e4:	f000 ba89 	b.w	80009fa <HAL_GPIO_TogglePin>
 80004e8:	20000010 	.word	0x20000010

080004ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004ec:	4915      	ldr	r1, [pc, #84]	; (8000544 <SystemInit+0x58>)
 80004ee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80004f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004fa:	4b13      	ldr	r3, [pc, #76]	; (8000548 <SystemInit+0x5c>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	f042 0201 	orr.w	r2, r2, #1
 8000502:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000504:	6858      	ldr	r0, [r3, #4]
 8000506:	4a11      	ldr	r2, [pc, #68]	; (800054c <SystemInit+0x60>)
 8000508:	4002      	ands	r2, r0
 800050a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000512:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000516:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800051e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000520:	685a      	ldr	r2, [r3, #4]
 8000522:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000526:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800052a:	f022 020f 	bic.w	r2, r2, #15
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000530:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <SystemInit+0x64>)
 8000534:	4002      	ands	r2, r0
 8000536:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800053c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000540:	608b      	str	r3, [r1, #8]
#endif
}
 8000542:	4770      	bx	lr
 8000544:	e000ed00 	.word	0xe000ed00
 8000548:	40021000 	.word	0x40021000
 800054c:	f87fc00c 	.word	0xf87fc00c
 8000550:	ff00fccc 	.word	0xff00fccc

08000554 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <HAL_InitTick+0x3c>)
 8000558:	4e0e      	ldr	r6, [pc, #56]	; (8000594 <HAL_InitTick+0x40>)
{
 800055a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000560:	7830      	ldrb	r0, [r6, #0]
 8000562:	fbb3 f3f0 	udiv	r3, r3, r0
 8000566:	6810      	ldr	r0, [r2, #0]
 8000568:	fbb0 f0f3 	udiv	r0, r0, r3
 800056c:	f000 f89e 	bl	80006ac <HAL_SYSTICK_Config>
 8000570:	4604      	mov	r4, r0
 8000572:	b950      	cbnz	r0, 800058a <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000574:	2d0f      	cmp	r5, #15
 8000576:	d808      	bhi.n	800058a <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000578:	4602      	mov	r2, r0
 800057a:	4629      	mov	r1, r5
 800057c:	f04f 30ff 	mov.w	r0, #4294967295
 8000580:	f000 f854 	bl	800062c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000584:	6075      	str	r5, [r6, #4]
 8000586:	4620      	mov	r0, r4
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000588:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800058a:	2001      	movs	r0, #1
 800058c:	e7fc      	b.n	8000588 <HAL_InitTick+0x34>
 800058e:	bf00      	nop
 8000590:	20000014 	.word	0x20000014
 8000594:	20000018 	.word	0x20000018

08000598 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_Init+0x20>)
{
 800059a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	6813      	ldr	r3, [r2, #0]
 800059e:	f043 0310 	orr.w	r3, r3, #16
 80005a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f000 f82f 	bl	8000608 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005aa:	200f      	movs	r0, #15
 80005ac:	f7ff ffd2 	bl	8000554 <HAL_InitTick>
  HAL_MspInit();
 80005b0:	f7ff fe5e 	bl	8000270 <HAL_MspInit>
}
 80005b4:	2000      	movs	r0, #0
 80005b6:	bd08      	pop	{r3, pc}
 80005b8:	40022000 	.word	0x40022000

080005bc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <HAL_IncTick+0x10>)
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_IncTick+0x14>)
 80005c0:	6811      	ldr	r1, [r2, #0]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	440b      	add	r3, r1
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000150 	.word	0x20000150
 80005d0:	20000018 	.word	0x20000018

080005d4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <HAL_GetTick+0x8>)
 80005d6:	6818      	ldr	r0, [r3, #0]
}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000150 	.word	0x20000150

080005e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b538      	push	{r3, r4, r5, lr}
 80005e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005e4:	f7ff fff6 	bl	80005d4 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005ea:	bf1c      	itt	ne
 80005ec:	4b05      	ldrne	r3, [pc, #20]	; (8000604 <HAL_Delay+0x24>)
 80005ee:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005f2:	bf18      	it	ne
 80005f4:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005f6:	f7ff ffed 	bl	80005d4 <HAL_GetTick>
 80005fa:	1b43      	subs	r3, r0, r5
 80005fc:	42a3      	cmp	r3, r4
 80005fe:	d3fa      	bcc.n	80005f6 <HAL_Delay+0x16>
  {
  }
}
 8000600:	bd38      	pop	{r3, r4, r5, pc}
 8000602:	bf00      	nop
 8000604:	20000018 	.word	0x20000018

08000608 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4907      	ldr	r1, [pc, #28]	; (8000628 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800060a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000618:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000624:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	68dc      	ldr	r4, [r3, #12]
 8000632:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000636:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063c:	2d04      	cmp	r5, #4
 800063e:	bf28      	it	cs
 8000640:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000648:	bf8c      	ite	hi
 800064a:	3c03      	subhi	r4, #3
 800064c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064e:	fa03 f505 	lsl.w	r5, r3, r5
 8000652:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000656:	40a3      	lsls	r3, r4
 8000658:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800065e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000660:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	bfac      	ite	ge
 8000666:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	4a08      	ldrlt	r2, [pc, #32]	; (800068c <HAL_NVIC_SetPriority+0x60>)
 800066c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000670:	bfb8      	it	lt
 8000672:	f000 000f 	andlt.w	r0, r0, #15
 8000676:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	bfaa      	itet	ge
 800067a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00
 800068c:	e000ed14 	.word	0xe000ed14

08000690 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000690:	2800      	cmp	r0, #0
 8000692:	db08      	blt.n	80006a6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000694:	0942      	lsrs	r2, r0, #5
 8000696:	2301      	movs	r3, #1
 8000698:	f000 001f 	and.w	r0, r0, #31
 800069c:	fa03 f000 	lsl.w	r0, r3, r0
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <HAL_NVIC_EnableIRQ+0x18>)
 80006a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100

080006ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ac:	3801      	subs	r0, #1
 80006ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b2:	d20a      	bcs.n	80006ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	21f0      	movs	r1, #240	; 0xf0
 80006bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000e010 	.word	0xe000e010
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80006d8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80006da:	b320      	cbz	r0, 8000726 <HAL_DMA_Init+0x4e>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80006dc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80006e0:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006e2:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80006e4:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006e6:	4323      	orrs	r3, r4
 80006e8:	6904      	ldr	r4, [r0, #16]
  tmp = hdma->Instance->CCR;
 80006ea:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006ec:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006ee:	6944      	ldr	r4, [r0, #20]
 80006f0:	4323      	orrs	r3, r4
 80006f2:	6984      	ldr	r4, [r0, #24]
 80006f4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80006f6:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80006f8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80006fc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8000700:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000702:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000704:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_DMA_Init+0x54>)
 8000708:	2214      	movs	r2, #20
 800070a:	440b      	add	r3, r1
 800070c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_DMA_Init+0x58>)
 8000716:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8000718:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000720:	8402      	strh	r2, [r0, #32]
  return HAL_OK;
 8000722:	4618      	mov	r0, r3
}  
 8000724:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000726:	2001      	movs	r0, #1
 8000728:	e7fc      	b.n	8000724 <HAL_DMA_Init+0x4c>
 800072a:	bf00      	nop
 800072c:	bffdfff8 	.word	0xbffdfff8
 8000730:	40020000 	.word	0x40020000

08000734 <HAL_DMA_Start_IT>:
{
 8000734:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000736:	f890 4020 	ldrb.w	r4, [r0, #32]
 800073a:	2c01      	cmp	r4, #1
 800073c:	d034      	beq.n	80007a8 <HAL_DMA_Start_IT+0x74>
  if(HAL_DMA_STATE_READY == hdma->State)
 800073e:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000742:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000744:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000746:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800074a:	f04f 0600 	mov.w	r6, #0
 800074e:	f04f 0402 	mov.w	r4, #2
 8000752:	d127      	bne.n	80007a4 <HAL_DMA_Start_IT+0x70>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000754:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000758:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800075a:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800075c:	6826      	ldr	r6, [r4, #0]
 800075e:	f026 0601 	bic.w	r6, r6, #1
 8000762:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000764:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8000768:	40bd      	lsls	r5, r7
 800076a:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800076c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800076e:	6843      	ldr	r3, [r0, #4]
 8000770:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000772:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8000774:	bf0b      	itete	eq
 8000776:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8000778:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800077a:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800077c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800077e:	b14b      	cbz	r3, 8000794 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000786:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000790:	2000      	movs	r0, #0
} 
 8000792:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	f043 030a 	orr.w	r3, r3, #10
 800079a:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	f023 0304 	bic.w	r3, r3, #4
 80007a2:	e7f0      	b.n	8000786 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80007a4:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80007a8:	2002      	movs	r0, #2
 80007aa:	e7f2      	b.n	8000792 <HAL_DMA_Start_IT+0x5e>

080007ac <HAL_DMA_Abort_IT>:
{  
 80007ac:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80007ae:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80007b2:	2a02      	cmp	r2, #2
 80007b4:	d003      	beq.n	80007be <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007b6:	2204      	movs	r2, #4
 80007b8:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80007ba:	2001      	movs	r0, #1
}
 80007bc:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80007be:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 80007c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80007c2:	6811      	ldr	r1, [r2, #0]
 80007c4:	f021 010e 	bic.w	r1, r1, #14
 80007c8:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80007ca:	6811      	ldr	r1, [r2, #0]
 80007cc:	f021 0101 	bic.w	r1, r1, #1
 80007d0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80007d2:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
 80007d6:	2201      	movs	r2, #1
 80007d8:	40a2      	lsls	r2, r4
 80007da:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 80007dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007e0:	8402      	strh	r2, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80007e2:	b113      	cbz	r3, 80007ea <HAL_DMA_Abort_IT+0x3e>
      hdma->XferAbortCallback(hdma);
 80007e4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80007e6:	2000      	movs	r0, #0
 80007e8:	e7e8      	b.n	80007bc <HAL_DMA_Abort_IT+0x10>
 80007ea:	4618      	mov	r0, r3
 80007ec:	e7e6      	b.n	80007bc <HAL_DMA_Abort_IT+0x10>

080007ee <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007ee:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80007f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80007f2:	6803      	ldr	r3, [r0, #0]
{
 80007f4:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007f6:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80007f8:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80007fa:	2404      	movs	r4, #4
 80007fc:	4094      	lsls	r4, r2
 80007fe:	4234      	tst	r4, r6
 8000800:	d00e      	beq.n	8000820 <HAL_DMA_IRQHandler+0x32>
 8000802:	f015 0f04 	tst.w	r5, #4
 8000806:	d00b      	beq.n	8000820 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800080c:	bf5e      	ittt	pl
 800080e:	681a      	ldrpl	r2, [r3, #0]
 8000810:	f022 0204 	bicpl.w	r2, r2, #4
 8000814:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000816:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000818:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800081a:	b363      	cbz	r3, 8000876 <HAL_DMA_IRQHandler+0x88>
}  
 800081c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800081e:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000820:	2402      	movs	r4, #2
 8000822:	4094      	lsls	r4, r2
 8000824:	4234      	tst	r4, r6
 8000826:	d012      	beq.n	800084e <HAL_DMA_IRQHandler+0x60>
 8000828:	f015 0f02 	tst.w	r5, #2
 800082c:	d00f      	beq.n	800084e <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	0695      	lsls	r5, r2, #26
 8000832:	d406      	bmi.n	8000842 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	f022 020a 	bic.w	r2, r2, #10
 800083a:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800083c:	2301      	movs	r3, #1
 800083e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 8000842:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000844:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 8000846:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800084a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800084c:	e7e5      	b.n	800081a <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800084e:	2408      	movs	r4, #8
 8000850:	4094      	lsls	r4, r2
 8000852:	4234      	tst	r4, r6
 8000854:	d00f      	beq.n	8000876 <HAL_DMA_IRQHandler+0x88>
 8000856:	072c      	lsls	r4, r5, #28
 8000858:	d50d      	bpl.n	8000876 <HAL_DMA_IRQHandler+0x88>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800085a:	681c      	ldr	r4, [r3, #0]
 800085c:	f024 040e 	bic.w	r4, r4, #14
 8000860:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000862:	2301      	movs	r3, #1
 8000864:	fa03 f202 	lsl.w	r2, r3, r2
 8000868:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800086a:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 800086c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000870:	8403      	strh	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8000872:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000874:	e7d1      	b.n	800081a <HAL_DMA_IRQHandler+0x2c>
}  
 8000876:	bc70      	pop	{r4, r5, r6}
 8000878:	4770      	bx	lr
	...

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000880:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80009ec <HAL_GPIO_Init+0x170>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000884:	4c57      	ldr	r4, [pc, #348]	; (80009e4 <HAL_GPIO_Init+0x168>)
  uint32_t position = 0x00u;
 8000886:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000888:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800088c:	680a      	ldr	r2, [r1, #0]
 800088e:	fa32 f503 	lsrs.w	r5, r2, r3
 8000892:	d102      	bne.n	800089a <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000894:	b003      	add	sp, #12
 8000896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800089a:	2501      	movs	r5, #1
 800089c:	fa05 fa03 	lsl.w	sl, r5, r3
    if (iocurrent != 0x00u)
 80008a0:	ea1a 0202 	ands.w	r2, sl, r2
 80008a4:	f000 8095 	beq.w	80009d2 <HAL_GPIO_Init+0x156>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a8:	684d      	ldr	r5, [r1, #4]
 80008aa:	f025 0e10 	bic.w	lr, r5, #16
 80008ae:	f1be 0f02 	cmp.w	lr, #2
 80008b2:	d111      	bne.n	80008d8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3u];
 80008b4:	08df      	lsrs	r7, r3, #3
 80008b6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008ba:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80008be:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008c0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80008c4:	fa09 fb0c 	lsl.w	fp, r9, ip
 80008c8:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008cc:	690e      	ldr	r6, [r1, #16]
 80008ce:	fa06 f60c 	lsl.w	r6, r6, ip
 80008d2:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3u] = temp;
 80008d6:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 80008d8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008e0:	2603      	movs	r6, #3
 80008e2:	fa06 f70c 	lsl.w	r7, r6, ip
 80008e6:	ea2b 0b07 	bic.w	fp, fp, r7
 80008ea:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ec:	f005 0703 	and.w	r7, r5, #3
 80008f0:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f4:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008f8:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008fc:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8000900:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000902:	d811      	bhi.n	8000928 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8000904:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000906:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800090a:	68cf      	ldr	r7, [r1, #12]
 800090c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000910:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000914:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000916:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000918:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800091c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000920:	409f      	lsls	r7, r3
 8000922:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000926:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000928:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800092a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800092c:	688e      	ldr	r6, [r1, #8]
 800092e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000932:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000934:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000936:	00ee      	lsls	r6, r5, #3
 8000938:	d54b      	bpl.n	80009d2 <HAL_GPIO_Init+0x156>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800093e:	f046 0601 	orr.w	r6, r6, #1
 8000942:	f8c8 6018 	str.w	r6, [r8, #24]
 8000946:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800094a:	f023 0703 	bic.w	r7, r3, #3
 800094e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000952:	f006 0601 	and.w	r6, r6, #1
 8000956:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800095a:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800095c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000960:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000962:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000964:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000968:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800096c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000970:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000974:	d02f      	beq.n	80009d6 <HAL_GPIO_Init+0x15a>
 8000976:	4e1c      	ldr	r6, [pc, #112]	; (80009e8 <HAL_GPIO_Init+0x16c>)
 8000978:	42b0      	cmp	r0, r6
 800097a:	d02e      	beq.n	80009da <HAL_GPIO_Init+0x15e>
 800097c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000980:	42b0      	cmp	r0, r6
 8000982:	d02c      	beq.n	80009de <HAL_GPIO_Init+0x162>
 8000984:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000988:	42b0      	cmp	r0, r6
 800098a:	bf0c      	ite	eq
 800098c:	2603      	moveq	r6, #3
 800098e:	2605      	movne	r6, #5
 8000990:	fa06 f60c 	lsl.w	r6, r6, ip
 8000994:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000998:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800099a:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 800099c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800099e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 80009a2:	bf0c      	ite	eq
 80009a4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80009a6:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 80009a8:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80009aa:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ac:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 80009b0:	bf0c      	ite	eq
 80009b2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80009b4:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 80009b6:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80009b8:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ba:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80009be:	bf0c      	ite	eq
 80009c0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80009c2:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 80009c4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80009c6:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c8:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 80009ca:	bf54      	ite	pl
 80009cc:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80009ce:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 80009d0:	60e6      	str	r6, [r4, #12]
    position++;
 80009d2:	3301      	adds	r3, #1
 80009d4:	e75a      	b.n	800088c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009d6:	2600      	movs	r6, #0
 80009d8:	e7da      	b.n	8000990 <HAL_GPIO_Init+0x114>
 80009da:	2601      	movs	r6, #1
 80009dc:	e7d8      	b.n	8000990 <HAL_GPIO_Init+0x114>
 80009de:	2602      	movs	r6, #2
 80009e0:	e7d6      	b.n	8000990 <HAL_GPIO_Init+0x114>
 80009e2:	bf00      	nop
 80009e4:	40010400 	.word	0x40010400
 80009e8:	48000400 	.word	0x48000400
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009f0:	b10a      	cbz	r2, 80009f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009f2:	6181      	str	r1, [r0, #24]
 80009f4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009f6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80009f8:	4770      	bx	lr

080009fa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80009fa:	6943      	ldr	r3, [r0, #20]
 80009fc:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80009fe:	bf18      	it	ne
 8000a00:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a02:	6181      	str	r1, [r0, #24]
  }
}
 8000a04:	4770      	bx	lr
	...

08000a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a0c:	4605      	mov	r5, r0
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d035      	beq.n	8000a7e <HAL_RCC_OscConfig+0x76>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a12:	6803      	ldr	r3, [r0, #0]
 8000a14:	07da      	lsls	r2, r3, #31
 8000a16:	d411      	bmi.n	8000a3c <HAL_RCC_OscConfig+0x34>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	079b      	lsls	r3, r3, #30
 8000a1c:	f100 8088 	bmi.w	8000b30 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	071c      	lsls	r4, r3, #28
 8000a24:	f100 80f8 	bmi.w	8000c18 <HAL_RCC_OscConfig+0x210>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a28:	682b      	ldr	r3, [r5, #0]
 8000a2a:	0758      	lsls	r0, r3, #29
 8000a2c:	f100 8141 	bmi.w	8000cb2 <HAL_RCC_OscConfig+0x2aa>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a30:	69e8      	ldr	r0, [r5, #28]
 8000a32:	2800      	cmp	r0, #0
 8000a34:	f040 81d7 	bne.w	8000de6 <HAL_RCC_OscConfig+0x3de>
        }
      }
    }
  }

  return HAL_OK;
 8000a38:	2000      	movs	r0, #0
 8000a3a:	e04b      	b.n	8000ad4 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a3c:	4cba      	ldr	r4, [pc, #744]	; (8000d28 <HAL_RCC_OscConfig+0x320>)
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	f003 030c 	and.w	r3, r3, #12
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d007      	beq.n	8000a58 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a48:	6863      	ldr	r3, [r4, #4]
 8000a4a:	f003 030c 	and.w	r3, r3, #12
 8000a4e:	2b08      	cmp	r3, #8
 8000a50:	d117      	bne.n	8000a82 <HAL_RCC_OscConfig+0x7a>
 8000a52:	6863      	ldr	r3, [r4, #4]
 8000a54:	03df      	lsls	r7, r3, #15
 8000a56:	d514      	bpl.n	8000a82 <HAL_RCC_OscConfig+0x7a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a5c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a60:	6821      	ldr	r1, [r4, #0]
 8000a62:	fa93 f3a3 	rbit	r3, r3
 8000a66:	fab3 f383 	clz	r3, r3
 8000a6a:	f003 031f 	and.w	r3, r3, #31
 8000a6e:	2201      	movs	r2, #1
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	420b      	tst	r3, r1
 8000a76:	d0cf      	beq.n	8000a18 <HAL_RCC_OscConfig+0x10>
 8000a78:	686b      	ldr	r3, [r5, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d1cc      	bne.n	8000a18 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
 8000a80:	e028      	b.n	8000ad4 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a82:	686a      	ldr	r2, [r5, #4]
 8000a84:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000a88:	d127      	bne.n	8000ada <HAL_RCC_OscConfig+0xd2>
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a90:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a94:	68a9      	ldr	r1, [r5, #8]
 8000a96:	f023 030f 	bic.w	r3, r3, #15
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a9e:	b362      	cbz	r2, 8000afa <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fd98 	bl	80005d4 <HAL_GetTick>
 8000aa4:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8000aa8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aaa:	f04f 0801 	mov.w	r8, #1
 8000aae:	fa97 f3a7 	rbit	r3, r7
 8000ab2:	6822      	ldr	r2, [r4, #0]
 8000ab4:	fa97 f3a7 	rbit	r3, r7
 8000ab8:	fab3 f383 	clz	r3, r3
 8000abc:	f003 031f 	and.w	r3, r3, #31
 8000ac0:	fa08 f303 	lsl.w	r3, r8, r3
 8000ac4:	4213      	tst	r3, r2
 8000ac6:	d1a7      	bne.n	8000a18 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac8:	f7ff fd84 	bl	80005d4 <HAL_GetTick>
 8000acc:	1b83      	subs	r3, r0, r6
 8000ace:	2b64      	cmp	r3, #100	; 0x64
 8000ad0:	d9ed      	bls.n	8000aae <HAL_RCC_OscConfig+0xa6>
            return HAL_TIMEOUT;
 8000ad2:	2003      	movs	r0, #3
}
 8000ad4:	b002      	add	sp, #8
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	b932      	cbnz	r2, 8000aec <HAL_RCC_OscConfig+0xe4>
 8000ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae2:	6023      	str	r3, [r4, #0]
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aea:	e7d1      	b.n	8000a90 <HAL_RCC_OscConfig+0x88>
 8000aec:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000af0:	d1f5      	bne.n	8000ade <HAL_RCC_OscConfig+0xd6>
 8000af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af6:	6023      	str	r3, [r4, #0]
 8000af8:	e7c7      	b.n	8000a8a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000afa:	f7ff fd6b 	bl	80005d4 <HAL_GetTick>
 8000afe:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8000b02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b04:	f04f 0801 	mov.w	r8, #1
 8000b08:	fa97 f3a7 	rbit	r3, r7
 8000b0c:	6822      	ldr	r2, [r4, #0]
 8000b0e:	fa97 f3a7 	rbit	r3, r7
 8000b12:	fab3 f383 	clz	r3, r3
 8000b16:	f003 031f 	and.w	r3, r3, #31
 8000b1a:	fa08 f303 	lsl.w	r3, r8, r3
 8000b1e:	4213      	tst	r3, r2
 8000b20:	f43f af7a 	beq.w	8000a18 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b24:	f7ff fd56 	bl	80005d4 <HAL_GetTick>
 8000b28:	1b83      	subs	r3, r0, r6
 8000b2a:	2b64      	cmp	r3, #100	; 0x64
 8000b2c:	d9ec      	bls.n	8000b08 <HAL_RCC_OscConfig+0x100>
 8000b2e:	e7d0      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b30:	4c7d      	ldr	r4, [pc, #500]	; (8000d28 <HAL_RCC_OscConfig+0x320>)
 8000b32:	6863      	ldr	r3, [r4, #4]
 8000b34:	f013 0f0c 	tst.w	r3, #12
 8000b38:	d007      	beq.n	8000b4a <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b3a:	6863      	ldr	r3, [r4, #4]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d121      	bne.n	8000b88 <HAL_RCC_OscConfig+0x180>
 8000b44:	6863      	ldr	r3, [r4, #4]
 8000b46:	03de      	lsls	r6, r3, #15
 8000b48:	d41e      	bmi.n	8000b88 <HAL_RCC_OscConfig+0x180>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b50:	6821      	ldr	r1, [r4, #0]
 8000b52:	fa93 f3a3 	rbit	r3, r3
 8000b56:	fab3 f383 	clz	r3, r3
 8000b5a:	f003 031f 	and.w	r3, r3, #31
 8000b5e:	2201      	movs	r2, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	420b      	tst	r3, r1
 8000b66:	d002      	beq.n	8000b6e <HAL_RCC_OscConfig+0x166>
 8000b68:	692b      	ldr	r3, [r5, #16]
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d187      	bne.n	8000a7e <HAL_RCC_OscConfig+0x76>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b6e:	6821      	ldr	r1, [r4, #0]
 8000b70:	23f8      	movs	r3, #248	; 0xf8
 8000b72:	fa93 f3a3 	rbit	r3, r3
 8000b76:	fab3 f283 	clz	r2, r3
 8000b7a:	696b      	ldr	r3, [r5, #20]
 8000b7c:	4093      	lsls	r3, r2
 8000b7e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000b82:	4313      	orrs	r3, r2
 8000b84:	6023      	str	r3, [r4, #0]
 8000b86:	e74b      	b.n	8000a20 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b88:	692a      	ldr	r2, [r5, #16]
 8000b8a:	2601      	movs	r6, #1
 8000b8c:	b30a      	cbz	r2, 8000bd2 <HAL_RCC_OscConfig+0x1ca>
 8000b8e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000b92:	fab3 f383 	clz	r3, r3
 8000b96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	f04f 0802 	mov.w	r8, #2
 8000ba4:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fd15 	bl	80005d4 <HAL_GetTick>
 8000baa:	4607      	mov	r7, r0
 8000bac:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb0:	6822      	ldr	r2, [r4, #0]
 8000bb2:	fa98 f3a8 	rbit	r3, r8
 8000bb6:	fab3 f383 	clz	r3, r3
 8000bba:	f003 031f 	and.w	r3, r3, #31
 8000bbe:	fa06 f303 	lsl.w	r3, r6, r3
 8000bc2:	4213      	tst	r3, r2
 8000bc4:	d1d3      	bne.n	8000b6e <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bc6:	f7ff fd05 	bl	80005d4 <HAL_GetTick>
 8000bca:	1bc3      	subs	r3, r0, r7
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d9ed      	bls.n	8000bac <HAL_RCC_OscConfig+0x1a4>
 8000bd0:	e77f      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
 8000bd2:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000bd6:	fab3 f383 	clz	r3, r3
 8000bda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	f04f 0802 	mov.w	r8, #2
 8000be8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bea:	f7ff fcf3 	bl	80005d4 <HAL_GetTick>
 8000bee:	4607      	mov	r7, r0
 8000bf0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf4:	6822      	ldr	r2, [r4, #0]
 8000bf6:	fa98 f3a8 	rbit	r3, r8
 8000bfa:	fab3 f383 	clz	r3, r3
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	fa06 f303 	lsl.w	r3, r6, r3
 8000c06:	4213      	tst	r3, r2
 8000c08:	f43f af0a 	beq.w	8000a20 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0c:	f7ff fce2 	bl	80005d4 <HAL_GetTick>
 8000c10:	1bc3      	subs	r3, r0, r7
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d9ec      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x1e8>
 8000c16:	e75c      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c18:	69aa      	ldr	r2, [r5, #24]
 8000c1a:	4e43      	ldr	r6, [pc, #268]	; (8000d28 <HAL_RCC_OscConfig+0x320>)
 8000c1c:	4943      	ldr	r1, [pc, #268]	; (8000d2c <HAL_RCC_OscConfig+0x324>)
 8000c1e:	2401      	movs	r4, #1
 8000c20:	b31a      	cbz	r2, 8000c6a <HAL_RCC_OscConfig+0x262>
 8000c22:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000c26:	fab3 f383 	clz	r3, r3
 8000c2a:	440b      	add	r3, r1
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	2702      	movs	r7, #2
 8000c30:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000c32:	f7ff fccf 	bl	80005d4 <HAL_GetTick>
 8000c36:	4680      	mov	r8, r0
 8000c38:	fa97 f3a7 	rbit	r3, r7
 8000c3c:	fa97 f3a7 	rbit	r3, r7
 8000c40:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c44:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000c46:	fa97 f3a7 	rbit	r3, r7
 8000c4a:	fab3 f383 	clz	r3, r3
 8000c4e:	f003 031f 	and.w	r3, r3, #31
 8000c52:	fa04 f303 	lsl.w	r3, r4, r3
 8000c56:	4213      	tst	r3, r2
 8000c58:	f47f aee6 	bne.w	8000a28 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fcba 	bl	80005d4 <HAL_GetTick>
 8000c60:	eba0 0308 	sub.w	r3, r0, r8
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d9e7      	bls.n	8000c38 <HAL_RCC_OscConfig+0x230>
 8000c68:	e733      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
 8000c6a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	440b      	add	r3, r1
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	2702      	movs	r7, #2
 8000c78:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c7a:	f7ff fcab 	bl	80005d4 <HAL_GetTick>
 8000c7e:	4680      	mov	r8, r0
 8000c80:	fa97 f3a7 	rbit	r3, r7
 8000c84:	fa97 f3a7 	rbit	r3, r7
 8000c88:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000c8e:	fa97 f3a7 	rbit	r3, r7
 8000c92:	fab3 f383 	clz	r3, r3
 8000c96:	f003 031f 	and.w	r3, r3, #31
 8000c9a:	fa04 f303 	lsl.w	r3, r4, r3
 8000c9e:	4213      	tst	r3, r2
 8000ca0:	f43f aec2 	beq.w	8000a28 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fc96 	bl	80005d4 <HAL_GetTick>
 8000ca8:	eba0 0308 	sub.w	r3, r0, r8
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d9e7      	bls.n	8000c80 <HAL_RCC_OscConfig+0x278>
 8000cb0:	e70f      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb2:	4c1d      	ldr	r4, [pc, #116]	; (8000d28 <HAL_RCC_OscConfig+0x320>)
 8000cb4:	69e3      	ldr	r3, [r4, #28]
 8000cb6:	00d9      	lsls	r1, r3, #3
 8000cb8:	d434      	bmi.n	8000d24 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	69e3      	ldr	r3, [r4, #28]
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	61e3      	str	r3, [r4, #28]
 8000cc2:	69e3      	ldr	r3, [r4, #28]
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ccc:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cce:	4f18      	ldr	r7, [pc, #96]	; (8000d30 <HAL_RCC_OscConfig+0x328>)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	05da      	lsls	r2, r3, #23
 8000cd4:	d52e      	bpl.n	8000d34 <HAL_RCC_OscConfig+0x32c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cd6:	68eb      	ldr	r3, [r5, #12]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d13c      	bne.n	8000d56 <HAL_RCC_OscConfig+0x34e>
 8000cdc:	6a23      	ldr	r3, [r4, #32]
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ce4:	f7ff fc76 	bl	80005d4 <HAL_GetTick>
 8000ce8:	2702      	movs	r7, #2
 8000cea:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cec:	46ba      	mov	sl, r7
 8000cee:	f04f 0901 	mov.w	r9, #1
 8000cf2:	fa97 f3a7 	rbit	r3, r7
 8000cf6:	fa97 f3a7 	rbit	r3, r7
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d06b      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x3ce>
 8000cfe:	6a22      	ldr	r2, [r4, #32]
 8000d00:	fa9a f3aa 	rbit	r3, sl
 8000d04:	fab3 f383 	clz	r3, r3
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8000d10:	4213      	tst	r3, r2
 8000d12:	d057      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	f43f ae8b 	beq.w	8000a30 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d1a:	69e3      	ldr	r3, [r4, #28]
 8000d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d20:	61e3      	str	r3, [r4, #28]
 8000d22:	e685      	b.n	8000a30 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000d24:	2600      	movs	r6, #0
 8000d26:	e7d2      	b.n	8000cce <HAL_RCC_OscConfig+0x2c6>
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	10908120 	.word	0x10908120
 8000d30:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000d3c:	f7ff fc4a 	bl	80005d4 <HAL_GetTick>
 8000d40:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	d4c6      	bmi.n	8000cd6 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d48:	f7ff fc44 	bl	80005d4 <HAL_GetTick>
 8000d4c:	eba0 0008 	sub.w	r0, r0, r8
 8000d50:	2864      	cmp	r0, #100	; 0x64
 8000d52:	d9f6      	bls.n	8000d42 <HAL_RCC_OscConfig+0x33a>
 8000d54:	e6bd      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d56:	bb3b      	cbnz	r3, 8000da8 <HAL_RCC_OscConfig+0x3a0>
 8000d58:	6a23      	ldr	r3, [r4, #32]
 8000d5a:	f023 0301 	bic.w	r3, r3, #1
 8000d5e:	6223      	str	r3, [r4, #32]
 8000d60:	6a23      	ldr	r3, [r4, #32]
 8000d62:	f023 0304 	bic.w	r3, r3, #4
 8000d66:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d68:	f7ff fc34 	bl	80005d4 <HAL_GetTick>
 8000d6c:	2702      	movs	r7, #2
 8000d6e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d70:	46ba      	mov	sl, r7
 8000d72:	f04f 0901 	mov.w	r9, #1
 8000d76:	fa97 f3a7 	rbit	r3, r7
 8000d7a:	fa97 f3a7 	rbit	r3, r7
 8000d7e:	b373      	cbz	r3, 8000dde <HAL_RCC_OscConfig+0x3d6>
 8000d80:	6a22      	ldr	r2, [r4, #32]
 8000d82:	fa9a f3aa 	rbit	r3, sl
 8000d86:	fab3 f383 	clz	r3, r3
 8000d8a:	f003 031f 	and.w	r3, r3, #31
 8000d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8000d92:	4213      	tst	r3, r2
 8000d94:	d0be      	beq.n	8000d14 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d96:	f7ff fc1d 	bl	80005d4 <HAL_GetTick>
 8000d9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d9e:	eba0 0008 	sub.w	r0, r0, r8
 8000da2:	4298      	cmp	r0, r3
 8000da4:	d9e7      	bls.n	8000d76 <HAL_RCC_OscConfig+0x36e>
 8000da6:	e694      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	6a23      	ldr	r3, [r4, #32]
 8000dac:	d103      	bne.n	8000db6 <HAL_RCC_OscConfig+0x3ae>
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6223      	str	r3, [r4, #32]
 8000db4:	e792      	b.n	8000cdc <HAL_RCC_OscConfig+0x2d4>
 8000db6:	f023 0301 	bic.w	r3, r3, #1
 8000dba:	6223      	str	r3, [r4, #32]
 8000dbc:	6a23      	ldr	r3, [r4, #32]
 8000dbe:	f023 0304 	bic.w	r3, r3, #4
 8000dc2:	e78e      	b.n	8000ce2 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fc06 	bl	80005d4 <HAL_GetTick>
 8000dc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dcc:	eba0 0008 	sub.w	r0, r0, r8
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	d98e      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x2ea>
 8000dd4:	e67d      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
 8000dd6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ddc:	e790      	b.n	8000d00 <HAL_RCC_OscConfig+0x2f8>
 8000dde:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000de2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000de4:	e7cd      	b.n	8000d82 <HAL_RCC_OscConfig+0x37a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000de6:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <HAL_RCC_OscConfig+0x504>)
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	f002 020c 	and.w	r2, r2, #12
 8000dee:	2a08      	cmp	r2, #8
 8000df0:	461c      	mov	r4, r3
 8000df2:	d07a      	beq.n	8000eea <HAL_RCC_OscConfig+0x4e2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000df4:	2802      	cmp	r0, #2
 8000df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dfa:	d151      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x498>
 8000dfc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000e00:	fab3 f383 	clz	r3, r3
 8000e04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e12:	f7ff fbdf 	bl	80005d4 <HAL_GetTick>
 8000e16:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8000e1a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e1c:	2601      	movs	r6, #1
 8000e1e:	fa98 f3a8 	rbit	r3, r8
 8000e22:	6822      	ldr	r2, [r4, #0]
 8000e24:	fa98 f3a8 	rbit	r3, r8
 8000e28:	fab3 f383 	clz	r3, r3
 8000e2c:	f003 031f 	and.w	r3, r3, #31
 8000e30:	fa06 f303 	lsl.w	r3, r6, r3
 8000e34:	4213      	tst	r3, r2
 8000e36:	d12d      	bne.n	8000e94 <HAL_RCC_OscConfig+0x48c>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e38:	e9d5 1308 	ldrd	r1, r3, [r5, #32]
 8000e3c:	6862      	ldr	r2, [r4, #4]
 8000e3e:	430b      	orrs	r3, r1
 8000e40:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000e44:	4313      	orrs	r3, r2
 8000e46:	6063      	str	r3, [r4, #4]
 8000e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e4c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e5c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e5e:	2701      	movs	r7, #1
        __HAL_RCC_PLL_ENABLE();
 8000e60:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000e62:	f7ff fbb7 	bl	80005d4 <HAL_GetTick>
 8000e66:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000e6a:	4605      	mov	r5, r0
 8000e6c:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	fa96 f3a6 	rbit	r3, r6
 8000e76:	fab3 f383 	clz	r3, r3
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	fa07 f303 	lsl.w	r3, r7, r3
 8000e82:	4213      	tst	r3, r2
 8000e84:	f47f add8 	bne.w	8000a38 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e88:	f7ff fba4 	bl	80005d4 <HAL_GetTick>
 8000e8c:	1b40      	subs	r0, r0, r5
 8000e8e:	2802      	cmp	r0, #2
 8000e90:	d9ec      	bls.n	8000e6c <HAL_RCC_OscConfig+0x464>
 8000e92:	e61e      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e94:	f7ff fb9e 	bl	80005d4 <HAL_GetTick>
 8000e98:	1bc3      	subs	r3, r0, r7
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d9bf      	bls.n	8000e1e <HAL_RCC_OscConfig+0x416>
 8000e9e:	e618      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
 8000ea0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eb6:	f7ff fb8d 	bl	80005d4 <HAL_GetTick>
 8000eba:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000ebe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec0:	2701      	movs	r7, #1
 8000ec2:	fa96 f3a6 	rbit	r3, r6
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	fa96 f3a6 	rbit	r3, r6
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	fa07 f303 	lsl.w	r3, r7, r3
 8000ed8:	4213      	tst	r3, r2
 8000eda:	f43f adad 	beq.w	8000a38 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ede:	f7ff fb79 	bl	80005d4 <HAL_GetTick>
 8000ee2:	1b40      	subs	r0, r0, r5
 8000ee4:	2802      	cmp	r0, #2
 8000ee6:	d9ec      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x4ba>
 8000ee8:	e5f3      	b.n	8000ad2 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eea:	2801      	cmp	r0, #1
 8000eec:	f43f adf2 	beq.w	8000ad4 <HAL_RCC_OscConfig+0xcc>
        pll_config = RCC->CFGR;
 8000ef0:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000ef2:	6a2a      	ldr	r2, [r5, #32]
 8000ef4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000ef8:	4291      	cmp	r1, r2
 8000efa:	f47f adc0 	bne.w	8000a7e <HAL_RCC_OscConfig+0x76>
 8000efe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8000f00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000f04:	4293      	cmp	r3, r2
 8000f06:	f43f ad97 	beq.w	8000a38 <HAL_RCC_OscConfig+0x30>
 8000f0a:	e5b8      	b.n	8000a7e <HAL_RCC_OscConfig+0x76>
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f10:	b530      	push	{r4, r5, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000f12:	4d13      	ldr	r5, [pc, #76]	; (8000f60 <HAL_RCC_GetSysClockFreq+0x50>)
 8000f14:	686c      	ldr	r4, [r5, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f16:	f004 030c 	and.w	r3, r4, #12
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d11e      	bne.n	8000f5c <HAL_RCC_GetSysClockFreq+0x4c>
 8000f1e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000f22:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000f26:	f404 1370 	and.w	r3, r4, #3932160	; 0x3c0000
 8000f2a:	fab2 f282 	clz	r2, r2
 8000f2e:	fa23 f202 	lsr.w	r2, r3, r2
 8000f32:	490c      	ldr	r1, [pc, #48]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000f34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000f36:	5c88      	ldrb	r0, [r1, r2]
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa92 f2a2 	rbit	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000f3e:	fab2 f282 	clz	r2, r2
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	40d3      	lsrs	r3, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	7c1a      	ldrb	r2, [r3, #16]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000f4c:	03e3      	lsls	r3, r4, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000f4e:	bf4a      	itet	mi
 8000f50:	4b05      	ldrmi	r3, [pc, #20]	; (8000f68 <HAL_RCC_GetSysClockFreq+0x58>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000f52:	4b06      	ldrpl	r3, [pc, #24]	; (8000f6c <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000f54:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000f58:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f5a:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000f5e:	e7fc      	b.n	8000f5a <HAL_RCC_GetSysClockFreq+0x4a>
 8000f60:	40021000 	.word	0x40021000
 8000f64:	080017a8 	.word	0x080017a8
 8000f68:	007a1200 	.word	0x007a1200
 8000f6c:	003d0900 	.word	0x003d0900

08000f70 <HAL_RCC_ClockConfig>:
{
 8000f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f74:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f76:	4604      	mov	r4, r0
 8000f78:	b910      	cbnz	r0, 8000f80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
}
 8000f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_RCC_ClockConfig+0x144>)
 8000f82:	6813      	ldr	r3, [r2, #0]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d32e      	bcc.n	8000fea <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f8c:	6822      	ldr	r2, [r4, #0]
 8000f8e:	0791      	lsls	r1, r2, #30
 8000f90:	d436      	bmi.n	8001000 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f92:	07d2      	lsls	r2, r2, #31
 8000f94:	d43c      	bmi.n	8001010 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f96:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <HAL_RCC_ClockConfig+0x144>)
 8000f98:	6813      	ldr	r3, [r2, #0]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	42ab      	cmp	r3, r5
 8000fa0:	d874      	bhi.n	800108c <HAL_RCC_ClockConfig+0x11c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fa2:	6822      	ldr	r2, [r4, #0]
 8000fa4:	4d44      	ldr	r5, [pc, #272]	; (80010b8 <HAL_RCC_ClockConfig+0x148>)
 8000fa6:	f012 0f04 	tst.w	r2, #4
 8000faa:	d17b      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fac:	0713      	lsls	r3, r2, #28
 8000fae:	d506      	bpl.n	8000fbe <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fb0:	686b      	ldr	r3, [r5, #4]
 8000fb2:	6922      	ldr	r2, [r4, #16]
 8000fb4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000fb8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fbc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000fbe:	f7ff ffa7 	bl	8000f10 <HAL_RCC_GetSysClockFreq>
 8000fc2:	686b      	ldr	r3, [r5, #4]
 8000fc4:	22f0      	movs	r2, #240	; 0xf0
 8000fc6:	fa92 f2a2 	rbit	r2, r2
 8000fca:	fab2 f282 	clz	r2, r2
 8000fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fd2:	40d3      	lsrs	r3, r2
 8000fd4:	4a39      	ldr	r2, [pc, #228]	; (80010bc <HAL_RCC_ClockConfig+0x14c>)
 8000fd6:	5cd3      	ldrb	r3, [r2, r3]
 8000fd8:	40d8      	lsrs	r0, r3
 8000fda:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <HAL_RCC_ClockConfig+0x150>)
 8000fdc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <HAL_RCC_ClockConfig+0x154>)
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	f7ff fab7 	bl	8000554 <HAL_InitTick>
  return HAL_OK;
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	e7c8      	b.n	8000f7c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fea:	6813      	ldr	r3, [r2, #0]
 8000fec:	f023 0307 	bic.w	r3, r3, #7
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff4:	6813      	ldr	r3, [r2, #0]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d1bd      	bne.n	8000f7a <HAL_RCC_ClockConfig+0xa>
 8000ffe:	e7c5      	b.n	8000f8c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001000:	492d      	ldr	r1, [pc, #180]	; (80010b8 <HAL_RCC_ClockConfig+0x148>)
 8001002:	68a0      	ldr	r0, [r4, #8]
 8001004:	684b      	ldr	r3, [r1, #4]
 8001006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800100a:	4303      	orrs	r3, r0
 800100c:	604b      	str	r3, [r1, #4]
 800100e:	e7c0      	b.n	8000f92 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001010:	6862      	ldr	r2, [r4, #4]
 8001012:	4e29      	ldr	r6, [pc, #164]	; (80010b8 <HAL_RCC_ClockConfig+0x148>)
 8001014:	2a01      	cmp	r2, #1
 8001016:	d126      	bne.n	8001066 <HAL_RCC_ClockConfig+0xf6>
 8001018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001020:	6831      	ldr	r1, [r6, #0]
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	fab3 f383 	clz	r3, r3
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001034:	d0a1      	beq.n	8000f7a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001036:	6873      	ldr	r3, [r6, #4]
 8001038:	f023 0303 	bic.w	r3, r3, #3
 800103c:	431a      	orrs	r2, r3
 800103e:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001040:	f7ff fac8 	bl	80005d4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001044:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001048:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104a:	6873      	ldr	r3, [r6, #4]
 800104c:	6862      	ldr	r2, [r4, #4]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001056:	d09e      	beq.n	8000f96 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001058:	f7ff fabc 	bl	80005d4 <HAL_GetTick>
 800105c:	1bc0      	subs	r0, r0, r7
 800105e:	4540      	cmp	r0, r8
 8001060:	d9f3      	bls.n	800104a <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001062:	2003      	movs	r0, #3
 8001064:	e78a      	b.n	8000f7c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001066:	2a02      	cmp	r2, #2
 8001068:	bf0c      	ite	eq
 800106a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800106e:	2302      	movne	r3, #2
 8001070:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	6830      	ldr	r0, [r6, #0]
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	4203      	tst	r3, r0
 800108a:	e7d3      	b.n	8001034 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108c:	6813      	ldr	r3, [r2, #0]
 800108e:	f023 0307 	bic.w	r3, r3, #7
 8001092:	432b      	orrs	r3, r5
 8001094:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001096:	6813      	ldr	r3, [r2, #0]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	42ab      	cmp	r3, r5
 800109e:	f47f af6c 	bne.w	8000f7a <HAL_RCC_ClockConfig+0xa>
 80010a2:	e77e      	b.n	8000fa2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010a4:	686b      	ldr	r3, [r5, #4]
 80010a6:	68e1      	ldr	r1, [r4, #12]
 80010a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ac:	430b      	orrs	r3, r1
 80010ae:	606b      	str	r3, [r5, #4]
 80010b0:	e77c      	b.n	8000fac <HAL_RCC_ClockConfig+0x3c>
 80010b2:	bf00      	nop
 80010b4:	40022000 	.word	0x40022000
 80010b8:	40021000 	.word	0x40021000
 80010bc:	08001790 	.word	0x08001790
 80010c0:	20000014 	.word	0x20000014
 80010c4:	2000001c 	.word	0x2000001c

080010c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80010ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	fa92 f2a2 	rbit	r2, r2
 80010d4:	fab2 f282 	clz	r2, r2
 80010d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80010dc:	40d3      	lsrs	r3, r2
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80010e0:	5cd3      	ldrb	r3, [r2, r3]
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80010e4:	6810      	ldr	r0, [r2, #0]
}    
 80010e6:	40d8      	lsrs	r0, r3
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	080017a0 	.word	0x080017a0
 80010f4:	20000014 	.word	0x20000014

080010f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_RCC_GetPCLK2Freq+0x24>)
 80010fa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	fa92 f2a2 	rbit	r2, r2
 8001104:	fab2 f282 	clz	r2, r2
 8001108:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800110c:	40d3      	lsrs	r3, r2
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001110:	5cd3      	ldrb	r3, [r2, r3]
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001114:	6810      	ldr	r0, [r2, #0]
} 
 8001116:	40d8      	lsrs	r0, r3
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	080017a0 	.word	0x080017a0
 8001124:	20000014 	.word	0x20000014

08001128 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001128:	6803      	ldr	r3, [r0, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001130:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800113a:	2320      	movs	r3, #32
 800113c:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800113e:	2300      	movs	r3, #0
 8001140:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001142:	4770      	bx	lr

08001144 <HAL_UART_Transmit_DMA>:
{
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	4604      	mov	r4, r0
 8001148:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800114a:	6f67      	ldr	r7, [r4, #116]	; 0x74
 800114c:	2f20      	cmp	r7, #32
 800114e:	d136      	bne.n	80011be <HAL_UART_Transmit_DMA+0x7a>
    if ((pData == NULL) || (Size == 0U))
 8001150:	b341      	cbz	r1, 80011a4 <HAL_UART_Transmit_DMA+0x60>
 8001152:	b33a      	cbz	r2, 80011a4 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8001154:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8001158:	2a01      	cmp	r2, #1
 800115a:	d030      	beq.n	80011be <HAL_UART_Transmit_DMA+0x7a>
    if (huart->hdmatx != NULL)
 800115c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 800115e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    __HAL_LOCK(huart);
 8001162:	2501      	movs	r5, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001164:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001166:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001168:	67e6      	str	r6, [r4, #124]	; 0x7c
    __HAL_LOCK(huart);
 800116a:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 800116e:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001170:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001174:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8001176:	b1b8      	cbz	r0, 80011a8 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001178:	f8df c048 	ldr.w	ip, [pc, #72]	; 80011c4 <HAL_UART_Transmit_DMA+0x80>
 800117c:	6822      	ldr	r2, [r4, #0]
 800117e:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001182:	f8df c044 	ldr.w	ip, [pc, #68]	; 80011c8 <HAL_UART_Transmit_DMA+0x84>
 8001186:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800118a:	f8df c040 	ldr.w	ip, [pc, #64]	; 80011cc <HAL_UART_Transmit_DMA+0x88>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800118e:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8001190:	e9c0 c60c 	strd	ip, r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001194:	f7ff face 	bl	8000734 <HAL_DMA_Start_IT>
 8001198:	b130      	cbz	r0, 80011a8 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800119a:	2310      	movs	r3, #16
 800119c:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 800119e:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->gState = HAL_UART_STATE_READY;
 80011a2:	6767      	str	r7, [r4, #116]	; 0x74
      return HAL_ERROR;
 80011a4:	2001      	movs	r0, #1
 80011a6:	e009      	b.n	80011bc <HAL_UART_Transmit_DMA+0x78>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 80011ac:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80011ae:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80011b0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ba:	609a      	str	r2, [r3, #8]
}
 80011bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80011be:	2002      	movs	r0, #2
 80011c0:	e7fc      	b.n	80011bc <HAL_UART_Transmit_DMA+0x78>
 80011c2:	bf00      	nop
 80011c4:	080011d1 	.word	0x080011d1
 80011c8:	080011ff 	.word	0x080011ff
 80011cc:	08001209 	.word	0x08001209

080011d0 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80011d0:	6982      	ldr	r2, [r0, #24]
 80011d2:	2a20      	cmp	r2, #32
{
 80011d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80011d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80011d8:	d00c      	beq.n	80011f4 <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 80011da:	2200      	movs	r2, #0
 80011dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011f0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80011f2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f911 	bl	800041c <HAL_UART_TxCpltCallback>
}
 80011fa:	e7fa      	b.n	80011f2 <UART_DMATransmitCplt+0x22>

080011fc <HAL_UART_TxHalfCpltCallback>:
 80011fc:	4770      	bx	lr

080011fe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80011fe:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001200:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001202:	f7ff fffb 	bl	80011fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001206:	bd08      	pop	{r3, pc}

08001208 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001208:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800120a:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800120c:	6f42      	ldr	r2, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800120e:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8001210:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001212:	689c      	ldr	r4, [r3, #8]
 8001214:	0624      	lsls	r4, r4, #24
 8001216:	d50a      	bpl.n	800122e <UART_DMAError+0x26>
 8001218:	2a21      	cmp	r2, #33	; 0x21
 800121a:	d108      	bne.n	800122e <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800121c:	2200      	movs	r2, #0
 800121e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001228:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800122a:	2220      	movs	r2, #32
 800122c:	6742      	str	r2, [r0, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	065b      	lsls	r3, r3, #25
 8001232:	d506      	bpl.n	8001242 <UART_DMAError+0x3a>
 8001234:	2922      	cmp	r1, #34	; 0x22
 8001236:	d104      	bne.n	8001242 <UART_DMAError+0x3a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800123e:	f7ff ff73 	bl	8001128 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001242:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	67c3      	str	r3, [r0, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800124a:	f7ff f8e8 	bl	800041e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800124e:	bd10      	pop	{r4, pc}

08001250 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001250:	6803      	ldr	r3, [r0, #0]
 8001252:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001254:	6819      	ldr	r1, [r3, #0]
{
 8001256:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 8001258:	f640 060f 	movw	r6, #2063	; 0x80f
 800125c:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800125e:	689d      	ldr	r5, [r3, #8]
{
 8001260:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8001262:	d109      	bne.n	8001278 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001264:	0696      	lsls	r6, r2, #26
 8001266:	d570      	bpl.n	800134a <HAL_UART_IRQHandler+0xfa>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001268:	068e      	lsls	r6, r1, #26
 800126a:	d56e      	bpl.n	800134a <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 800126c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800126e:	2b00      	cmp	r3, #0
 8001270:	d066      	beq.n	8001340 <HAL_UART_IRQHandler+0xf0>
}
 8001272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8001276:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001278:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800127c:	f401 7690 	and.w	r6, r1, #288	; 0x120
 8001280:	4306      	orrs	r6, r0
 8001282:	d062      	beq.n	800134a <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001284:	07d5      	lsls	r5, r2, #31
 8001286:	d507      	bpl.n	8001298 <HAL_UART_IRQHandler+0x48>
 8001288:	05ce      	lsls	r6, r1, #23
 800128a:	d505      	bpl.n	8001298 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800128c:	2501      	movs	r5, #1
 800128e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001290:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001292:	f045 0501 	orr.w	r5, r5, #1
 8001296:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001298:	0795      	lsls	r5, r2, #30
 800129a:	d506      	bpl.n	80012aa <HAL_UART_IRQHandler+0x5a>
 800129c:	b128      	cbz	r0, 80012aa <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800129e:	2502      	movs	r5, #2
 80012a0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80012a2:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80012a4:	f045 0504 	orr.w	r5, r5, #4
 80012a8:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80012aa:	0756      	lsls	r6, r2, #29
 80012ac:	d506      	bpl.n	80012bc <HAL_UART_IRQHandler+0x6c>
 80012ae:	b128      	cbz	r0, 80012bc <HAL_UART_IRQHandler+0x6c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80012b0:	2504      	movs	r5, #4
 80012b2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80012b4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80012b6:	f045 0502 	orr.w	r5, r5, #2
 80012ba:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80012bc:	0715      	lsls	r5, r2, #28
 80012be:	d509      	bpl.n	80012d4 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80012c0:	f001 0520 	and.w	r5, r1, #32
 80012c4:	4328      	orrs	r0, r5
 80012c6:	d005      	beq.n	80012d4 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80012c8:	2008      	movs	r0, #8
 80012ca:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80012cc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80012ce:	f040 0008 	orr.w	r0, r0, #8
 80012d2:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80012d4:	0516      	lsls	r6, r2, #20
 80012d6:	d508      	bpl.n	80012ea <HAL_UART_IRQHandler+0x9a>
 80012d8:	014d      	lsls	r5, r1, #5
 80012da:	d506      	bpl.n	80012ea <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80012dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012e0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80012e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80012ea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80012ec:	b343      	cbz	r3, 8001340 <HAL_UART_IRQHandler+0xf0>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80012ee:	0690      	lsls	r0, r2, #26
 80012f0:	d505      	bpl.n	80012fe <HAL_UART_IRQHandler+0xae>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80012f2:	0689      	lsls	r1, r1, #26
 80012f4:	d503      	bpl.n	80012fe <HAL_UART_IRQHandler+0xae>
        if (huart->RxISR != NULL)
 80012f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80012f8:	b10b      	cbz	r3, 80012fe <HAL_UART_IRQHandler+0xae>
          huart->RxISR(huart);
 80012fa:	4620      	mov	r0, r4
 80012fc:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80012fe:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001300:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001302:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001304:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130c:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 800130e:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001310:	d017      	beq.n	8001342 <HAL_UART_IRQHandler+0xf2>
        UART_EndRxTransfer(huart);
 8001312:	f7ff ff09 	bl	8001128 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	0652      	lsls	r2, r2, #25
 800131c:	d50d      	bpl.n	800133a <HAL_UART_IRQHandler+0xea>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800131e:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001320:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001326:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001328:	b138      	cbz	r0, 800133a <HAL_UART_IRQHandler+0xea>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_UART_IRQHandler+0x144>)
 800132c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800132e:	f7ff fa3d 	bl	80007ac <HAL_DMA_Abort_IT>
 8001332:	b128      	cbz	r0, 8001340 <HAL_UART_IRQHandler+0xf0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001334:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001336:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001338:	e79b      	b.n	8001272 <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff f86f 	bl	800041e <HAL_UART_ErrorCallback>
}
 8001340:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001342:	f7ff f86c 	bl	800041e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001346:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001348:	e7fa      	b.n	8001340 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800134a:	02d6      	lsls	r6, r2, #11
 800134c:	d509      	bpl.n	8001362 <HAL_UART_IRQHandler+0x112>
 800134e:	0268      	lsls	r0, r5, #9
 8001350:	d507      	bpl.n	8001362 <HAL_UART_IRQHandler+0x112>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001352:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8001356:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001358:	621a      	str	r2, [r3, #32]
}
 800135a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800135e:	f000 b9dd 	b.w	800171c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001362:	0616      	lsls	r6, r2, #24
 8001364:	d506      	bpl.n	8001374 <HAL_UART_IRQHandler+0x124>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001366:	060d      	lsls	r5, r1, #24
 8001368:	d504      	bpl.n	8001374 <HAL_UART_IRQHandler+0x124>
    if (huart->TxISR != NULL)
 800136a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0e7      	beq.n	8001340 <HAL_UART_IRQHandler+0xf0>
      huart->TxISR(huart);
 8001370:	4620      	mov	r0, r4
 8001372:	e77e      	b.n	8001272 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001374:	0650      	lsls	r0, r2, #25
 8001376:	d5e3      	bpl.n	8001340 <HAL_UART_IRQHandler+0xf0>
 8001378:	064a      	lsls	r2, r1, #25
 800137a:	d5e1      	bpl.n	8001340 <HAL_UART_IRQHandler+0xf0>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001382:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001384:	2320      	movs	r3, #32
 8001386:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001388:	2300      	movs	r3, #0
 800138a:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800138c:	4620      	mov	r0, r4
 800138e:	f7ff f845 	bl	800041c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001392:	e7d5      	b.n	8001340 <HAL_UART_IRQHandler+0xf0>
 8001394:	08001399 	.word	0x08001399

08001398 <UART_DMAAbortOnError>:
{
 8001398:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800139a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80013a2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80013a6:	f7ff f83a 	bl	800041e <HAL_UART_ErrorCallback>
}
 80013aa:	bd08      	pop	{r3, pc}

080013ac <UART_SetConfig>:
{
 80013ac:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013ae:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80013b0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013b2:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80013b4:	681d      	ldr	r5, [r3, #0]
{
 80013b6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013b8:	6900      	ldr	r0, [r0, #16]
 80013ba:	4302      	orrs	r2, r0
 80013bc:	6960      	ldr	r0, [r4, #20]
 80013be:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80013c0:	4855      	ldr	r0, [pc, #340]	; (8001518 <UART_SetConfig+0x16c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013c2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80013c4:	4028      	ands	r0, r5
 80013c6:	4302      	orrs	r2, r0
 80013c8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80013ce:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013d0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80013d4:	4302      	orrs	r2, r0
 80013d6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80013d8:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80013da:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80013dc:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80013e0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80013e2:	4302      	orrs	r2, r0
 80013e4:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013e6:	4a4d      	ldr	r2, [pc, #308]	; (800151c <UART_SetConfig+0x170>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d114      	bne.n	8001416 <UART_SetConfig+0x6a>
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <UART_SetConfig+0x174>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	3b01      	subs	r3, #1
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d814      	bhi.n	8001424 <UART_SetConfig+0x78>
 80013fa:	4a4a      	ldr	r2, [pc, #296]	; (8001524 <UART_SetConfig+0x178>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013fc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	d158      	bne.n	80014b6 <UART_SetConfig+0x10a>
    switch (clocksource)
 8001404:	2b08      	cmp	r3, #8
 8001406:	d84b      	bhi.n	80014a0 <UART_SetConfig+0xf4>
 8001408:	e8df f003 	tbb	[pc, r3]
 800140c:	4a393621 	.word	0x4a393621
 8001410:	4a4a4a42 	.word	0x4a4a4a42
 8001414:	45          	.byte	0x45
 8001415:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001416:	4a44      	ldr	r2, [pc, #272]	; (8001528 <UART_SetConfig+0x17c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d003      	beq.n	8001424 <UART_SetConfig+0x78>
 800141c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001420:	4293      	cmp	r3, r2
 8001422:	d173      	bne.n	800150c <UART_SetConfig+0x160>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001424:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001428:	d011      	beq.n	800144e <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800142a:	f7ff fe4d 	bl	80010c8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800142e:	6863      	ldr	r3, [r4, #4]
 8001430:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001434:	fbb0 f3f3 	udiv	r3, r0, r3
 8001438:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800143a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800143c:	f1a3 0110 	sub.w	r1, r3, #16
 8001440:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001444:	4291      	cmp	r1, r2
 8001446:	d812      	bhi.n	800146e <UART_SetConfig+0xc2>
      huart->Instance->BRR = usartdiv;
 8001448:	6822      	ldr	r2, [r4, #0]
 800144a:	60d3      	str	r3, [r2, #12]
 800144c:	e010      	b.n	8001470 <UART_SetConfig+0xc4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800144e:	f7ff fe3b 	bl	80010c8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001452:	6863      	ldr	r3, [r4, #4]
 8001454:	085a      	lsrs	r2, r3, #1
 8001456:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800145a:	fbb0 f3f3 	udiv	r3, r0, r3
 800145e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001460:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001462:	f1a3 0110 	sub.w	r1, r3, #16
 8001466:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800146a:	4291      	cmp	r1, r2
 800146c:	d91b      	bls.n	80014a6 <UART_SetConfig+0xfa>
      ret = HAL_ERROR;
 800146e:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8001470:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001472:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 8001476:	bd38      	pop	{r3, r4, r5, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8001478:	f7ff fe3e 	bl	80010f8 <HAL_RCC_GetPCLK2Freq>
 800147c:	e7e9      	b.n	8001452 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800147e:	6862      	ldr	r2, [r4, #4]
 8001480:	0853      	lsrs	r3, r2, #1
 8001482:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001486:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800148a:	fbb3 f3f2 	udiv	r3, r3, r2
 800148e:	e7e6      	b.n	800145e <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetSysClockFreq();
 8001490:	f7ff fd3e 	bl	8000f10 <HAL_RCC_GetSysClockFreq>
 8001494:	e7dd      	b.n	8001452 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001496:	6862      	ldr	r2, [r4, #4]
 8001498:	0853      	lsrs	r3, r2, #1
 800149a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800149e:	e7f4      	b.n	800148a <UART_SetConfig+0xde>
        ret = HAL_ERROR;
 80014a0:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e7dd      	b.n	8001462 <UART_SetConfig+0xb6>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80014a6:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 80014aa:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 80014b0:	4313      	orrs	r3, r2
 80014b2:	60cb      	str	r3, [r1, #12]
 80014b4:	e7dc      	b.n	8001470 <UART_SetConfig+0xc4>
    switch (clocksource)
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d82b      	bhi.n	8001512 <UART_SetConfig+0x166>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <UART_SetConfig+0x114>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	0800142b 	.word	0x0800142b
 80014c4:	080014e5 	.word	0x080014e5
 80014c8:	080014eb 	.word	0x080014eb
 80014cc:	08001513 	.word	0x08001513
 80014d0:	080014fd 	.word	0x080014fd
 80014d4:	08001513 	.word	0x08001513
 80014d8:	08001513 	.word	0x08001513
 80014dc:	08001513 	.word	0x08001513
 80014e0:	08001503 	.word	0x08001503
        pclk = HAL_RCC_GetPCLK2Freq();
 80014e4:	f7ff fe08 	bl	80010f8 <HAL_RCC_GetPCLK2Freq>
 80014e8:	e7a1      	b.n	800142e <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80014ea:	6862      	ldr	r2, [r4, #4]
 80014ec:	0853      	lsrs	r3, r2, #1
 80014ee:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80014f2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80014fa:	e79d      	b.n	8001438 <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetSysClockFreq();
 80014fc:	f7ff fd08 	bl	8000f10 <HAL_RCC_GetSysClockFreq>
 8001500:	e795      	b.n	800142e <UART_SetConfig+0x82>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001502:	6862      	ldr	r2, [r4, #4]
 8001504:	0853      	lsrs	r3, r2, #1
 8001506:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800150a:	e7f4      	b.n	80014f6 <UART_SetConfig+0x14a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800150c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001510:	d0c6      	beq.n	80014a0 <UART_SetConfig+0xf4>
 8001512:	2001      	movs	r0, #1
 8001514:	2300      	movs	r3, #0
 8001516:	e791      	b.n	800143c <UART_SetConfig+0x90>
 8001518:	efff69f3 	.word	0xefff69f3
 800151c:	40013800 	.word	0x40013800
 8001520:	40021000 	.word	0x40021000
 8001524:	080017c8 	.word	0x080017c8
 8001528:	40004400 	.word	0x40004400

0800152c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800152c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800152e:	07da      	lsls	r2, r3, #31
{
 8001530:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001532:	d506      	bpl.n	8001542 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001534:	6801      	ldr	r1, [r0, #0]
 8001536:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001538:	684a      	ldr	r2, [r1, #4]
 800153a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800153e:	4322      	orrs	r2, r4
 8001540:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001542:	079c      	lsls	r4, r3, #30
 8001544:	d506      	bpl.n	8001554 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001546:	6801      	ldr	r1, [r0, #0]
 8001548:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800154a:	684a      	ldr	r2, [r1, #4]
 800154c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001550:	4322      	orrs	r2, r4
 8001552:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001554:	0759      	lsls	r1, r3, #29
 8001556:	d506      	bpl.n	8001566 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001558:	6801      	ldr	r1, [r0, #0]
 800155a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800155c:	684a      	ldr	r2, [r1, #4]
 800155e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001562:	4322      	orrs	r2, r4
 8001564:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001566:	071a      	lsls	r2, r3, #28
 8001568:	d506      	bpl.n	8001578 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800156a:	6801      	ldr	r1, [r0, #0]
 800156c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800156e:	684a      	ldr	r2, [r1, #4]
 8001570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001574:	4322      	orrs	r2, r4
 8001576:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001578:	06dc      	lsls	r4, r3, #27
 800157a:	d506      	bpl.n	800158a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800157c:	6801      	ldr	r1, [r0, #0]
 800157e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001580:	688a      	ldr	r2, [r1, #8]
 8001582:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001586:	4322      	orrs	r2, r4
 8001588:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800158a:	0699      	lsls	r1, r3, #26
 800158c:	d506      	bpl.n	800159c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800158e:	6801      	ldr	r1, [r0, #0]
 8001590:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001592:	688a      	ldr	r2, [r1, #8]
 8001594:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001598:	4322      	orrs	r2, r4
 800159a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800159c:	065a      	lsls	r2, r3, #25
 800159e:	d50f      	bpl.n	80015c0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015a0:	6801      	ldr	r1, [r0, #0]
 80015a2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80015a4:	684a      	ldr	r2, [r1, #4]
 80015a6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80015aa:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015b0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015b2:	d105      	bne.n	80015c0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80015b4:	684a      	ldr	r2, [r1, #4]
 80015b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80015b8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80015bc:	4322      	orrs	r2, r4
 80015be:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80015c0:	061b      	lsls	r3, r3, #24
 80015c2:	d506      	bpl.n	80015d2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80015c4:	6802      	ldr	r2, [r0, #0]
 80015c6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80015c8:	6853      	ldr	r3, [r2, #4]
 80015ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80015ce:	430b      	orrs	r3, r1
 80015d0:	6053      	str	r3, [r2, #4]
}
 80015d2:	bd10      	pop	{r4, pc}

080015d4 <UART_WaitOnFlagUntilTimeout>:
{
 80015d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80015dc:	4604      	mov	r4, r0
 80015de:	460e      	mov	r6, r1
 80015e0:	4615      	mov	r5, r2
 80015e2:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015e4:	6822      	ldr	r2, [r4, #0]
 80015e6:	69d3      	ldr	r3, [r2, #28]
 80015e8:	ea36 0303 	bics.w	r3, r6, r3
 80015ec:	bf0c      	ite	eq
 80015ee:	2301      	moveq	r3, #1
 80015f0:	2300      	movne	r3, #0
 80015f2:	42ab      	cmp	r3, r5
 80015f4:	d001      	beq.n	80015fa <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80015f6:	2000      	movs	r0, #0
 80015f8:	e01a      	b.n	8001630 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80015fa:	f1b8 3fff 	cmp.w	r8, #4294967295
 80015fe:	d0f2      	beq.n	80015e6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001600:	f7fe ffe8 	bl	80005d4 <HAL_GetTick>
 8001604:	1bc0      	subs	r0, r0, r7
 8001606:	4540      	cmp	r0, r8
 8001608:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800160a:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800160c:	d802      	bhi.n	8001614 <UART_WaitOnFlagUntilTimeout+0x40>
 800160e:	f1b8 0f00 	cmp.w	r8, #0
 8001612:	d10f      	bne.n	8001634 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001614:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001618:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800161a:	6883      	ldr	r3, [r0, #8]
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001622:	2320      	movs	r3, #32
 8001624:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001626:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001628:	2300      	movs	r3, #0
 800162a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 800162e:	2003      	movs	r0, #3
}
 8001630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001634:	075a      	lsls	r2, r3, #29
 8001636:	d5d5      	bpl.n	80015e4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001638:	69c3      	ldr	r3, [r0, #28]
 800163a:	051b      	lsls	r3, r3, #20
 800163c:	d5d2      	bpl.n	80015e4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800163e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001642:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001644:	6803      	ldr	r3, [r0, #0]
 8001646:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800164a:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800164c:	6883      	ldr	r3, [r0, #8]
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001654:	2320      	movs	r3, #32
 8001656:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001658:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800165a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800165c:	e7e4      	b.n	8001628 <UART_WaitOnFlagUntilTimeout+0x54>

0800165e <UART_CheckIdleState>:
{
 800165e:	b530      	push	{r4, r5, lr}
 8001660:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001662:	2500      	movs	r5, #0
{
 8001664:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001666:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001668:	f7fe ffb4 	bl	80005d4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800166c:	6822      	ldr	r2, [r4, #0]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8001672:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001674:	d414      	bmi.n	80016a0 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001676:	6822      	ldr	r2, [r4, #0]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	0752      	lsls	r2, r2, #29
 800167c:	d509      	bpl.n	8001692 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800167e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001682:	9200      	str	r2, [sp, #0]
 8001684:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001688:	2200      	movs	r2, #0
 800168a:	4620      	mov	r0, r4
 800168c:	f7ff ffa2 	bl	80015d4 <UART_WaitOnFlagUntilTimeout>
 8001690:	b998      	cbnz	r0, 80016ba <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8001692:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001694:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001696:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001698:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800169c:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 800169e:	e00d      	b.n	80016bc <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80016a0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80016a4:	9200      	str	r2, [sp, #0]
 80016a6:	9003      	str	r0, [sp, #12]
 80016a8:	462a      	mov	r2, r5
 80016aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80016ae:	4620      	mov	r0, r4
 80016b0:	f7ff ff90 	bl	80015d4 <UART_WaitOnFlagUntilTimeout>
 80016b4:	9b03      	ldr	r3, [sp, #12]
 80016b6:	2800      	cmp	r0, #0
 80016b8:	d0dd      	beq.n	8001676 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 80016ba:	2003      	movs	r0, #3
}
 80016bc:	b005      	add	sp, #20
 80016be:	bd30      	pop	{r4, r5, pc}

080016c0 <HAL_UART_Init>:
{
 80016c0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80016c2:	4604      	mov	r4, r0
 80016c4:	b340      	cbz	r0, 8001718 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80016c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80016c8:	b91b      	cbnz	r3, 80016d2 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80016ca:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80016ce:	f7fe fe21 	bl	8000314 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80016d2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80016d4:	2324      	movs	r3, #36	; 0x24
 80016d6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80016d8:	6813      	ldr	r3, [r2, #0]
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff fe63 	bl	80013ac <UART_SetConfig>
 80016e6:	2801      	cmp	r0, #1
 80016e8:	d016      	beq.n	8001718 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ec:	b113      	cbz	r3, 80016f4 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff ff1c 	bl	800152c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001704:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800170c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001714:	f7ff bfa3 	b.w	800165e <UART_CheckIdleState>
}
 8001718:	2001      	movs	r0, #1
 800171a:	bd10      	pop	{r4, pc}

0800171c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800171c:	4770      	bx	lr
	...

08001720 <__libc_init_array>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	4d0d      	ldr	r5, [pc, #52]	; (8001758 <__libc_init_array+0x38>)
 8001724:	4c0d      	ldr	r4, [pc, #52]	; (800175c <__libc_init_array+0x3c>)
 8001726:	1b64      	subs	r4, r4, r5
 8001728:	10a4      	asrs	r4, r4, #2
 800172a:	2600      	movs	r6, #0
 800172c:	42a6      	cmp	r6, r4
 800172e:	d109      	bne.n	8001744 <__libc_init_array+0x24>
 8001730:	4d0b      	ldr	r5, [pc, #44]	; (8001760 <__libc_init_array+0x40>)
 8001732:	4c0c      	ldr	r4, [pc, #48]	; (8001764 <__libc_init_array+0x44>)
 8001734:	f000 f820 	bl	8001778 <_init>
 8001738:	1b64      	subs	r4, r4, r5
 800173a:	10a4      	asrs	r4, r4, #2
 800173c:	2600      	movs	r6, #0
 800173e:	42a6      	cmp	r6, r4
 8001740:	d105      	bne.n	800174e <__libc_init_array+0x2e>
 8001742:	bd70      	pop	{r4, r5, r6, pc}
 8001744:	f855 3b04 	ldr.w	r3, [r5], #4
 8001748:	4798      	blx	r3
 800174a:	3601      	adds	r6, #1
 800174c:	e7ee      	b.n	800172c <__libc_init_array+0xc>
 800174e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001752:	4798      	blx	r3
 8001754:	3601      	adds	r6, #1
 8001756:	e7f2      	b.n	800173e <__libc_init_array+0x1e>
 8001758:	080017cc 	.word	0x080017cc
 800175c:	080017cc 	.word	0x080017cc
 8001760:	080017cc 	.word	0x080017cc
 8001764:	080017d0 	.word	0x080017d0

08001768 <memset>:
 8001768:	4402      	add	r2, r0
 800176a:	4603      	mov	r3, r0
 800176c:	4293      	cmp	r3, r2
 800176e:	d100      	bne.n	8001772 <memset+0xa>
 8001770:	4770      	bx	lr
 8001772:	f803 1b01 	strb.w	r1, [r3], #1
 8001776:	e7f9      	b.n	800176c <memset+0x4>

08001778 <_init>:
 8001778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177a:	bf00      	nop
 800177c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800177e:	bc08      	pop	{r3}
 8001780:	469e      	mov	lr, r3
 8001782:	4770      	bx	lr

08001784 <_fini>:
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001786:	bf00      	nop
 8001788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800178a:	bc08      	pop	{r3}
 800178c:	469e      	mov	lr, r3
 800178e:	4770      	bx	lr
